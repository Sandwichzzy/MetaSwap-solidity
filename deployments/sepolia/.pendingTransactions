{
  "0xa42b3f0ab2e8685d72a95d54a910f7a31424f0acb6ed43ff7ef961398d559cc1": {
    "name": "PositionManager",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "PositionManager",
      "sourceName": "contracts/PositionManager.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_poolManager",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "ERC721IncorrectOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ERC721InsufficientApproval",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "approver",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidApprover",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidOperator",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidReceiver",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidSender",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ERC721NonexistentToken",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "name": "collect",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getAllPositions",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token0",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                },
                {
                  "internalType": "uint24",
                  "name": "fee",
                  "type": "uint24"
                },
                {
                  "internalType": "uint128",
                  "name": "liquidity",
                  "type": "uint128"
                },
                {
                  "internalType": "int24",
                  "name": "tickLower",
                  "type": "int24"
                },
                {
                  "internalType": "int24",
                  "name": "tickUpper",
                  "type": "int24"
                },
                {
                  "internalType": "uint128",
                  "name": "tokensOwed0",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "tokensOwed1",
                  "type": "uint128"
                },
                {
                  "internalType": "uint256",
                  "name": "feeGrowthInside0LastX128",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feeGrowthInside1LastX128",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPositionManager.PositionInfo[]",
              "name": "positionInfo",
              "type": "tuple[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getSender",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token0",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "token1",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "index",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "amount0Desired",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount1Desired",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IPositionManager.MintParams",
              "name": "params",
              "type": "tuple"
            }
          ],
          "name": "mint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount1",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "mintCallback",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "poolManager",
          "outputs": [
            {
              "internalType": "contract IPoolManager",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "positions",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "index",
              "type": "uint32"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            },
            {
              "internalType": "int24",
              "name": "tickLower",
              "type": "int24"
            },
            {
              "internalType": "int24",
              "name": "tickUpper",
              "type": "int24"
            },
            {
              "internalType": "uint128",
              "name": "tokensOwed0",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "tokensOwed1",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "feeGrowthInside0LastX128",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeGrowthInside1LastX128",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405260016007553480156200001657600080fd5b5060405162002fb238038062002fb28339810160408190526200003991620000c8565b6040518060400160405280601081526020016f26b2ba30a9bbb0b82837b9b4ba34b7b760811b8152506040518060400160405280600381526020016204d53560ec1b81525081600090816200008f91906200019f565b5060016200009e82826200019f565b5050600680546001600160a01b0319166001600160a01b039390931692909217909155506200026b565b600060208284031215620000db57600080fd5b81516001600160a01b0381168114620000f357600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012557607f821691505b6020821081036200014657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019a57600081815260208120601f850160051c81016020861015620001755750805b601f850160051c820191505b81811015620001965782815560010162000181565b5050505b505050565b81516001600160401b03811115620001bb57620001bb620000fa565b620001d381620001cc845462000110565b846200014c565b602080601f8311600181146200020b5760008415620001f25750858301515b600019600386901b1c1916600185901b17855562000196565b600085815260208120601f198616915b828110156200023c578886015182559484019460019091019084016200021b565b50858210156200025b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612d37806200027b6000396000f3fe60806040526004361061012a5760003560e01c80636352211e116100ab5780639f382e9b1161006f5780639f382e9b14610413578063a22cb46514610433578063b88d4fde14610453578063c87b56dd14610473578063dc4c90d314610493578063e985e9c5146104b357600080fd5b80636352211e146102c557806370a08231146102e55780638d3c100a1461031357806395d89b411461033357806399fbab881461034857600080fd5b806323b872dd116100f257806323b872dd146102025780632c6cc6c71461022257806342842e0e1461025d57806342966c681461027d5780635e01eb5a146102b257600080fd5b806301ffc9a71461012f57806306fdde0314610164578063081812fc14610186578063095ea7b3146101be57806318f56a0a146101e0575b600080fd5b34801561013b57600080fd5b5061014f61014a366004612427565b6104d3565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b50610179610525565b60405161015b9190612494565b34801561019257600080fd5b506101a66101a13660046124a7565b6105b7565b6040516001600160a01b03909116815260200161015b565b3480156101ca57600080fd5b506101de6101d93660046124d5565b6105e0565b005b3480156101ec57600080fd5b506101f56105ef565b60405161015b9190612501565b34801561020e57600080fd5b506101de61021d366004612614565b6107f6565b610235610230366004612655565b610886565b604080519485526001600160801b03909316602085015291830152606082015260800161015b565b34801561026957600080fd5b506101de610278366004612614565b61103b565b34801561028957600080fd5b5061029d6102983660046124a7565b61105b565b6040805192835260208301919091520161015b565b3480156102be57600080fd5b50336101a6565b3480156102d157600080fd5b506101a66102e03660046124a7565b611361565b3480156102f157600080fd5b5061030561030036600461266d565b61136c565b60405190815260200161015b565b34801561031f57600080fd5b5061029d61032e36600461268a565b6113b4565b34801561033f57600080fd5b5061017961156d565b34801561035457600080fd5b506103fa6103633660046124a7565b600860205260009081526040902080546001820154600280840154600385015460048601546005870154600688015460079098015496976001600160a01b039687169794871696841695600160a01b850463ffffffff1695600160c01b90950462ffffff16946001600160801b0380861695600160801b808204850b96600160981b90920490940b9482821694909104909116918d565b60405161015b9d9c9b9a999897969594939291906126ba565b34801561041f57600080fd5b506101de61042e366004612763565b61157c565b34801561043f57600080fd5b506101de61044e3660046127f1565b611777565b34801561045f57600080fd5b506101de61046e366004612835565b611782565b34801561047f57600080fd5b5061017961048e3660046124a7565b61179a565b34801561049f57600080fd5b506006546101a6906001600160a01b031681565b3480156104bf57600080fd5b5061014f6104ce366004612915565b61180f565b60006001600160e01b031982166380ac58cd60e01b148061050457506001600160e01b03198216635b5e139f60e01b145b8061051f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053490612943565b80601f016020809104026020016040519081016040528092919081815260200182805461056090612943565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b60006105c28261183d565b506000828152600460205260409020546001600160a01b031661051f565b6105eb828233611876565b5050565b60606001600754610600919061298d565b67ffffffffffffffff8111156106185761061861281f565b6040519080825280602002602001820160405280156106af57816020015b604080516101a08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282526000199092019101816106365790505b50905060005b60016007546106c4919061298d565b8163ffffffff1610156107f257600860006106e08360016129a0565b63ffffffff9081168252602080830193909352604091820160002082516101a0810184528154815260018201546001600160a01b039081169582019590955260028083015486169482019490945260038201549485166060820152600160a01b850483166080820152600160c01b90940462ffffff1660a085015260048101546001600160801b0380821660c0870152600160801b808304860b60e0880152600160981b90920490940b61010086015260058201548085166101208701520490921661014084015260068201546101608401526007909101546101808301528351849184169081106107d4576107d46129c4565b602002602001018190525080806107ea906129da565b9150506106b5565b5090565b6001600160a01b03821661082557604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610832838333611883565b9050836001600160a01b0316816001600160a01b031614610880576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161081c565b50505050565b600080808060c0850135428110156108d65760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015260640161081c565b6006546000906001600160a01b03166371c54fc96108f760208a018a61266d565b61090760408b0160208c0161266d565b61091760608c0160408d01612a11565b6040518463ffffffff1660e01b815260040161093593929190612a2c565b602060405180830381865afa158015610952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109769190612a55565b905060008190506000816001600160a01b0316638db791d26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612a55565b90506000610a4f836001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190612a72565b61197c565b90506000610a94846001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b9050610aab8383838e606001358f60800135611c37565b98506000610abc60208d018d61266d565b610acc60408e0160208f0161266d565b8d6040016020810190610adf9190612a11565b604080516001600160a01b039485166020820152939092169183019190915263ffffffff16606082015233608082015260a00160408051601f19818403018152908290526392f026ad60e01b825291506001600160a01b038616906392f026ad90610b529030908e908690600401612a95565b60408051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190612ac8565b9099509750610bc8610bac60c08e0160a08f0161266d565b60078054906000610bbc83612aec565b919050559c508c611cfb565b6040516316c1973960e01b815230600482015260009081906001600160a01b038816906316c197399060240160a060405180830381865afa158015610c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c359190612b1c565b50509250925050604051806101a001604052808e81526020018f60a0016020810190610c61919061266d565b6001600160a01b031681526020018f6000016020810190610c82919061266d565b6001600160a01b031681526020018f6020016020810190610ca3919061266d565b6001600160a01b031681526020018f6040016020810190610cc49190612a11565b63ffffffff168152602001886001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190612b73565b62ffffff1681526020018d6001600160801b03168152602001886001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612a72565b60020b8152602001886001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612a72565b60020b815260200160006001600160801b0316815260200160006001600160801b0316815260200183815260200182815250600860008f81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160030160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160186101000a81548162ffffff021916908362ffffff16021790555060c08201518160040160006101000a8154816001600160801b0302191690836001600160801b0316021790555060e08201518160040160106101000a81548162ffffff021916908360020b62ffffff1602179055506101008201518160040160136101000a81548162ffffff021916908360020b62ffffff1602179055506101208201518160050160006101000a8154816001600160801b0302191690836001600160801b031602179055506101408201518160050160106101000a8154816001600160801b0302191690836001600160801b03160217905550610160820151816006015561018082015181600701559050505050505050505050509193509193565b61105683838360405180602001604052806000815250611782565b505050565b60008082600061106a82611361565b9050611077813384611d60565b6110b25760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000858152600860205260408082206004808201546006546002840154600385015495516371c54fc960e01b815294966001600160801b039093169592946001600160a01b03928316946371c54fc9946111229493841693811692600160a01b90910463ffffffff169101612a2c565b602060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612a55565b6040516390bc169360e01b81526001600160801b038416600482015290915081906001600160a01b038216906390bc16939060240160408051808303816000875af11580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190612ac8565b6040516316c1973960e01b8152306004820152919950975060009081906001600160a01b038416906316c197399060240160a060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612b1c565b5050925092505061127e866006015483611266919061298d565b60048801546001600160801b0316600160801b611dc6565b611288908b612b98565b6005870180546000906112a59084906001600160801b0316612b98565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506112dc866007015482611266919061298d565b6112e6908a612b98565b60058701805460109061130a908490600160801b90046001600160801b0316612b98565b82546001600160801b039182166101009390930a9283029190920219909116179055506006860191909155600785015550505060040180546fffffffffffffffffffffffffffffffff191690555091939092509050565b600061051f8261183d565b60006001600160a01b038216611398576040516322718ad960e21b81526000600482015260240161081c565b506001600160a01b031660009081526003602052604090205490565b6000808360006113c382611361565b90506113d0813384611d60565b61140b5760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000868152600860205260408082206006546002820154600383015493516371c54fc960e01b81529294936001600160a01b03928316936371c54fc99361146a9381169290811691600160a01b90910463ffffffff1690600401612a2c565b602060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab9190612a55565b60058301546040516360d49d5360e01b81526001600160a01b038a811660048301526001600160801b038084166024840152600160801b90930490921660448201529192508291908216906360d49d539060640160408051808303816000875af115801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190612bb8565b600060058601556001600160801b03918216985016955061156189611e68565b50505050509250929050565b60606001805461053490612943565b600080808061158d85870187612beb565b6006546040516371c54fc960e01b815294985092965090945092506000916001600160a01b03909116906371c54fc9906115cf90889088908890600401612a2c565b602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190612a55565b90506001600160a01b038116331461166a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063616c6c6261636b2063616c6c6572000000000000000000604482015260640161081c565b88156116eb576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018b90528616906323b872dd906064016020604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190612c45565b505b871561176c576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018a90528516906323b872dd906064016020604051808303816000875af1158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612c45565b505b505050505050505050565b6105eb338383611ea3565b61178d8484846107f6565b6108803385858585611f42565b60606117a58261183d565b5060006117bd60408051602081019091526000815290565b905060008151116117dd5760405180602001604052806000815250611808565b806117e78461206d565b6040516020016117f8929190612c62565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260408120546001600160a01b03168061051f57604051637e27328960e01b81526004810184905260240161081c565b6110568383836001612100565b6000828152600260205260408120546001600160a01b03908116908316156118b0576118b0818486612206565b6001600160a01b038116156118ee576118cd600085600080612100565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561191d576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b60020b600060ff82901d80830118620d89e88111156119a6576119a66345c3193d60e11b8461226a565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b1860028216156119e2576ffff97272373d413259a46990580e213a0260801c5b6004821615611a01576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611a20576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611a3f576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611a5e576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a7d576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611a9c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611abc576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611adc576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611afc576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611b1c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611b3c576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611b5c576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b7c576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611b9c576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611bbd576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611bdd576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611bfc576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611c19576b048a170391f7dc42444e8fa20260801c5b6000841315611c2757600019045b63ffffffff0160201c9392505050565b6000836001600160a01b0316856001600160a01b03161115611c57579293925b846001600160a01b0316866001600160a01b031611611c8257611c7b85858561227b565b9050611cf2565b836001600160a01b0316866001600160a01b03161015611ce4576000611ca987868661227b565b90506000611cb88789866122e5565b9050806001600160801b0316826001600160801b031610611cd95780611cdb565b815b92505050611cf2565b611cef8585846122e5565b90505b95945050505050565b6001600160a01b038216611d2557604051633250574960e11b81526000600482015260240161081c565b6000611d3383836000611883565b90506001600160a01b03811615611056576040516339e3563760e11b81526000600482015260240161081c565b60006001600160a01b03831615801590611dbe5750826001600160a01b0316846001600160a01b03161480611d9a5750611d9a848461180f565b80611dbe57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b60008383028160001985870982811083820303915050808411611de857600080fd5b80600003611dfb57508290049050611808565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611e776000836000611883565b90506001600160a01b0381166105eb57604051637e27328960e01b81526004810183905260240161081c565b6001600160a01b038216611ed557604051630b61174360e31b81526001600160a01b038316600482015260240161081c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561206657604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611f84908890889087908790600401612c91565b6020604051808303816000875af1925050508015611fbf575060408051601f3d908101601f19168201909252611fbc91810190612cc4565b60015b612028573d808015611fed576040519150601f19603f3d011682016040523d82523d6000602084013e611ff2565b606091505b50805160000361202057604051633250574960e11b81526001600160a01b038516600482015260240161081c565b805160208201fd5b6001600160e01b03198116630a85bd0160e11b1461206457604051633250574960e11b81526001600160a01b038516600482015260240161081c565b505b5050505050565b6060600061207a8361231b565b600101905060008167ffffffffffffffff81111561209a5761209a61281f565b6040519080825280601f01601f1916602001820160405280156120c4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120ce57509392505050565b808061211457506001600160a01b03821615155b156121d65760006121248461183d565b90506001600160a01b038316158015906121505750826001600160a01b0316816001600160a01b031614155b80156121635750612161818461180f565b155b1561218c5760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161081c565b81156121d45783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b612211838383611d60565b611056576001600160a01b03831661223f57604051637e27328960e01b81526004810182905260240161081c565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161081c565b816000528060020b60045260246000fd5b6000826001600160a01b0316846001600160a01b0316111561229b579192915b60006122be856001600160a01b0316856001600160a01b0316600160601b611dc6565b9050611cf26122e084836122d28989612ce1565b6001600160a01b0316611dc6565b6123f3565b6000826001600160a01b0316846001600160a01b03161115612305579192915b611dbe6122e083600160601b6122d28888612ce1565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061235a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612386576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123a457662386f26fc10000830492506010015b6305f5e10083106123bc576305f5e100830492506008015b61271083106123d057612710830492506004015b606483106123e2576064830492506002015b600a831061051f5760010192915050565b806001600160801b038116811461240957600080fd5b919050565b6001600160e01b03198116811461242457600080fd5b50565b60006020828403121561243957600080fd5b81356118088161240e565b60005b8381101561245f578181015183820152602001612447565b50506000910152565b60008151808452612480816020860160208601612444565b601f01601f19169290920160200192915050565b6020815260006118086020830184612468565b6000602082840312156124b957600080fd5b5035919050565b6001600160a01b038116811461242457600080fd5b600080604083850312156124e857600080fd5b82356124f3816124c0565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561260757815180518552868101516001600160a01b0390811688870152868201518116878701526060808301519091169086015260808082015163ffffffff169086015260a08082015162ffffff169086015260c0808201516001600160801b03169086015260e080820151600281900b828801525050610100808201516125ae8288018260020b9052565b5050610120818101516001600160801b038116878301525050610140818101516001600160801b038116878301525050610160818101519086015261018090810151908501526101a0909301929085019060010161251e565b5091979650505050505050565b60008060006060848603121561262957600080fd5b8335612634816124c0565b92506020840135612644816124c0565b929592945050506040919091013590565b600060e0828403121561266757600080fd5b50919050565b60006020828403121561267f57600080fd5b8135611808816124c0565b6000806040838503121561269d57600080fd5b8235915060208301356126af816124c0565b809150509250929050565b8d81526001600160a01b038d811660208301528c811660408301528b16606082015263ffffffff8a16608082015262ffffff891660a08201526001600160801b03881660c08201526101a0810161271660e083018960020b9052565b61272661010083018860020b9052565b6001600160801b0386166101208301526001600160801b03851661014083015261016082019390935261018001529b9a5050505050505050505050565b6000806000806060858703121561277957600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561279f57600080fd5b818701915087601f8301126127b357600080fd5b8135818111156127c257600080fd5b8860208285010111156127d457600080fd5b95989497505060200194505050565b801515811461242457600080fd5b6000806040838503121561280457600080fd5b823561280f816124c0565b915060208301356126af816127e3565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561284b57600080fd5b8435612856816124c0565b93506020850135612866816124c0565b925060408501359150606085013567ffffffffffffffff8082111561288a57600080fd5b818701915087601f83011261289e57600080fd5b8135818111156128b0576128b061281f565b604051601f8201601f19908116603f011681019083821181831017156128d8576128d861281f565b816040528281528a60208487010111156128f157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561292857600080fd5b8235612933816124c0565b915060208301356126af816124c0565b600181811c9082168061295757607f821691505b60208210810361266757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561051f5761051f612977565b63ffffffff8181168382160190808211156129bd576129bd612977565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff8083168181036129f3576129f3612977565b6001019392505050565b803563ffffffff8116811461240957600080fd5b600060208284031215612a2357600080fd5b611808826129fd565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b600060208284031215612a6757600080fd5b8151611808816124c0565b600060208284031215612a8457600080fd5b81518060020b811461180857600080fd5b6001600160a01b03841681526001600160801b0383166020820152606060408201819052600090611cf290830184612468565b60008060408385031215612adb57600080fd5b505080516020909101519092909150565b600060018201612afe57612afe612977565b5060010190565b80516001600160801b038116811461240957600080fd5b600080600080600060a08688031215612b3457600080fd5b612b3d86612b05565b94506020860151935060408601519250612b5960608701612b05565b9150612b6760808701612b05565b90509295509295909350565b600060208284031215612b8557600080fd5b815162ffffff8116811461180857600080fd5b6001600160801b038181168382160190808211156129bd576129bd612977565b60008060408385031215612bcb57600080fd5b612bd483612b05565b9150612be260208401612b05565b90509250929050565b60008060008060808587031215612c0157600080fd5b8435612c0c816124c0565b93506020850135612c1c816124c0565b9250612c2a604086016129fd565b91506060850135612c3a816124c0565b939692955090935050565b600060208284031215612c5757600080fd5b8151611808816127e3565b60008351612c74818460208801612444565b835190830190612c88818360208801612444565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611cef90830184612468565b600060208284031215612cd657600080fd5b81516118088161240e565b6001600160a01b038281168282160390808211156129bd576129bd61297756fea2646970667358221220b5eac0bd7cc28c221f5137ec5579c149f2b0d5171170f604039921740181229d64736f6c63430008140033",
      "deployedBytecode": "0x60806040526004361061012a5760003560e01c80636352211e116100ab5780639f382e9b1161006f5780639f382e9b14610413578063a22cb46514610433578063b88d4fde14610453578063c87b56dd14610473578063dc4c90d314610493578063e985e9c5146104b357600080fd5b80636352211e146102c557806370a08231146102e55780638d3c100a1461031357806395d89b411461033357806399fbab881461034857600080fd5b806323b872dd116100f257806323b872dd146102025780632c6cc6c71461022257806342842e0e1461025d57806342966c681461027d5780635e01eb5a146102b257600080fd5b806301ffc9a71461012f57806306fdde0314610164578063081812fc14610186578063095ea7b3146101be57806318f56a0a146101e0575b600080fd5b34801561013b57600080fd5b5061014f61014a366004612427565b6104d3565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b50610179610525565b60405161015b9190612494565b34801561019257600080fd5b506101a66101a13660046124a7565b6105b7565b6040516001600160a01b03909116815260200161015b565b3480156101ca57600080fd5b506101de6101d93660046124d5565b6105e0565b005b3480156101ec57600080fd5b506101f56105ef565b60405161015b9190612501565b34801561020e57600080fd5b506101de61021d366004612614565b6107f6565b610235610230366004612655565b610886565b604080519485526001600160801b03909316602085015291830152606082015260800161015b565b34801561026957600080fd5b506101de610278366004612614565b61103b565b34801561028957600080fd5b5061029d6102983660046124a7565b61105b565b6040805192835260208301919091520161015b565b3480156102be57600080fd5b50336101a6565b3480156102d157600080fd5b506101a66102e03660046124a7565b611361565b3480156102f157600080fd5b5061030561030036600461266d565b61136c565b60405190815260200161015b565b34801561031f57600080fd5b5061029d61032e36600461268a565b6113b4565b34801561033f57600080fd5b5061017961156d565b34801561035457600080fd5b506103fa6103633660046124a7565b600860205260009081526040902080546001820154600280840154600385015460048601546005870154600688015460079098015496976001600160a01b039687169794871696841695600160a01b850463ffffffff1695600160c01b90950462ffffff16946001600160801b0380861695600160801b808204850b96600160981b90920490940b9482821694909104909116918d565b60405161015b9d9c9b9a999897969594939291906126ba565b34801561041f57600080fd5b506101de61042e366004612763565b61157c565b34801561043f57600080fd5b506101de61044e3660046127f1565b611777565b34801561045f57600080fd5b506101de61046e366004612835565b611782565b34801561047f57600080fd5b5061017961048e3660046124a7565b61179a565b34801561049f57600080fd5b506006546101a6906001600160a01b031681565b3480156104bf57600080fd5b5061014f6104ce366004612915565b61180f565b60006001600160e01b031982166380ac58cd60e01b148061050457506001600160e01b03198216635b5e139f60e01b145b8061051f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053490612943565b80601f016020809104026020016040519081016040528092919081815260200182805461056090612943565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b60006105c28261183d565b506000828152600460205260409020546001600160a01b031661051f565b6105eb828233611876565b5050565b60606001600754610600919061298d565b67ffffffffffffffff8111156106185761061861281f565b6040519080825280602002602001820160405280156106af57816020015b604080516101a08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282526000199092019101816106365790505b50905060005b60016007546106c4919061298d565b8163ffffffff1610156107f257600860006106e08360016129a0565b63ffffffff9081168252602080830193909352604091820160002082516101a0810184528154815260018201546001600160a01b039081169582019590955260028083015486169482019490945260038201549485166060820152600160a01b850483166080820152600160c01b90940462ffffff1660a085015260048101546001600160801b0380821660c0870152600160801b808304860b60e0880152600160981b90920490940b61010086015260058201548085166101208701520490921661014084015260068201546101608401526007909101546101808301528351849184169081106107d4576107d46129c4565b602002602001018190525080806107ea906129da565b9150506106b5565b5090565b6001600160a01b03821661082557604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610832838333611883565b9050836001600160a01b0316816001600160a01b031614610880576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161081c565b50505050565b600080808060c0850135428110156108d65760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015260640161081c565b6006546000906001600160a01b03166371c54fc96108f760208a018a61266d565b61090760408b0160208c0161266d565b61091760608c0160408d01612a11565b6040518463ffffffff1660e01b815260040161093593929190612a2c565b602060405180830381865afa158015610952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109769190612a55565b905060008190506000816001600160a01b0316638db791d26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612a55565b90506000610a4f836001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190612a72565b61197c565b90506000610a94846001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b9050610aab8383838e606001358f60800135611c37565b98506000610abc60208d018d61266d565b610acc60408e0160208f0161266d565b8d6040016020810190610adf9190612a11565b604080516001600160a01b039485166020820152939092169183019190915263ffffffff16606082015233608082015260a00160408051601f19818403018152908290526392f026ad60e01b825291506001600160a01b038616906392f026ad90610b529030908e908690600401612a95565b60408051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190612ac8565b9099509750610bc8610bac60c08e0160a08f0161266d565b60078054906000610bbc83612aec565b919050559c508c611cfb565b6040516316c1973960e01b815230600482015260009081906001600160a01b038816906316c197399060240160a060405180830381865afa158015610c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c359190612b1c565b50509250925050604051806101a001604052808e81526020018f60a0016020810190610c61919061266d565b6001600160a01b031681526020018f6000016020810190610c82919061266d565b6001600160a01b031681526020018f6020016020810190610ca3919061266d565b6001600160a01b031681526020018f6040016020810190610cc49190612a11565b63ffffffff168152602001886001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190612b73565b62ffffff1681526020018d6001600160801b03168152602001886001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612a72565b60020b8152602001886001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612a72565b60020b815260200160006001600160801b0316815260200160006001600160801b0316815260200183815260200182815250600860008f81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160030160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160186101000a81548162ffffff021916908362ffffff16021790555060c08201518160040160006101000a8154816001600160801b0302191690836001600160801b0316021790555060e08201518160040160106101000a81548162ffffff021916908360020b62ffffff1602179055506101008201518160040160136101000a81548162ffffff021916908360020b62ffffff1602179055506101208201518160050160006101000a8154816001600160801b0302191690836001600160801b031602179055506101408201518160050160106101000a8154816001600160801b0302191690836001600160801b03160217905550610160820151816006015561018082015181600701559050505050505050505050509193509193565b61105683838360405180602001604052806000815250611782565b505050565b60008082600061106a82611361565b9050611077813384611d60565b6110b25760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000858152600860205260408082206004808201546006546002840154600385015495516371c54fc960e01b815294966001600160801b039093169592946001600160a01b03928316946371c54fc9946111229493841693811692600160a01b90910463ffffffff169101612a2c565b602060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612a55565b6040516390bc169360e01b81526001600160801b038416600482015290915081906001600160a01b038216906390bc16939060240160408051808303816000875af11580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190612ac8565b6040516316c1973960e01b8152306004820152919950975060009081906001600160a01b038416906316c197399060240160a060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612b1c565b5050925092505061127e866006015483611266919061298d565b60048801546001600160801b0316600160801b611dc6565b611288908b612b98565b6005870180546000906112a59084906001600160801b0316612b98565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506112dc866007015482611266919061298d565b6112e6908a612b98565b60058701805460109061130a908490600160801b90046001600160801b0316612b98565b82546001600160801b039182166101009390930a9283029190920219909116179055506006860191909155600785015550505060040180546fffffffffffffffffffffffffffffffff191690555091939092509050565b600061051f8261183d565b60006001600160a01b038216611398576040516322718ad960e21b81526000600482015260240161081c565b506001600160a01b031660009081526003602052604090205490565b6000808360006113c382611361565b90506113d0813384611d60565b61140b5760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000868152600860205260408082206006546002820154600383015493516371c54fc960e01b81529294936001600160a01b03928316936371c54fc99361146a9381169290811691600160a01b90910463ffffffff1690600401612a2c565b602060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab9190612a55565b60058301546040516360d49d5360e01b81526001600160a01b038a811660048301526001600160801b038084166024840152600160801b90930490921660448201529192508291908216906360d49d539060640160408051808303816000875af115801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190612bb8565b600060058601556001600160801b03918216985016955061156189611e68565b50505050509250929050565b60606001805461053490612943565b600080808061158d85870187612beb565b6006546040516371c54fc960e01b815294985092965090945092506000916001600160a01b03909116906371c54fc9906115cf90889088908890600401612a2c565b602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190612a55565b90506001600160a01b038116331461166a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063616c6c6261636b2063616c6c6572000000000000000000604482015260640161081c565b88156116eb576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018b90528616906323b872dd906064016020604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190612c45565b505b871561176c576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018a90528516906323b872dd906064016020604051808303816000875af1158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612c45565b505b505050505050505050565b6105eb338383611ea3565b61178d8484846107f6565b6108803385858585611f42565b60606117a58261183d565b5060006117bd60408051602081019091526000815290565b905060008151116117dd5760405180602001604052806000815250611808565b806117e78461206d565b6040516020016117f8929190612c62565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260408120546001600160a01b03168061051f57604051637e27328960e01b81526004810184905260240161081c565b6110568383836001612100565b6000828152600260205260408120546001600160a01b03908116908316156118b0576118b0818486612206565b6001600160a01b038116156118ee576118cd600085600080612100565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561191d576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b60020b600060ff82901d80830118620d89e88111156119a6576119a66345c3193d60e11b8461226a565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b1860028216156119e2576ffff97272373d413259a46990580e213a0260801c5b6004821615611a01576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611a20576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611a3f576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611a5e576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a7d576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611a9c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611abc576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611adc576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611afc576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611b1c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611b3c576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611b5c576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b7c576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611b9c576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611bbd576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611bdd576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611bfc576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611c19576b048a170391f7dc42444e8fa20260801c5b6000841315611c2757600019045b63ffffffff0160201c9392505050565b6000836001600160a01b0316856001600160a01b03161115611c57579293925b846001600160a01b0316866001600160a01b031611611c8257611c7b85858561227b565b9050611cf2565b836001600160a01b0316866001600160a01b03161015611ce4576000611ca987868661227b565b90506000611cb88789866122e5565b9050806001600160801b0316826001600160801b031610611cd95780611cdb565b815b92505050611cf2565b611cef8585846122e5565b90505b95945050505050565b6001600160a01b038216611d2557604051633250574960e11b81526000600482015260240161081c565b6000611d3383836000611883565b90506001600160a01b03811615611056576040516339e3563760e11b81526000600482015260240161081c565b60006001600160a01b03831615801590611dbe5750826001600160a01b0316846001600160a01b03161480611d9a5750611d9a848461180f565b80611dbe57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b60008383028160001985870982811083820303915050808411611de857600080fd5b80600003611dfb57508290049050611808565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611e776000836000611883565b90506001600160a01b0381166105eb57604051637e27328960e01b81526004810183905260240161081c565b6001600160a01b038216611ed557604051630b61174360e31b81526001600160a01b038316600482015260240161081c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561206657604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611f84908890889087908790600401612c91565b6020604051808303816000875af1925050508015611fbf575060408051601f3d908101601f19168201909252611fbc91810190612cc4565b60015b612028573d808015611fed576040519150601f19603f3d011682016040523d82523d6000602084013e611ff2565b606091505b50805160000361202057604051633250574960e11b81526001600160a01b038516600482015260240161081c565b805160208201fd5b6001600160e01b03198116630a85bd0160e11b1461206457604051633250574960e11b81526001600160a01b038516600482015260240161081c565b505b5050505050565b6060600061207a8361231b565b600101905060008167ffffffffffffffff81111561209a5761209a61281f565b6040519080825280601f01601f1916602001820160405280156120c4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120ce57509392505050565b808061211457506001600160a01b03821615155b156121d65760006121248461183d565b90506001600160a01b038316158015906121505750826001600160a01b0316816001600160a01b031614155b80156121635750612161818461180f565b155b1561218c5760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161081c565b81156121d45783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b612211838383611d60565b611056576001600160a01b03831661223f57604051637e27328960e01b81526004810182905260240161081c565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161081c565b816000528060020b60045260246000fd5b6000826001600160a01b0316846001600160a01b0316111561229b579192915b60006122be856001600160a01b0316856001600160a01b0316600160601b611dc6565b9050611cf26122e084836122d28989612ce1565b6001600160a01b0316611dc6565b6123f3565b6000826001600160a01b0316846001600160a01b03161115612305579192915b611dbe6122e083600160601b6122d28888612ce1565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061235a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612386576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123a457662386f26fc10000830492506010015b6305f5e10083106123bc576305f5e100830492506008015b61271083106123d057612710830492506004015b606483106123e2576064830492506002015b600a831061051f5760010192915050565b806001600160801b038116811461240957600080fd5b919050565b6001600160e01b03198116811461242457600080fd5b50565b60006020828403121561243957600080fd5b81356118088161240e565b60005b8381101561245f578181015183820152602001612447565b50506000910152565b60008151808452612480816020860160208601612444565b601f01601f19169290920160200192915050565b6020815260006118086020830184612468565b6000602082840312156124b957600080fd5b5035919050565b6001600160a01b038116811461242457600080fd5b600080604083850312156124e857600080fd5b82356124f3816124c0565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561260757815180518552868101516001600160a01b0390811688870152868201518116878701526060808301519091169086015260808082015163ffffffff169086015260a08082015162ffffff169086015260c0808201516001600160801b03169086015260e080820151600281900b828801525050610100808201516125ae8288018260020b9052565b5050610120818101516001600160801b038116878301525050610140818101516001600160801b038116878301525050610160818101519086015261018090810151908501526101a0909301929085019060010161251e565b5091979650505050505050565b60008060006060848603121561262957600080fd5b8335612634816124c0565b92506020840135612644816124c0565b929592945050506040919091013590565b600060e0828403121561266757600080fd5b50919050565b60006020828403121561267f57600080fd5b8135611808816124c0565b6000806040838503121561269d57600080fd5b8235915060208301356126af816124c0565b809150509250929050565b8d81526001600160a01b038d811660208301528c811660408301528b16606082015263ffffffff8a16608082015262ffffff891660a08201526001600160801b03881660c08201526101a0810161271660e083018960020b9052565b61272661010083018860020b9052565b6001600160801b0386166101208301526001600160801b03851661014083015261016082019390935261018001529b9a5050505050505050505050565b6000806000806060858703121561277957600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561279f57600080fd5b818701915087601f8301126127b357600080fd5b8135818111156127c257600080fd5b8860208285010111156127d457600080fd5b95989497505060200194505050565b801515811461242457600080fd5b6000806040838503121561280457600080fd5b823561280f816124c0565b915060208301356126af816127e3565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561284b57600080fd5b8435612856816124c0565b93506020850135612866816124c0565b925060408501359150606085013567ffffffffffffffff8082111561288a57600080fd5b818701915087601f83011261289e57600080fd5b8135818111156128b0576128b061281f565b604051601f8201601f19908116603f011681019083821181831017156128d8576128d861281f565b816040528281528a60208487010111156128f157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561292857600080fd5b8235612933816124c0565b915060208301356126af816124c0565b600181811c9082168061295757607f821691505b60208210810361266757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561051f5761051f612977565b63ffffffff8181168382160190808211156129bd576129bd612977565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff8083168181036129f3576129f3612977565b6001019392505050565b803563ffffffff8116811461240957600080fd5b600060208284031215612a2357600080fd5b611808826129fd565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b600060208284031215612a6757600080fd5b8151611808816124c0565b600060208284031215612a8457600080fd5b81518060020b811461180857600080fd5b6001600160a01b03841681526001600160801b0383166020820152606060408201819052600090611cf290830184612468565b60008060408385031215612adb57600080fd5b505080516020909101519092909150565b600060018201612afe57612afe612977565b5060010190565b80516001600160801b038116811461240957600080fd5b600080600080600060a08688031215612b3457600080fd5b612b3d86612b05565b94506020860151935060408601519250612b5960608701612b05565b9150612b6760808701612b05565b90509295509295909350565b600060208284031215612b8557600080fd5b815162ffffff8116811461180857600080fd5b6001600160801b038181168382160190808211156129bd576129bd612977565b60008060408385031215612bcb57600080fd5b612bd483612b05565b9150612be260208401612b05565b90509250929050565b60008060008060808587031215612c0157600080fd5b8435612c0c816124c0565b93506020850135612c1c816124c0565b9250612c2a604086016129fd565b91506060850135612c3a816124c0565b939692955090935050565b600060208284031215612c5757600080fd5b8151611808816127e3565b60008351612c74818460208801612444565b835190830190612c88818360208801612444565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611cef90830184612468565b600060208284031215612cd657600080fd5b81516118088161240e565b6001600160a01b038281168282160390808211156129bd576129bd61297756fea2646970667358221220b5eac0bd7cc28c221f5137ec5579c149f2b0d5171170f604039921740181229d64736f6c63430008140033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "ERC721IncorrectOwner(address,uint256,address)": [
            {
              "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
              "params": {
                "owner": "Address of the current owner of a token.",
                "sender": "Address whose tokens are being transferred.",
                "tokenId": "Identifier number of a token."
              }
            }
          ],
          "ERC721InsufficientApproval(address,uint256)": [
            {
              "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
              "params": {
                "operator": "Address that may be allowed to operate on tokens without being their owner.",
                "tokenId": "Identifier number of a token."
              }
            }
          ],
          "ERC721InvalidApprover(address)": [
            {
              "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
              "params": {
                "approver": "Address initiating an approval operation."
              }
            }
          ],
          "ERC721InvalidOperator(address)": [
            {
              "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
              "params": {
                "operator": "Address that may be allowed to operate on tokens without being their owner."
              }
            }
          ],
          "ERC721InvalidOwner(address)": [
            {
              "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
              "params": {
                "owner": "Address of the current owner of a token."
              }
            }
          ],
          "ERC721InvalidReceiver(address)": [
            {
              "details": "Indicates a failure with the token `receiver`. Used in transfers.",
              "params": {
                "receiver": "Address to which tokens are being transferred."
              }
            }
          ],
          "ERC721InvalidSender(address)": [
            {
              "details": "Indicates a failure with the token `sender`. Used in transfers.",
              "params": {
                "sender": "Address whose tokens are being transferred."
              }
            }
          ],
          "ERC721NonexistentToken(uint256)": [
            {
              "details": "Indicates a `tokenId` whose `owner` is the zero address.",
              "params": {
                "tokenId": "Identifier number of a token."
              }
            }
          ]
        },
        "events": {
          "Approval(address,address,uint256)": {
            "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
          },
          "ApprovalForAll(address,address,bool)": {
            "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
          },
          "Transfer(address,address,uint256)": {
            "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
          }
        },
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "Returns the number of tokens in ``owner``'s account."
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "name()": {
            "details": "Returns the token collection name."
          },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "symbol()": {
            "details": "Returns the token collection symbol."
          },
          "tokenURI(uint256)": {
            "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          }
        },
        "stateVariables": {
          "_nextId": {
            "details": "The ID of the next token that will be minted. Skips 0"
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_8867": {
              "entryPoint": null,
              "id": 8867,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_973": {
              "entryPoint": null,
              "id": 973,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 200,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 332,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 415,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 272,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 250,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:3027:46",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:46",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "95:209:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "141:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "150:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "153:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "143:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "143:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "143:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "116:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "125:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "112:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "112:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "137:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "108:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "108:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "105:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "166:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "185:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "179:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "179:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "170:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "258:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "267:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "270:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "260:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "260:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "260:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "217:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "228:5:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "243:3:46",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "248:1:46",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "239:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "239:11:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "252:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "235:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "235:19:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "224:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "224:31:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "214:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "214:42:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "207:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "207:50:46"
                          },
                          "nodeType": "YulIf",
                          "src": "204:70:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "283:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "293:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "283:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "61:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "72:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "84:6:46",
                        "type": ""
                      }
                    ],
                    "src": "14:290:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "341:95:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "358:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "365:3:46",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "370:10:46",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "361:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "361:20:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "351:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "351:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "351:31:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "398:1:46",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "401:4:46",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "391:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "391:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "391:15:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "422:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "425:4:46",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "415:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "415:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "415:15:46"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "309:127:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "496:325:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "506:22:46",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "520:1:46",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "523:4:46"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "516:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "516:12:46"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "506:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "537:38:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "567:4:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "573:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "563:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "563:12:46"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "541:18:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "614:31:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "616:27:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "630:6:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "638:4:46",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "626:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "626:17:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "616:6:46"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "594:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "587:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "587:26:46"
                          },
                          "nodeType": "YulIf",
                          "src": "584:61:46"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "704:111:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "725:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "732:3:46",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "737:10:46",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "728:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "728:20:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "718:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "718:31:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "718:31:46"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "769:1:46",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "772:4:46",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "762:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "762:15:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "762:15:46"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "797:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "800:4:46",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "790:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "790:15:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "790:15:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "660:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "683:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "691:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "680:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "680:14:46"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "657:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "657:38:46"
                          },
                          "nodeType": "YulIf",
                          "src": "654:161:46"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "476:4:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "485:6:46",
                        "type": ""
                      }
                    ],
                    "src": "441:380:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "882:65:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "899:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "902:3:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "892:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "892:14:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "892:14:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "915:26:46",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "933:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "936:4:46",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "923:9:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "923:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "915:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "865:3:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "873:4:46",
                        "type": ""
                      }
                    ],
                    "src": "826:121:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1033:464:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1066:425:46",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1080:11:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1090:1:46",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "1084:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1111:2:46"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "1115:5:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1104:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1104:17:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1104:17:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1134:31:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1156:2:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1160:4:46",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nodeType": "YulIdentifier",
                                    "src": "1146:9:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1146:19:46"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulTypedName",
                                    "src": "1138:4:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1178:57:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "1201:4:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1211:1:46",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nodeType": "YulIdentifier",
                                              "src": "1218:10:46"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1230:2:46",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1214:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1214:19:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1207:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1207:27:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1197:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1197:38:46"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nodeType": "YulTypedName",
                                    "src": "1182:11:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1272:23:46",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "1274:19:46",
                                      "value": {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "1289:4:46"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "1274:11:46"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nodeType": "YulIdentifier",
                                      "src": "1254:10:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1266:4:46",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "1251:2:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1251:20:46"
                                },
                                "nodeType": "YulIf",
                                "src": "1248:47:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1308:41:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "1322:4:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1332:1:46",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nodeType": "YulIdentifier",
                                              "src": "1339:3:46"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1344:2:46",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1335:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1335:12:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "1328:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1328:20:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1318:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1318:31:46"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "1312:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1362:24:46",
                                "value": {
                                  "name": "deleteStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "1375:11:46"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nodeType": "YulTypedName",
                                    "src": "1366:5:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "1460:21:46",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "1469:5:46"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1476:2:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "1462:6:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1462:17:46"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "1462:17:46"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "1410:5:46"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1417:2:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "1407:2:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1407:13:46"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "1421:26:46",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "1423:22:46",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "1436:5:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1443:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1432:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1432:13:46"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nodeType": "YulIdentifier",
                                          "src": "1423:5:46"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "1403:3:46",
                                  "statements": []
                                },
                                "src": "1399:82:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "1049:3:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1054:2:46",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1046:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1046:11:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1043:448:46"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1005:5:46",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "1012:3:46",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nodeType": "YulTypedName",
                        "src": "1017:10:46",
                        "type": ""
                      }
                    ],
                    "src": "952:545:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1587:81:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1597:65:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "1612:4:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1630:1:46",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nodeType": "YulIdentifier",
                                                "src": "1633:3:46"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1626:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1626:11:46"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1643:1:46",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "1639:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1639:6:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "1622:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1622:24:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "1618:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1618:29:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1608:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1608:40:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1654:1:46",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nodeType": "YulIdentifier",
                                    "src": "1657:3:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1650:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1650:11:46"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1605:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1605:57:46"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nodeType": "YulIdentifier",
                              "src": "1597:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "1564:4:46",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "1570:3:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nodeType": "YulTypedName",
                        "src": "1578:4:46",
                        "type": ""
                      }
                    ],
                    "src": "1502:166:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1769:1256:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1779:24:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "1799:3:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1793:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1793:10:46"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "1783:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1846:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1848:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1848:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1848:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "1818:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1834:2:46",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1838:1:46",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1830:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1830:10:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1842:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1826:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1826:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1815:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1815:30:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1812:56:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "1921:4:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "1959:4:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "1953:5:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1953:11:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "1927:25:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1927:38:46"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "1967:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "1877:43:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1877:97:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1877:97:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1983:18:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2000:1:46",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "1987:9:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2010:23:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2029:4:46",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "2014:11:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2042:24:46",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "2055:11:46"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "2042:9:46"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2112:656:46",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2126:35:46",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "2145:6:46"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2157:2:46",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "2153:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2153:7:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "2141:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2141:20:46"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "2130:7:46",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2174:49:46",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "2218:4:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "2188:29:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2188:35:46"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "2178:6:46",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2236:10:46",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2245:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "2240:1:46",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2323:172:46",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2348:6:46"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2366:3:46"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2371:9:46"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2362:3:46"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2362:19:46"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2356:5:46"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2356:26:46"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2341:6:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2341:42:46"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2341:42:46"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2400:24:46",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2414:6:46"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2422:1:46",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2410:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2410:14:46"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "2400:6:46"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2441:40:46",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "2458:9:46"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2469:11:46"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2454:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2454:27:46"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "2441:9:46"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "2270:1:46"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "2273:7:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "2267:2:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2267:14:46"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "2282:28:46",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2284:24:46",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "2293:1:46"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2296:11:46"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2289:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2289:19:46"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "2284:1:46"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "2263:3:46",
                                      "statements": []
                                    },
                                    "src": "2259:236:46"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2543:166:46",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "2561:43:46",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2588:3:46"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2593:9:46"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2584:3:46"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2584:19:46"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2578:5:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2578:26:46"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "2565:9:46",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "2628:6:46"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2640:9:46"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "2667:1:46",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "2670:6:46"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "2663:3:46"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "2663:14:46"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "2679:3:46",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "2659:3:46"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "2659:24:46"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "2689:1:46",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "2685:3:46"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "2685:6:46"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2655:3:46"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "2655:37:46"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2651:3:46"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "2651:42:46"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2636:3:46"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2636:58:46"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "2621:6:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2621:74:46"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "2621:74:46"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "2514:7:46"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "2523:6:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "2511:2:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2511:19:46"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "2508:201:46"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "2729:4:46"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2743:1:46",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2746:6:46"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "2739:3:46"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2739:14:46"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2755:1:46",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2735:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2735:22:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2722:6:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2722:36:46"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2722:36:46"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "2105:663:46",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2110:1:46",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2785:234:46",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "2799:14:46",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2812:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "2803:5:46",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "2848:67:46",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "2866:35:46",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2885:3:46"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2890:9:46"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2881:3:46"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "2881:19:46"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "2875:5:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2875:26:46"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "2866:5:46"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "2829:6:46"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "2826:89:46"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "2935:4:46"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "2994:5:46"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "3001:6:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "2941:52:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2941:67:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2928:6:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2928:81:46"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2928:81:46"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "2777:242:46",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "2085:6:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2093:2:46",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2082:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2082:14:46"
                          },
                          "nodeType": "YulSwitch",
                          "src": "2075:944:46"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "1754:4:46",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "1760:3:46",
                        "type": ""
                      }
                    ],
                    "src": "1673:1352:46"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}",
              "id": 46,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "608060405260016007553480156200001657600080fd5b5060405162002fb238038062002fb28339810160408190526200003991620000c8565b6040518060400160405280601081526020016f26b2ba30a9bbb0b82837b9b4ba34b7b760811b8152506040518060400160405280600381526020016204d53560ec1b81525081600090816200008f91906200019f565b5060016200009e82826200019f565b5050600680546001600160a01b0319166001600160a01b039390931692909217909155506200026b565b600060208284031215620000db57600080fd5b81516001600160a01b0381168114620000f357600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012557607f821691505b6020821081036200014657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019a57600081815260208120601f850160051c81016020861015620001755750805b601f850160051c820191505b81811015620001965782815560010162000181565b5050505b505050565b81516001600160401b03811115620001bb57620001bb620000fa565b620001d381620001cc845462000110565b846200014c565b602080601f8311600181146200020b5760008415620001f25750858301515b600019600386901b1c1916600185901b17855562000196565b600085815260208120601f198616915b828110156200023c578886015182559484019460019091019084016200021b565b50858210156200025b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612d37806200027b6000396000f3fe60806040526004361061012a5760003560e01c80636352211e116100ab5780639f382e9b1161006f5780639f382e9b14610413578063a22cb46514610433578063b88d4fde14610453578063c87b56dd14610473578063dc4c90d314610493578063e985e9c5146104b357600080fd5b80636352211e146102c557806370a08231146102e55780638d3c100a1461031357806395d89b411461033357806399fbab881461034857600080fd5b806323b872dd116100f257806323b872dd146102025780632c6cc6c71461022257806342842e0e1461025d57806342966c681461027d5780635e01eb5a146102b257600080fd5b806301ffc9a71461012f57806306fdde0314610164578063081812fc14610186578063095ea7b3146101be57806318f56a0a146101e0575b600080fd5b34801561013b57600080fd5b5061014f61014a366004612427565b6104d3565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b50610179610525565b60405161015b9190612494565b34801561019257600080fd5b506101a66101a13660046124a7565b6105b7565b6040516001600160a01b03909116815260200161015b565b3480156101ca57600080fd5b506101de6101d93660046124d5565b6105e0565b005b3480156101ec57600080fd5b506101f56105ef565b60405161015b9190612501565b34801561020e57600080fd5b506101de61021d366004612614565b6107f6565b610235610230366004612655565b610886565b604080519485526001600160801b03909316602085015291830152606082015260800161015b565b34801561026957600080fd5b506101de610278366004612614565b61103b565b34801561028957600080fd5b5061029d6102983660046124a7565b61105b565b6040805192835260208301919091520161015b565b3480156102be57600080fd5b50336101a6565b3480156102d157600080fd5b506101a66102e03660046124a7565b611361565b3480156102f157600080fd5b5061030561030036600461266d565b61136c565b60405190815260200161015b565b34801561031f57600080fd5b5061029d61032e36600461268a565b6113b4565b34801561033f57600080fd5b5061017961156d565b34801561035457600080fd5b506103fa6103633660046124a7565b600860205260009081526040902080546001820154600280840154600385015460048601546005870154600688015460079098015496976001600160a01b039687169794871696841695600160a01b850463ffffffff1695600160c01b90950462ffffff16946001600160801b0380861695600160801b808204850b96600160981b90920490940b9482821694909104909116918d565b60405161015b9d9c9b9a999897969594939291906126ba565b34801561041f57600080fd5b506101de61042e366004612763565b61157c565b34801561043f57600080fd5b506101de61044e3660046127f1565b611777565b34801561045f57600080fd5b506101de61046e366004612835565b611782565b34801561047f57600080fd5b5061017961048e3660046124a7565b61179a565b34801561049f57600080fd5b506006546101a6906001600160a01b031681565b3480156104bf57600080fd5b5061014f6104ce366004612915565b61180f565b60006001600160e01b031982166380ac58cd60e01b148061050457506001600160e01b03198216635b5e139f60e01b145b8061051f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053490612943565b80601f016020809104026020016040519081016040528092919081815260200182805461056090612943565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b60006105c28261183d565b506000828152600460205260409020546001600160a01b031661051f565b6105eb828233611876565b5050565b60606001600754610600919061298d565b67ffffffffffffffff8111156106185761061861281f565b6040519080825280602002602001820160405280156106af57816020015b604080516101a08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282526000199092019101816106365790505b50905060005b60016007546106c4919061298d565b8163ffffffff1610156107f257600860006106e08360016129a0565b63ffffffff9081168252602080830193909352604091820160002082516101a0810184528154815260018201546001600160a01b039081169582019590955260028083015486169482019490945260038201549485166060820152600160a01b850483166080820152600160c01b90940462ffffff1660a085015260048101546001600160801b0380821660c0870152600160801b808304860b60e0880152600160981b90920490940b61010086015260058201548085166101208701520490921661014084015260068201546101608401526007909101546101808301528351849184169081106107d4576107d46129c4565b602002602001018190525080806107ea906129da565b9150506106b5565b5090565b6001600160a01b03821661082557604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610832838333611883565b9050836001600160a01b0316816001600160a01b031614610880576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161081c565b50505050565b600080808060c0850135428110156108d65760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015260640161081c565b6006546000906001600160a01b03166371c54fc96108f760208a018a61266d565b61090760408b0160208c0161266d565b61091760608c0160408d01612a11565b6040518463ffffffff1660e01b815260040161093593929190612a2c565b602060405180830381865afa158015610952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109769190612a55565b905060008190506000816001600160a01b0316638db791d26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612a55565b90506000610a4f836001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190612a72565b61197c565b90506000610a94846001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b9050610aab8383838e606001358f60800135611c37565b98506000610abc60208d018d61266d565b610acc60408e0160208f0161266d565b8d6040016020810190610adf9190612a11565b604080516001600160a01b039485166020820152939092169183019190915263ffffffff16606082015233608082015260a00160408051601f19818403018152908290526392f026ad60e01b825291506001600160a01b038616906392f026ad90610b529030908e908690600401612a95565b60408051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190612ac8565b9099509750610bc8610bac60c08e0160a08f0161266d565b60078054906000610bbc83612aec565b919050559c508c611cfb565b6040516316c1973960e01b815230600482015260009081906001600160a01b038816906316c197399060240160a060405180830381865afa158015610c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c359190612b1c565b50509250925050604051806101a001604052808e81526020018f60a0016020810190610c61919061266d565b6001600160a01b031681526020018f6000016020810190610c82919061266d565b6001600160a01b031681526020018f6020016020810190610ca3919061266d565b6001600160a01b031681526020018f6040016020810190610cc49190612a11565b63ffffffff168152602001886001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190612b73565b62ffffff1681526020018d6001600160801b03168152602001886001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612a72565b60020b8152602001886001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612a72565b60020b815260200160006001600160801b0316815260200160006001600160801b0316815260200183815260200182815250600860008f81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160030160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160186101000a81548162ffffff021916908362ffffff16021790555060c08201518160040160006101000a8154816001600160801b0302191690836001600160801b0316021790555060e08201518160040160106101000a81548162ffffff021916908360020b62ffffff1602179055506101008201518160040160136101000a81548162ffffff021916908360020b62ffffff1602179055506101208201518160050160006101000a8154816001600160801b0302191690836001600160801b031602179055506101408201518160050160106101000a8154816001600160801b0302191690836001600160801b03160217905550610160820151816006015561018082015181600701559050505050505050505050509193509193565b61105683838360405180602001604052806000815250611782565b505050565b60008082600061106a82611361565b9050611077813384611d60565b6110b25760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000858152600860205260408082206004808201546006546002840154600385015495516371c54fc960e01b815294966001600160801b039093169592946001600160a01b03928316946371c54fc9946111229493841693811692600160a01b90910463ffffffff169101612a2c565b602060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612a55565b6040516390bc169360e01b81526001600160801b038416600482015290915081906001600160a01b038216906390bc16939060240160408051808303816000875af11580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190612ac8565b6040516316c1973960e01b8152306004820152919950975060009081906001600160a01b038416906316c197399060240160a060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612b1c565b5050925092505061127e866006015483611266919061298d565b60048801546001600160801b0316600160801b611dc6565b611288908b612b98565b6005870180546000906112a59084906001600160801b0316612b98565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506112dc866007015482611266919061298d565b6112e6908a612b98565b60058701805460109061130a908490600160801b90046001600160801b0316612b98565b82546001600160801b039182166101009390930a9283029190920219909116179055506006860191909155600785015550505060040180546fffffffffffffffffffffffffffffffff191690555091939092509050565b600061051f8261183d565b60006001600160a01b038216611398576040516322718ad960e21b81526000600482015260240161081c565b506001600160a01b031660009081526003602052604090205490565b6000808360006113c382611361565b90506113d0813384611d60565b61140b5760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000868152600860205260408082206006546002820154600383015493516371c54fc960e01b81529294936001600160a01b03928316936371c54fc99361146a9381169290811691600160a01b90910463ffffffff1690600401612a2c565b602060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab9190612a55565b60058301546040516360d49d5360e01b81526001600160a01b038a811660048301526001600160801b038084166024840152600160801b90930490921660448201529192508291908216906360d49d539060640160408051808303816000875af115801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190612bb8565b600060058601556001600160801b03918216985016955061156189611e68565b50505050509250929050565b60606001805461053490612943565b600080808061158d85870187612beb565b6006546040516371c54fc960e01b815294985092965090945092506000916001600160a01b03909116906371c54fc9906115cf90889088908890600401612a2c565b602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190612a55565b90506001600160a01b038116331461166a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063616c6c6261636b2063616c6c6572000000000000000000604482015260640161081c565b88156116eb576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018b90528616906323b872dd906064016020604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190612c45565b505b871561176c576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018a90528516906323b872dd906064016020604051808303816000875af1158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612c45565b505b505050505050505050565b6105eb338383611ea3565b61178d8484846107f6565b6108803385858585611f42565b60606117a58261183d565b5060006117bd60408051602081019091526000815290565b905060008151116117dd5760405180602001604052806000815250611808565b806117e78461206d565b6040516020016117f8929190612c62565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260408120546001600160a01b03168061051f57604051637e27328960e01b81526004810184905260240161081c565b6110568383836001612100565b6000828152600260205260408120546001600160a01b03908116908316156118b0576118b0818486612206565b6001600160a01b038116156118ee576118cd600085600080612100565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561191d576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b60020b600060ff82901d80830118620d89e88111156119a6576119a66345c3193d60e11b8461226a565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b1860028216156119e2576ffff97272373d413259a46990580e213a0260801c5b6004821615611a01576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611a20576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611a3f576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611a5e576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a7d576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611a9c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611abc576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611adc576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611afc576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611b1c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611b3c576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611b5c576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b7c576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611b9c576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611bbd576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611bdd576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611bfc576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611c19576b048a170391f7dc42444e8fa20260801c5b6000841315611c2757600019045b63ffffffff0160201c9392505050565b6000836001600160a01b0316856001600160a01b03161115611c57579293925b846001600160a01b0316866001600160a01b031611611c8257611c7b85858561227b565b9050611cf2565b836001600160a01b0316866001600160a01b03161015611ce4576000611ca987868661227b565b90506000611cb88789866122e5565b9050806001600160801b0316826001600160801b031610611cd95780611cdb565b815b92505050611cf2565b611cef8585846122e5565b90505b95945050505050565b6001600160a01b038216611d2557604051633250574960e11b81526000600482015260240161081c565b6000611d3383836000611883565b90506001600160a01b03811615611056576040516339e3563760e11b81526000600482015260240161081c565b60006001600160a01b03831615801590611dbe5750826001600160a01b0316846001600160a01b03161480611d9a5750611d9a848461180f565b80611dbe57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b60008383028160001985870982811083820303915050808411611de857600080fd5b80600003611dfb57508290049050611808565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611e776000836000611883565b90506001600160a01b0381166105eb57604051637e27328960e01b81526004810183905260240161081c565b6001600160a01b038216611ed557604051630b61174360e31b81526001600160a01b038316600482015260240161081c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561206657604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611f84908890889087908790600401612c91565b6020604051808303816000875af1925050508015611fbf575060408051601f3d908101601f19168201909252611fbc91810190612cc4565b60015b612028573d808015611fed576040519150601f19603f3d011682016040523d82523d6000602084013e611ff2565b606091505b50805160000361202057604051633250574960e11b81526001600160a01b038516600482015260240161081c565b805160208201fd5b6001600160e01b03198116630a85bd0160e11b1461206457604051633250574960e11b81526001600160a01b038516600482015260240161081c565b505b5050505050565b6060600061207a8361231b565b600101905060008167ffffffffffffffff81111561209a5761209a61281f565b6040519080825280601f01601f1916602001820160405280156120c4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120ce57509392505050565b808061211457506001600160a01b03821615155b156121d65760006121248461183d565b90506001600160a01b038316158015906121505750826001600160a01b0316816001600160a01b031614155b80156121635750612161818461180f565b155b1561218c5760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161081c565b81156121d45783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b612211838383611d60565b611056576001600160a01b03831661223f57604051637e27328960e01b81526004810182905260240161081c565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161081c565b816000528060020b60045260246000fd5b6000826001600160a01b0316846001600160a01b0316111561229b579192915b60006122be856001600160a01b0316856001600160a01b0316600160601b611dc6565b9050611cf26122e084836122d28989612ce1565b6001600160a01b0316611dc6565b6123f3565b6000826001600160a01b0316846001600160a01b03161115612305579192915b611dbe6122e083600160601b6122d28888612ce1565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061235a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612386576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123a457662386f26fc10000830492506010015b6305f5e10083106123bc576305f5e100830492506008015b61271083106123d057612710830492506004015b606483106123e2576064830492506002015b600a831061051f5760010192915050565b806001600160801b038116811461240957600080fd5b919050565b6001600160e01b03198116811461242457600080fd5b50565b60006020828403121561243957600080fd5b81356118088161240e565b60005b8381101561245f578181015183820152602001612447565b50506000910152565b60008151808452612480816020860160208601612444565b601f01601f19169290920160200192915050565b6020815260006118086020830184612468565b6000602082840312156124b957600080fd5b5035919050565b6001600160a01b038116811461242457600080fd5b600080604083850312156124e857600080fd5b82356124f3816124c0565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561260757815180518552868101516001600160a01b0390811688870152868201518116878701526060808301519091169086015260808082015163ffffffff169086015260a08082015162ffffff169086015260c0808201516001600160801b03169086015260e080820151600281900b828801525050610100808201516125ae8288018260020b9052565b5050610120818101516001600160801b038116878301525050610140818101516001600160801b038116878301525050610160818101519086015261018090810151908501526101a0909301929085019060010161251e565b5091979650505050505050565b60008060006060848603121561262957600080fd5b8335612634816124c0565b92506020840135612644816124c0565b929592945050506040919091013590565b600060e0828403121561266757600080fd5b50919050565b60006020828403121561267f57600080fd5b8135611808816124c0565b6000806040838503121561269d57600080fd5b8235915060208301356126af816124c0565b809150509250929050565b8d81526001600160a01b038d811660208301528c811660408301528b16606082015263ffffffff8a16608082015262ffffff891660a08201526001600160801b03881660c08201526101a0810161271660e083018960020b9052565b61272661010083018860020b9052565b6001600160801b0386166101208301526001600160801b03851661014083015261016082019390935261018001529b9a5050505050505050505050565b6000806000806060858703121561277957600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561279f57600080fd5b818701915087601f8301126127b357600080fd5b8135818111156127c257600080fd5b8860208285010111156127d457600080fd5b95989497505060200194505050565b801515811461242457600080fd5b6000806040838503121561280457600080fd5b823561280f816124c0565b915060208301356126af816127e3565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561284b57600080fd5b8435612856816124c0565b93506020850135612866816124c0565b925060408501359150606085013567ffffffffffffffff8082111561288a57600080fd5b818701915087601f83011261289e57600080fd5b8135818111156128b0576128b061281f565b604051601f8201601f19908116603f011681019083821181831017156128d8576128d861281f565b816040528281528a60208487010111156128f157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561292857600080fd5b8235612933816124c0565b915060208301356126af816124c0565b600181811c9082168061295757607f821691505b60208210810361266757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561051f5761051f612977565b63ffffffff8181168382160190808211156129bd576129bd612977565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff8083168181036129f3576129f3612977565b6001019392505050565b803563ffffffff8116811461240957600080fd5b600060208284031215612a2357600080fd5b611808826129fd565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b600060208284031215612a6757600080fd5b8151611808816124c0565b600060208284031215612a8457600080fd5b81518060020b811461180857600080fd5b6001600160a01b03841681526001600160801b0383166020820152606060408201819052600090611cf290830184612468565b60008060408385031215612adb57600080fd5b505080516020909101519092909150565b600060018201612afe57612afe612977565b5060010190565b80516001600160801b038116811461240957600080fd5b600080600080600060a08688031215612b3457600080fd5b612b3d86612b05565b94506020860151935060408601519250612b5960608701612b05565b9150612b6760808701612b05565b90509295509295909350565b600060208284031215612b8557600080fd5b815162ffffff8116811461180857600080fd5b6001600160801b038181168382160190808211156129bd576129bd612977565b60008060408385031215612bcb57600080fd5b612bd483612b05565b9150612be260208401612b05565b90509250929050565b60008060008060808587031215612c0157600080fd5b8435612c0c816124c0565b93506020850135612c1c816124c0565b9250612c2a604086016129fd565b91506060850135612c3a816124c0565b939692955090935050565b600060208284031215612c5757600080fd5b8151611808816127e3565b60008351612c74818460208801612444565b835190830190612c88818360208801612444565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611cef90830184612468565b600060208284031215612cd657600080fd5b81516118088161240e565b6001600160a01b038281168282160390808211156129bd576129bd61297756fea2646970667358221220b5eac0bd7cc28c221f5137ec5579c149f2b0d5171170f604039921740181229d64736f6c63430008140033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH1 0x7 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2FB2 CODESIZE SUB DUP1 PUSH3 0x2FB2 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x39 SWAP2 PUSH3 0xC8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x10 DUP2 MSTORE PUSH1 0x20 ADD PUSH16 0x26B2BA30A9BBB0B82837B9B4BA34B7B7 PUSH1 0x81 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4D535 PUSH1 0xEC SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x19F JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x9E DUP3 DUP3 PUSH3 0x19F JUMP JUMPDEST POP POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP PUSH3 0x26B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x125 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x146 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x19A JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x175 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x196 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x181 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x1BB JUMPI PUSH3 0x1BB PUSH3 0xFA JUMP JUMPDEST PUSH3 0x1D3 DUP2 PUSH3 0x1CC DUP5 SLOAD PUSH3 0x110 JUMP JUMPDEST DUP5 PUSH3 0x14C JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x20B JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x1F2 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x196 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x23C JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x21B JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x25B JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x2D37 DUP1 PUSH3 0x27B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0xAB JUMPI DUP1 PUSH4 0x9F382E9B GT PUSH2 0x6F JUMPI DUP1 PUSH4 0x9F382E9B EQ PUSH2 0x413 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x433 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x453 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x473 JUMPI DUP1 PUSH4 0xDC4C90D3 EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0x8D3C100A EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x99FBAB88 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0x2C6CC6C7 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0x5E01EB5A EQ PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x18F56A0A EQ PUSH2 0x1E0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x2427 JUMP JUMPDEST PUSH2 0x4D3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x179 PUSH2 0x525 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH2 0x5B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x24D5 JUMP JUMPDEST PUSH2 0x5E0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F5 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x2614 JUMP JUMPDEST PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x235 PUSH2 0x230 CALLDATASIZE PUSH1 0x4 PUSH2 0x2655 JUMP JUMPDEST PUSH2 0x886 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x15B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x2614 JUMP JUMPDEST PUSH2 0x103B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29D PUSH2 0x298 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH2 0x105B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x15B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH2 0x1A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH2 0x1361 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x305 PUSH2 0x300 CALLDATASIZE PUSH1 0x4 PUSH2 0x266D JUMP JUMPDEST PUSH2 0x136C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29D PUSH2 0x32E CALLDATASIZE PUSH1 0x4 PUSH2 0x268A JUMP JUMPDEST PUSH2 0x13B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x179 PUSH2 0x156D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FA PUSH2 0x363 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP1 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD PUSH1 0x4 DUP7 ADD SLOAD PUSH1 0x5 DUP8 ADD SLOAD PUSH1 0x6 DUP9 ADD SLOAD PUSH1 0x7 SWAP1 SWAP9 ADD SLOAD SWAP7 SWAP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP8 SWAP5 DUP8 AND SWAP7 DUP5 AND SWAP6 PUSH1 0x1 PUSH1 0xA0 SHL DUP6 DIV PUSH4 0xFFFFFFFF AND SWAP6 PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP6 DIV PUSH3 0xFFFFFF AND SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP7 AND SWAP6 PUSH1 0x1 PUSH1 0x80 SHL DUP1 DUP3 DIV DUP6 SIGNEXTEND SWAP7 PUSH1 0x1 PUSH1 0x98 SHL SWAP1 SWAP3 DIV SWAP1 SWAP5 SIGNEXTEND SWAP5 DUP3 DUP3 AND SWAP5 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND SWAP2 DUP14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x42E CALLDATASIZE PUSH1 0x4 PUSH2 0x2763 JUMP JUMPDEST PUSH2 0x157C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x44E CALLDATASIZE PUSH1 0x4 PUSH2 0x27F1 JUMP JUMPDEST PUSH2 0x1777 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x46E CALLDATASIZE PUSH1 0x4 PUSH2 0x2835 JUMP JUMPDEST PUSH2 0x1782 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x179 PUSH2 0x48E CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH2 0x179A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1A6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x4CE CALLDATASIZE PUSH1 0x4 PUSH2 0x2915 JUMP JUMPDEST PUSH2 0x180F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x504 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x51F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x534 SWAP1 PUSH2 0x2943 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x560 SWAP1 PUSH2 0x2943 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x582 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x590 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C2 DUP3 PUSH2 0x183D JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x51F JUMP JUMPDEST PUSH2 0x5EB DUP3 DUP3 CALLER PUSH2 0x1876 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x7 SLOAD PUSH2 0x600 SWAP2 SWAP1 PUSH2 0x298D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x618 JUMPI PUSH2 0x618 PUSH2 0x281F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6AF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x0 NOT SWAP1 SWAP3 ADD SWAP2 ADD DUP2 PUSH2 0x636 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x7 SLOAD PUSH2 0x6C4 SWAP2 SWAP1 PUSH2 0x298D JUMP JUMPDEST DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x7F2 JUMPI PUSH1 0x8 PUSH1 0x0 PUSH2 0x6E0 DUP4 PUSH1 0x1 PUSH2 0x29A0 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 KECCAK256 DUP3 MLOAD PUSH2 0x1A0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x2 DUP1 DUP4 ADD SLOAD DUP7 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x3 DUP3 ADD SLOAD SWAP5 DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP6 DIV DUP4 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP5 DIV PUSH3 0xFFFFFF AND PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP3 AND PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0x1 PUSH1 0x80 SHL DUP1 DUP4 DIV DUP7 SIGNEXTEND PUSH1 0xE0 DUP9 ADD MSTORE PUSH1 0x1 PUSH1 0x98 SHL SWAP1 SWAP3 DIV SWAP1 SWAP5 SIGNEXTEND PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD DUP1 DUP6 AND PUSH2 0x120 DUP8 ADD MSTORE DIV SWAP1 SWAP3 AND PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x7 SWAP1 SWAP2 ADD SLOAD PUSH2 0x180 DUP4 ADD MSTORE DUP4 MLOAD DUP5 SWAP2 DUP5 AND SWAP1 DUP2 LT PUSH2 0x7D4 JUMPI PUSH2 0x7D4 PUSH2 0x29C4 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x7EA SWAP1 PUSH2 0x29DA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6B5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x825 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x832 DUP4 DUP4 CALLER PUSH2 0x1883 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0xC0 DUP6 ADD CALLDATALOAD TIMESTAMP DUP2 LT ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x71C54FC9 PUSH2 0x8F7 PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x266D JUMP JUMPDEST PUSH2 0x907 PUSH1 0x40 DUP12 ADD PUSH1 0x20 DUP13 ADD PUSH2 0x266D JUMP JUMPDEST PUSH2 0x917 PUSH1 0x60 DUP13 ADD PUSH1 0x40 DUP14 ADD PUSH2 0x2A11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x935 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x952 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x976 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DB791D2 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E1 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA4F DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x59C4F905 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA4A SWAP2 SWAP1 PUSH2 0x2A72 JUMP JUMPDEST PUSH2 0x197C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA94 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x55B812A8 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH2 0xAAB DUP4 DUP4 DUP4 DUP15 PUSH1 0x60 ADD CALLDATALOAD DUP16 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x1C37 JUMP JUMPDEST SWAP9 POP PUSH1 0x0 PUSH2 0xABC PUSH1 0x20 DUP14 ADD DUP14 PUSH2 0x266D JUMP JUMPDEST PUSH2 0xACC PUSH1 0x40 DUP15 ADD PUSH1 0x20 DUP16 ADD PUSH2 0x266D JUMP JUMPDEST DUP14 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xADF SWAP2 SWAP1 PUSH2 0x2A11 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE CALLER PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH4 0x92F026AD PUSH1 0xE0 SHL DUP3 MSTORE SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x92F026AD SWAP1 PUSH2 0xB52 SWAP1 ADDRESS SWAP1 DUP15 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A95 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB94 SWAP2 SWAP1 PUSH2 0x2AC8 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP8 POP PUSH2 0xBC8 PUSH2 0xBAC PUSH1 0xC0 DUP15 ADD PUSH1 0xA0 DUP16 ADD PUSH2 0x266D JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xBBC DUP4 PUSH2 0x2AEC JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP13 POP DUP13 PUSH2 0x1CFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x16C19739 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x16C19739 SWAP1 PUSH1 0x24 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC35 SWAP2 SWAP1 PUSH2 0x2B1C JUMP JUMPDEST POP POP SWAP3 POP SWAP3 POP POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 DUP15 DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0xA0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC61 SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC82 SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xCA3 SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xCC4 SWAP2 SWAP1 PUSH2 0x2A11 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD31 SWAP2 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x59C4F905 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAC SWAP2 SWAP1 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x55B812A8 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE16 SWAP2 SWAP1 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0x8 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x13 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x160 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH2 0x180 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE SWAP1 POP POP POP POP POP POP POP POP POP POP POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH2 0x1056 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1782 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 PUSH2 0x106A DUP3 PUSH2 0x1361 JUMP JUMPDEST SWAP1 POP PUSH2 0x1077 DUP2 CALLER DUP5 PUSH2 0x1D60 JUMP JUMPDEST PUSH2 0x10B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x139BDD08185C1C1C9BDD9959 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x6 SLOAD PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD SWAP6 MLOAD PUSH4 0x71C54FC9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP4 AND SWAP6 SWAP3 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 PUSH4 0x71C54FC9 SWAP5 PUSH2 0x1122 SWAP5 SWAP4 DUP5 AND SWAP4 DUP2 AND SWAP3 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 ADD PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x113F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1163 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x90BC1693 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x90BC1693 SWAP1 PUSH1 0x24 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11DA SWAP2 SWAP1 PUSH2 0x2AC8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x16C19739 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP10 POP SWAP8 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x16C19739 SWAP1 PUSH1 0x24 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x124C SWAP2 SWAP1 PUSH2 0x2B1C JUMP JUMPDEST POP POP SWAP3 POP SWAP3 POP POP PUSH2 0x127E DUP7 PUSH1 0x6 ADD SLOAD DUP4 PUSH2 0x1266 SWAP2 SWAP1 PUSH2 0x298D JUMP JUMPDEST PUSH1 0x4 DUP9 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x1DC6 JUMP JUMPDEST PUSH2 0x1288 SWAP1 DUP12 PUSH2 0x2B98 JUMP JUMPDEST PUSH1 0x5 DUP8 ADD DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x12A5 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x2B98 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x12DC DUP7 PUSH1 0x7 ADD SLOAD DUP3 PUSH2 0x1266 SWAP2 SWAP1 PUSH2 0x298D JUMP JUMPDEST PUSH2 0x12E6 SWAP1 DUP11 PUSH2 0x2B98 JUMP JUMPDEST PUSH1 0x5 DUP8 ADD DUP1 SLOAD PUSH1 0x10 SWAP1 PUSH2 0x130A SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x2B98 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 DUP3 AND PUSH2 0x100 SWAP4 SWAP1 SWAP4 EXP SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP3 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP PUSH1 0x6 DUP7 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP6 ADD SSTORE POP POP POP PUSH1 0x4 ADD DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE POP SWAP2 SWAP4 SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51F DUP3 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1398 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 PUSH2 0x13C3 DUP3 PUSH2 0x1361 JUMP JUMPDEST SWAP1 POP PUSH2 0x13D0 DUP2 CALLER DUP5 PUSH2 0x1D60 JUMP JUMPDEST PUSH2 0x140B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x139BDD08185C1C1C9BDD9959 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x6 SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD SWAP4 MLOAD PUSH4 0x71C54FC9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH4 0x71C54FC9 SWAP4 PUSH2 0x146A SWAP4 DUP2 AND SWAP3 SWAP1 DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x4 ADD PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1487 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14AB SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x60D49D53 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP4 DIV SWAP1 SWAP3 AND PUSH1 0x44 DUP3 ADD MSTORE SWAP2 SWAP3 POP DUP3 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x60D49D53 SWAP1 PUSH1 0x64 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x151D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1541 SWAP2 SWAP1 PUSH2 0x2BB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP7 ADD SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 DUP3 AND SWAP9 POP AND SWAP6 POP PUSH2 0x1561 DUP10 PUSH2 0x1E68 JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x534 SWAP1 PUSH2 0x2943 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x158D DUP6 DUP8 ADD DUP8 PUSH2 0x2BEB JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x71C54FC9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x71C54FC9 SWAP1 PUSH2 0x15CF SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1610 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x166A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642063616C6C6261636B2063616C6C6572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST DUP9 ISZERO PUSH2 0x16EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP12 SWAP1 MSTORE DUP7 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16E9 SWAP2 SWAP1 PUSH2 0x2C45 JUMP JUMPDEST POP JUMPDEST DUP8 ISZERO PUSH2 0x176C JUMPI PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP11 SWAP1 MSTORE DUP6 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1746 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x176A SWAP2 SWAP1 PUSH2 0x2C45 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5EB CALLER DUP4 DUP4 PUSH2 0x1EA3 JUMP JUMPDEST PUSH2 0x178D DUP5 DUP5 DUP5 PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x880 CALLER DUP6 DUP6 DUP6 DUP6 PUSH2 0x1F42 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x17A5 DUP3 PUSH2 0x183D JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x17BD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x17DD JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1808 JUMP JUMPDEST DUP1 PUSH2 0x17E7 DUP5 PUSH2 0x206D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17F8 SWAP3 SWAP2 SWAP1 PUSH2 0x2C62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x51F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH2 0x1056 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2100 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x18B0 JUMPI PUSH2 0x18B0 DUP2 DUP5 DUP7 PUSH2 0x2206 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x18EE JUMPI PUSH2 0x18CD PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x2100 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x191D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x0 PUSH1 0xFF DUP3 SWAP1 SAR DUP1 DUP4 ADD XOR PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x19A6 JUMPI PUSH2 0x19A6 PUSH4 0x45C3193D PUSH1 0xE1 SHL DUP5 PUSH2 0x226A JUMP JUMPDEST PUSH17 0x1FFFCB933BD6FAD37AA2D162D1A594001 PUSH1 0x1 DUP3 AND MUL PUSH1 0x1 PUSH1 0x80 SHL XOR PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x19E2 JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x1A01 JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x1A20 JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x1A3F JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x1A5E JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x1A7D JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x1A9C JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x1ABC JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x1ADC JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x1AFC JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x1B1C JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x1B3C JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1B5C JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1B7C JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1B9C JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1BBD JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x1BDD JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1BFC JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1C19 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 SGT ISZERO PUSH2 0x1C27 JUMPI PUSH1 0x0 NOT DIV JUMPDEST PUSH4 0xFFFFFFFF ADD PUSH1 0x20 SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1C57 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1C82 JUMPI PUSH2 0x1C7B DUP6 DUP6 DUP6 PUSH2 0x227B JUMP JUMPDEST SWAP1 POP PUSH2 0x1CF2 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT ISZERO PUSH2 0x1CE4 JUMPI PUSH1 0x0 PUSH2 0x1CA9 DUP8 DUP7 DUP7 PUSH2 0x227B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1CB8 DUP8 DUP10 DUP7 PUSH2 0x22E5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x1CD9 JUMPI DUP1 PUSH2 0x1CDB JUMP JUMPDEST DUP2 JUMPDEST SWAP3 POP POP POP PUSH2 0x1CF2 JUMP JUMPDEST PUSH2 0x1CEF DUP6 DUP6 DUP5 PUSH2 0x22E5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D25 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D33 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1883 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1056 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1DBE JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x1D9A JUMPI POP PUSH2 0x1D9A DUP5 DUP5 PUSH2 0x180F JUMP JUMPDEST DUP1 PUSH2 0x1DBE JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 MUL DUP2 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP DUP1 DUP5 GT PUSH2 0x1DE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x1DFB JUMPI POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x1808 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E77 PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x1883 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1ED5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x2066 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1F84 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C91 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1FBF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1FBC SWAP2 DUP2 ADD SWAP1 PUSH2 0x2CC4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2028 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2020 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x2064 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x207A DUP4 PUSH2 0x231B JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x209A JUMPI PUSH2 0x209A PUSH2 0x281F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20C4 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x20CE JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x2114 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x21D6 JUMPI PUSH1 0x0 PUSH2 0x2124 DUP5 PUSH2 0x183D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2150 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2163 JUMPI POP PUSH2 0x2161 DUP2 DUP5 PUSH2 0x180F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x218C JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST DUP2 ISZERO PUSH2 0x21D4 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2211 DUP4 DUP4 DUP4 PUSH2 0x1D60 JUMP JUMPDEST PUSH2 0x1056 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x223F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x81C JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x2 SIGNEXTEND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x229B JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST PUSH1 0x0 PUSH2 0x22BE DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1DC6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CF2 PUSH2 0x22E0 DUP5 DUP4 PUSH2 0x22D2 DUP10 DUP10 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DC6 JUMP JUMPDEST PUSH2 0x23F3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x2305 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST PUSH2 0x1DBE PUSH2 0x22E0 DUP4 PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x22D2 DUP9 DUP9 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x235A JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2386 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x23A4 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x23BC JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x23D0 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x23E2 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x51F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1808 DUP2 PUSH2 0x240E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x245F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2447 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2480 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2444 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1808 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2468 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x24F3 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2607 JUMPI DUP2 MLOAD DUP1 MLOAD DUP6 MSTORE DUP7 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD DUP2 AND DUP8 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP7 ADD MSTORE PUSH1 0x80 DUP1 DUP3 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP7 ADD MSTORE PUSH1 0xA0 DUP1 DUP3 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP7 ADD MSTORE PUSH1 0xC0 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 DUP7 ADD MSTORE PUSH1 0xE0 DUP1 DUP3 ADD MLOAD PUSH1 0x2 DUP2 SWAP1 SIGNEXTEND DUP3 DUP9 ADD MSTORE POP POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x25AE DUP3 DUP9 ADD DUP3 PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP8 DUP4 ADD MSTORE POP POP PUSH2 0x140 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP8 DUP4 ADD MSTORE POP POP PUSH2 0x160 DUP2 DUP2 ADD MLOAD SWAP1 DUP7 ADD MSTORE PUSH2 0x180 SWAP1 DUP2 ADD MLOAD SWAP1 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x251E JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2634 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2644 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x267F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1808 DUP2 PUSH2 0x24C0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x269D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x26AF DUP2 PUSH2 0x24C0 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP14 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP13 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP12 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH4 0xFFFFFFFF DUP11 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH3 0xFFFFFF DUP10 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP9 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1A0 DUP2 ADD PUSH2 0x2716 PUSH1 0xE0 DUP4 ADD DUP10 PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x2726 PUSH2 0x100 DUP4 ADD DUP9 PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP7 AND PUSH2 0x120 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH2 0x140 DUP4 ADD MSTORE PUSH2 0x160 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x180 ADD MSTORE SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2779 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x279F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x27C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x27D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x280F DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x26AF DUP2 PUSH2 0x27E3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x284B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2856 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2866 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x288A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x289E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x28B0 JUMPI PUSH2 0x28B0 PUSH2 0x281F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x28D8 JUMPI PUSH2 0x28D8 PUSH2 0x281F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x28F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2928 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2933 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x26AF DUP2 PUSH2 0x24C0 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2957 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2667 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x51F JUMPI PUSH2 0x51F PUSH2 0x2977 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29BD JUMPI PUSH2 0x29BD PUSH2 0x2977 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x29F3 JUMPI PUSH2 0x29F3 PUSH2 0x2977 JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1808 DUP3 PUSH2 0x29FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1808 DUP2 PUSH2 0x24C0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x1808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1CF2 SWAP1 DUP4 ADD DUP5 PUSH2 0x2468 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2ADB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2AFE JUMPI PUSH2 0x2AFE PUSH2 0x2977 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2B34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B3D DUP7 PUSH2 0x2B05 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP PUSH2 0x2B59 PUSH1 0x60 DUP8 ADD PUSH2 0x2B05 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B67 PUSH1 0x80 DUP8 ADD PUSH2 0x2B05 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29BD JUMPI PUSH2 0x29BD PUSH2 0x2977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BD4 DUP4 PUSH2 0x2B05 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BE2 PUSH1 0x20 DUP5 ADD PUSH2 0x2B05 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2C0C DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2C1C DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP3 POP PUSH2 0x2C2A PUSH1 0x40 DUP7 ADD PUSH2 0x29FD JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x2C3A DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1808 DUP2 PUSH2 0x27E3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2C74 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2444 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2C88 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2444 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1CEF SWAP1 DUP4 ADD DUP5 PUSH2 0x2468 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1808 DUP2 PUSH2 0x240E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29BD JUMPI PUSH2 0x29BD PUSH2 0x2977 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB5 0xEA 0xC0 0xBD PUSH29 0xC28C221F5137EC5579C149F2B0D5171170F604039921740181229D6473 PUSH16 0x6C634300081400330000000000000000 ",
          "sourceMap": "1058:6972:22:-:0;;;1288:1;1263:26;;1298:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1380:113:5;;;;;;;;;;;;;-1:-1:-1;;;1380:113:5;;;;;;;;;;;;;;;;-1:-1:-1;;;1380:113:5;;;1454:5;1446;:13;;;;;;:::i;:::-;-1:-1:-1;1469:7:5;:17;1479:7;1469;:17;:::i;:::-;-1:-1:-1;;1374:11:22::1;:40:::0;;-1:-1:-1;;;;;;1374:40:22::1;-1:-1:-1::0;;;;;1374:40:22;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;1058:6972:22;;14:290:46;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:46;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:46:o;309:127::-;370:10;365:3;361:20;358:1;351:31;401:4;398:1;391:15;425:4;422:1;415:15;441:380;520:1;516:12;;;;563;;;584:61;;638:4;630:6;626:17;616:27;;584:61;691:2;683:6;680:14;660:18;657:38;654:161;;737:10;732:3;728:20;725:1;718:31;772:4;769:1;762:15;800:4;797:1;790:15;654:161;;441:380;;;:::o;952:545::-;1054:2;1049:3;1046:11;1043:448;;;1090:1;1115:5;1111:2;1104:17;1160:4;1156:2;1146:19;1230:2;1218:10;1214:19;1211:1;1207:27;1201:4;1197:38;1266:4;1254:10;1251:20;1248:47;;;-1:-1:-1;1289:4:46;1248:47;1344:2;1339:3;1335:12;1332:1;1328:20;1322:4;1318:31;1308:41;;1399:82;1417:2;1410:5;1407:13;1399:82;;;1462:17;;;1443:1;1432:13;1399:82;;;1403:3;;;1043:448;952:545;;;:::o;1673:1352::-;1793:10;;-1:-1:-1;;;;;1815:30:46;;1812:56;;;1848:18;;:::i;:::-;1877:97;1967:6;1927:38;1959:4;1953:11;1927:38;:::i;:::-;1921:4;1877:97;:::i;:::-;2029:4;;2093:2;2082:14;;2110:1;2105:663;;;;2812:1;2829:6;2826:89;;;-1:-1:-1;2881:19:46;;;2875:26;2826:89;-1:-1:-1;;1630:1:46;1626:11;;;1622:24;1618:29;1608:40;1654:1;1650:11;;;1605:57;2928:81;;2075:944;;2105:663;899:1;892:14;;;936:4;923:18;;-1:-1:-1;;2141:20:46;;;2259:236;2273:7;2270:1;2267:14;2259:236;;;2362:19;;;2356:26;2341:42;;2454:27;;;;2422:1;2410:14;;;;2289:19;;2259:236;;;2263:3;2523:6;2514:7;2511:19;2508:201;;;2584:19;;;2578:26;-1:-1:-1;;2667:1:46;2663:14;;;2679:3;2659:24;2655:37;2651:42;2636:58;2621:74;;2508:201;-1:-1:-1;;;;;2755:1:46;2739:14;;;2735:22;2722:36;;-1:-1:-1;1673:1352:46:o;:::-;1058:6972:22;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_approve_1727": {
              "entryPoint": 6262,
              "id": 1727,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_1793": {
              "entryPoint": 8448,
              "id": 1793,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_baseURI_1108": {
              "entryPoint": null,
              "id": 1108,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_blockTimestamp_8890": {
              "entryPoint": null,
              "id": 8890,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_burn_1601": {
              "entryPoint": 7784,
              "id": 1601,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_checkAuthorized_1367": {
              "entryPoint": 8710,
              "id": 1367,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_getApproved_1294": {
              "entryPoint": null,
              "id": 1294,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_isAuthorized_1330": {
              "entryPoint": 7520,
              "id": 1330,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_mint_1523": {
              "entryPoint": 7419,
              "id": 1523,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_2112": {
              "entryPoint": null,
              "id": 2112,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_ownerOf_1281": {
              "entryPoint": null,
              "id": 1281,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_requireOwned_1859": {
              "entryPoint": 6205,
              "id": 1859,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_setApprovalForAll_1830": {
              "entryPoint": 7843,
              "id": 1830,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_update_1473": {
              "entryPoint": 6275,
              "id": 1473,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@approve_1124": {
              "entryPoint": 1504,
              "id": 1124,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@balanceOf_1032": {
              "entryPoint": 4972,
              "id": 1032,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@burn_9215": {
              "entryPoint": 4187,
              "id": 9215,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@checkOnERC721Received_2099": {
              "entryPoint": 8002,
              "id": 2099,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@collect_9286": {
              "entryPoint": 5044,
              "id": 9286,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@getAllPositions_9331": {
              "entryPoint": 1519,
              "id": 9331,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getApproved_1141": {
              "entryPoint": 1463,
              "id": 1141,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getLiquidityForAmount0_10949": {
              "entryPoint": 8827,
              "id": 10949,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getLiquidityForAmount1_10986": {
              "entryPoint": 8933,
              "id": 10986,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getLiquidityForAmounts_11067": {
              "entryPoint": 7223,
              "id": 11067,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "@getSender_8881": {
              "entryPoint": null,
              "id": 8881,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getSqrtPriceAtTick_12659": {
              "entryPoint": 6524,
              "id": 12659,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isApprovedForAll_1174": {
              "entryPoint": 6159,
              "id": 1174,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@log10_5073": {
              "entryPoint": 8987,
              "id": 5073,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@mintCallback_9411": {
              "entryPoint": 5500,
              "id": 9411,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@mint_9083": {
              "entryPoint": 2182,
              "id": 9083,
              "parameterSlots": 1,
              "returnSlots": 4
            },
            "@mulDiv_10838": {
              "entryPoint": 7622,
              "id": 10838,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@name_1054": {
              "entryPoint": 1317,
              "id": 1054,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@ownerOf_1045": {
              "entryPoint": 4961,
              "id": 1045,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@poolManager_8847": {
              "entryPoint": null,
              "id": 8847,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@positions_8872": {
              "entryPoint": null,
              "id": 8872,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@revertWith_10635": {
              "entryPoint": 8810,
              "id": 10635,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@safeTransferFrom_1238": {
              "entryPoint": 4155,
              "id": 1238,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@safeTransferFrom_1268": {
              "entryPoint": 6018,
              "id": 1268,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@setApprovalForAll_1157": {
              "entryPoint": 6007,
              "id": 1157,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@supportsInterface_1004": {
              "entryPoint": 1235,
              "id": 1004,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_3607": {
              "entryPoint": null,
              "id": 3607,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@symbol_1063": {
              "entryPoint": 5485,
              "id": 1063,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toString_2296": {
              "entryPoint": 8301,
              "id": 2296,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toUint128_10903": {
              "entryPoint": 9203,
              "id": 10903,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenURI_1099": {
              "entryPoint": 6042,
              "id": 1099,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@transferFrom_1220": {
              "entryPoint": 2038,
              "id": 1220,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 9837,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 10837,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_payablet_address_payablet_uint32t_address_payable": {
              "entryPoint": 11243,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 10517,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 9748,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 10293,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_bool": {
              "entryPoint": 10225,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 9429,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 11333,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 9255,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 11460,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_int24_fromMemory": {
              "entryPoint": 10866,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_MintParams_$10423_calldata_ptr": {
              "entryPoint": 9813,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint128t_uint128_fromMemory": {
              "entryPoint": 11192,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint128t_uint256t_uint256t_uint128t_uint128_fromMemory": {
              "entryPoint": 11036,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_uint160_fromMemory": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint24_fromMemory": {
              "entryPoint": 11123,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 9383,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_address": {
              "entryPoint": 9866,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_uint256_fromMemory": {
              "entryPoint": 10952,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_uint256t_uint256t_bytes_calldata_ptr": {
              "entryPoint": 10083,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_uint32": {
              "entryPoint": 10769,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_uint128_fromMemory": {
              "entryPoint": 11013,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_uint32": {
              "entryPoint": 10749,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_int24": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_string": {
              "entryPoint": 9320,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 11362,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 11409,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint32__to_t_address_t_address_t_uint32__fromStack_reversed": {
              "entryPoint": 10796,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint32_t_address__to_t_address_t_address_t_uint32_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint128_t_bytes_memory_ptr__to_t_address_t_uint128_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 10901,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint128_t_uint128__to_t_address_t_uint128_t_uint128__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_struct$_PositionInfo_$10401_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_PositionInfo_$10401_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 9473,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IPoolManager_$10365__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 9364,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_2e5cf285e34dd20513f4f66f8b885ecee7c668a3b2fe9a226ced0c251b56c512__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint128__to_t_uint128__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address_t_address_t_address_t_uint32_t_uint24_t_uint128_t_int24_t_int24_t_uint128_t_uint128_t_uint256_t_uint256__to_t_uint256_t_address_t_address_t_address_t_uint32_t_uint24_t_uint128_t_int24_t_int24_t_uint128_t_uint128_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 9914,
              "id": null,
              "parameterSlots": 14,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint128_t_uint256_t_uint256__to_t_uint256_t_uint128_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_uint128": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_uint24": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_uint32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "checked_add_t_uint128": {
              "entryPoint": 11160,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint32": {
              "entryPoint": 10656,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint160": {
              "entryPoint": 11489,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 10637,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 9284,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 10563,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 10988,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint32": {
              "entryPoint": 10714,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 10615,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 10692,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 10271,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 9408,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_bool": {
              "entryPoint": 10211,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_bytes4": {
              "entryPoint": 9230,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:22242:46",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:46",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "58:87:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "123:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "132:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "135:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "125:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "125:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "125:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "81:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "92:5:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "103:3:46",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "108:10:46",
                                            "type": "",
                                            "value": "0xffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "99:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "99:20:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "88:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "88:32:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "78:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "78:43:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "71:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "71:51:46"
                          },
                          "nodeType": "YulIf",
                          "src": "68:71:46"
                        }
                      ]
                    },
                    "name": "validator_revert_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "47:5:46",
                        "type": ""
                      }
                    ],
                    "src": "14:131:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "219:176:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "265:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "274:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "277:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "267:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "267:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "267:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "240:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "249:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "236:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "236:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "261:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "232:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "232:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "229:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "290:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "316:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "303:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "303:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "294:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "359:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "335:23:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "335:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "335:30:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "374:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "384:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "374:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "185:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "196:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "208:6:46",
                        "type": ""
                      }
                    ],
                    "src": "150:245:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "495:92:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "505:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "517:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "528:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "513:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "513:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "505:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "547:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "572:6:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "565:6:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "565:14:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "558:6:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "558:22:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "540:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "540:41:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "540:41:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "464:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "475:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "486:4:46",
                        "type": ""
                      }
                    ],
                    "src": "400:187:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "658:184:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "668:10:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "677:1:46",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "672:1:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "737:63:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "762:3:46"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "767:1:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "758:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "758:11:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "781:3:46"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "786:1:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "777:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "777:11:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "771:5:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "771:18:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "751:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "751:39:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "751:39:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "698:1:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "701:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "695:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "695:13:46"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "709:19:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "711:15:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "720:1:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "723:2:46",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "716:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "716:10:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "711:1:46"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "691:3:46",
                            "statements": []
                          },
                          "src": "687:113:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "820:3:46"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "825:6:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "816:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "816:16:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "834:1:46",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "809:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "809:27:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "809:27:46"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "636:3:46",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "641:3:46",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "646:6:46",
                        "type": ""
                      }
                    ],
                    "src": "592:250:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "897:221:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "907:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "927:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "921:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "921:12:46"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "911:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "949:3:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "954:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "942:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "942:19:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "942:19:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1009:5:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1016:4:46",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1005:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1005:16:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1027:3:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1032:4:46",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1023:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1023:14:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1039:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "970:34:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "970:76:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "970:76:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1055:57:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "1070:3:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "1083:6:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1091:2:46",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1079:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1079:15:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1100:2:46",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1096:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1096:7:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1075:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1075:29:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1066:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1066:39:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1107:4:46",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1062:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1062:50:46"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "1055:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "874:5:46",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "881:3:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "889:3:46",
                        "type": ""
                      }
                    ],
                    "src": "847:271:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1244:99:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1261:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1272:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1254:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1254:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1254:21:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1284:53:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1310:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1322:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1333:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1318:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1318:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "1292:17:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1292:45:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1284:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1213:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1224:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1235:4:46",
                        "type": ""
                      }
                    ],
                    "src": "1123:220:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1418:110:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1464:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1473:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1476:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1466:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1466:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1466:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1439:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1448:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1435:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1435:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1460:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1431:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1431:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1428:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1489:33:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1512:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1499:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1499:23:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1489:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1384:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1395:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1407:6:46",
                        "type": ""
                      }
                    ],
                    "src": "1348:180:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1577:60:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1594:3:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1603:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1618:3:46",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1623:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1614:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1614:11:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1627:1:46",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1610:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1610:19:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1599:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1599:31:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1587:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1587:44:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1587:44:46"
                        }
                      ]
                    },
                    "name": "abi_encode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1561:5:46",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1568:3:46",
                        "type": ""
                      }
                    ],
                    "src": "1533:104:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1743:102:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1753:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1765:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1776:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1761:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1761:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1753:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1795:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1810:6:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1826:3:46",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1831:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1822:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1822:11:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1835:1:46",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1818:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1818:19:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1806:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1806:32:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1788:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1788:51:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1788:51:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1712:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1723:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1734:4:46",
                        "type": ""
                      }
                    ],
                    "src": "1642:203:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1895:86:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1959:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1968:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1971:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1961:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1961:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1961:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1918:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1929:5:46"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1944:3:46",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1949:1:46",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "1940:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1940:11:46"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1953:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1936:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1936:19:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1925:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1925:31:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1915:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1915:42:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1908:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1908:50:46"
                          },
                          "nodeType": "YulIf",
                          "src": "1905:70:46"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1884:5:46",
                        "type": ""
                      }
                    ],
                    "src": "1850:131:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2073:228:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2119:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2128:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2131:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2121:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2121:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2121:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2094:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2103:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2090:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2090:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2115:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2086:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2086:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "2083:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2144:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2170:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2157:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2157:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2148:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2214:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2189:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2189:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2189:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2229:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2239:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2229:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2253:42:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2280:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2291:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2276:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2276:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2263:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2263:32:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2253:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2031:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2042:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2054:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2062:6:46",
                        "type": ""
                      }
                    ],
                    "src": "1986:315:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2349:51:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2366:3:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2375:5:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2382:10:46",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2371:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2371:22:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2359:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2359:35:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2359:35:46"
                        }
                      ]
                    },
                    "name": "abi_encode_uint32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2333:5:46",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2340:3:46",
                        "type": ""
                      }
                    ],
                    "src": "2306:94:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2448:49:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2465:3:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2474:5:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2481:8:46",
                                    "type": "",
                                    "value": "0xffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2470:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2470:20:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2458:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2458:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2458:33:46"
                        }
                      ]
                    },
                    "name": "abi_encode_uint24",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2432:5:46",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2439:3:46",
                        "type": ""
                      }
                    ],
                    "src": "2405:92:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2546:75:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2563:3:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2572:5:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2579:34:46",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2568:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2568:46:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2556:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2556:59:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2556:59:46"
                        }
                      ]
                    },
                    "name": "abi_encode_uint128",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2530:5:46",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2537:3:46",
                        "type": ""
                      }
                    ],
                    "src": "2502:119:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2668:49:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2685:3:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2701:1:46",
                                    "type": "",
                                    "value": "2"
                                  },
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2704:5:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "signextend",
                                  "nodeType": "YulIdentifier",
                                  "src": "2690:10:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2690:20:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2678:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2678:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2678:33:46"
                        }
                      ]
                    },
                    "name": "abi_encode_int24",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2652:5:46",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2659:3:46",
                        "type": ""
                      }
                    ],
                    "src": "2626:91:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2935:2066:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2945:12:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2955:2:46",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2949:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2966:32:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2984:9:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2995:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2980:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2980:18:46"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "2970:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3014:9:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3025:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3007:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3007:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3007:21:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3037:17:46",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "3048:6:46"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "3041:3:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3063:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3083:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3077:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3077:13:46"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3067:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "3106:6:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3114:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3099:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3099:22:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3099:22:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3130:12:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3140:2:46",
                            "type": "",
                            "value": "64"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "3134:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3151:25:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3162:9:46"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3173:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3158:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3158:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "3151:3:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3185:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3203:6:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3211:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3199:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3199:15:46"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "3189:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3223:10:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3232:1:46",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3227:1:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3291:1684:46",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3305:23:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "3321:6:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3315:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3315:13:46"
                                },
                                "variables": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulTypedName",
                                    "src": "3309:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "3348:3:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "3359:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3353:5:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3353:9:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3341:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3341:22:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3341:22:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3376:38:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "3406:2:46"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3410:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3402:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3402:11:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3396:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3396:18:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0",
                                    "nodeType": "YulTypedName",
                                    "src": "3380:12:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3446:12:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3464:3:46"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3469:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3460:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3460:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "3427:18:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3427:46:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3427:46:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3486:40:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "3518:2:46"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "3522:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3514:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3514:11:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3508:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3508:18:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_1",
                                    "nodeType": "YulTypedName",
                                    "src": "3490:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3558:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3578:3:46"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "3583:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3574:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3574:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "3539:18:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3539:48:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3539:48:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3600:14:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3610:4:46",
                                  "type": "",
                                  "value": "0x60"
                                },
                                "variables": [
                                  {
                                    "name": "_4",
                                    "nodeType": "YulTypedName",
                                    "src": "3604:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3627:40:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "3659:2:46"
                                        },
                                        {
                                          "name": "_4",
                                          "nodeType": "YulIdentifier",
                                          "src": "3663:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3655:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3655:11:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3649:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3649:18:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_2",
                                    "nodeType": "YulTypedName",
                                    "src": "3631:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3699:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3719:3:46"
                                        },
                                        {
                                          "name": "_4",
                                          "nodeType": "YulIdentifier",
                                          "src": "3724:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3715:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3715:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "3680:18:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3680:48:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3680:48:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3741:14:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3751:4:46",
                                  "type": "",
                                  "value": "0x80"
                                },
                                "variables": [
                                  {
                                    "name": "_5",
                                    "nodeType": "YulTypedName",
                                    "src": "3745:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3768:40:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "3800:2:46"
                                        },
                                        {
                                          "name": "_5",
                                          "nodeType": "YulIdentifier",
                                          "src": "3804:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3796:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3796:11:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3790:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3790:18:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_3",
                                    "nodeType": "YulTypedName",
                                    "src": "3772:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "3839:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3859:3:46"
                                        },
                                        {
                                          "name": "_5",
                                          "nodeType": "YulIdentifier",
                                          "src": "3864:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3855:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3855:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_uint32",
                                    "nodeType": "YulIdentifier",
                                    "src": "3821:17:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3821:47:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3821:47:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3881:14:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3891:4:46",
                                  "type": "",
                                  "value": "0xa0"
                                },
                                "variables": [
                                  {
                                    "name": "_6",
                                    "nodeType": "YulTypedName",
                                    "src": "3885:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "3908:40:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "3940:2:46"
                                        },
                                        {
                                          "name": "_6",
                                          "nodeType": "YulIdentifier",
                                          "src": "3944:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3936:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3936:11:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "3930:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3930:18:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_4",
                                    "nodeType": "YulTypedName",
                                    "src": "3912:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_4",
                                      "nodeType": "YulIdentifier",
                                      "src": "3979:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3999:3:46"
                                        },
                                        {
                                          "name": "_6",
                                          "nodeType": "YulIdentifier",
                                          "src": "4004:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3995:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3995:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_uint24",
                                    "nodeType": "YulIdentifier",
                                    "src": "3961:17:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3961:47:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3961:47:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4021:14:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4031:4:46",
                                  "type": "",
                                  "value": "0xc0"
                                },
                                "variables": [
                                  {
                                    "name": "_7",
                                    "nodeType": "YulTypedName",
                                    "src": "4025:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4048:40:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "4080:2:46"
                                        },
                                        {
                                          "name": "_7",
                                          "nodeType": "YulIdentifier",
                                          "src": "4084:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4076:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4076:11:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "4070:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4070:18:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_5",
                                    "nodeType": "YulTypedName",
                                    "src": "4052:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_5",
                                      "nodeType": "YulIdentifier",
                                      "src": "4120:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4140:3:46"
                                        },
                                        {
                                          "name": "_7",
                                          "nodeType": "YulIdentifier",
                                          "src": "4145:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4136:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4136:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_uint128",
                                    "nodeType": "YulIdentifier",
                                    "src": "4101:18:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4101:48:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4101:48:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4162:14:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4172:4:46",
                                  "type": "",
                                  "value": "0xe0"
                                },
                                "variables": [
                                  {
                                    "name": "_8",
                                    "nodeType": "YulTypedName",
                                    "src": "4166:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4189:40:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "4221:2:46"
                                        },
                                        {
                                          "name": "_8",
                                          "nodeType": "YulIdentifier",
                                          "src": "4225:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4217:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4217:11:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "4211:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4211:18:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_6",
                                    "nodeType": "YulTypedName",
                                    "src": "4193:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_6",
                                      "nodeType": "YulIdentifier",
                                      "src": "4259:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4279:3:46"
                                        },
                                        {
                                          "name": "_8",
                                          "nodeType": "YulIdentifier",
                                          "src": "4284:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4275:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4275:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_int24",
                                    "nodeType": "YulIdentifier",
                                    "src": "4242:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4242:46:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4242:46:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4301:16:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4311:6:46",
                                  "type": "",
                                  "value": "0x0100"
                                },
                                "variables": [
                                  {
                                    "name": "_9",
                                    "nodeType": "YulTypedName",
                                    "src": "4305:2:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4330:40:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "4362:2:46"
                                        },
                                        {
                                          "name": "_9",
                                          "nodeType": "YulIdentifier",
                                          "src": "4366:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4358:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4358:11:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "4352:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4352:18:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_7",
                                    "nodeType": "YulTypedName",
                                    "src": "4334:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_7",
                                      "nodeType": "YulIdentifier",
                                      "src": "4400:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4420:3:46"
                                        },
                                        {
                                          "name": "_9",
                                          "nodeType": "YulIdentifier",
                                          "src": "4425:2:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4416:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4416:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_int24",
                                    "nodeType": "YulIdentifier",
                                    "src": "4383:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4383:46:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4383:46:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4442:17:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4453:6:46",
                                  "type": "",
                                  "value": "0x0120"
                                },
                                "variables": [
                                  {
                                    "name": "_10",
                                    "nodeType": "YulTypedName",
                                    "src": "4446:3:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4472:41:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "4504:2:46"
                                        },
                                        {
                                          "name": "_10",
                                          "nodeType": "YulIdentifier",
                                          "src": "4508:3:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4500:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4500:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "4494:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4494:19:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_8",
                                    "nodeType": "YulTypedName",
                                    "src": "4476:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_8",
                                      "nodeType": "YulIdentifier",
                                      "src": "4545:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4565:3:46"
                                        },
                                        {
                                          "name": "_10",
                                          "nodeType": "YulIdentifier",
                                          "src": "4570:3:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4561:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4561:13:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_uint128",
                                    "nodeType": "YulIdentifier",
                                    "src": "4526:18:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4526:49:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4526:49:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4588:17:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4599:6:46",
                                  "type": "",
                                  "value": "0x0140"
                                },
                                "variables": [
                                  {
                                    "name": "_11",
                                    "nodeType": "YulTypedName",
                                    "src": "4592:3:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4618:41:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "4650:2:46"
                                        },
                                        {
                                          "name": "_11",
                                          "nodeType": "YulIdentifier",
                                          "src": "4654:3:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4646:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4646:12:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "4640:5:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4640:19:46"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_9",
                                    "nodeType": "YulTypedName",
                                    "src": "4622:14:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_9",
                                      "nodeType": "YulIdentifier",
                                      "src": "4691:14:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4711:3:46"
                                        },
                                        {
                                          "name": "_11",
                                          "nodeType": "YulIdentifier",
                                          "src": "4716:3:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4707:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4707:13:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_uint128",
                                    "nodeType": "YulIdentifier",
                                    "src": "4672:18:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4672:49:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4672:49:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4734:17:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4745:6:46",
                                  "type": "",
                                  "value": "0x0160"
                                },
                                "variables": [
                                  {
                                    "name": "_12",
                                    "nodeType": "YulTypedName",
                                    "src": "4738:3:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4775:3:46"
                                        },
                                        {
                                          "name": "_12",
                                          "nodeType": "YulIdentifier",
                                          "src": "4780:3:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4771:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4771:13:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "4796:2:46"
                                            },
                                            {
                                              "name": "_12",
                                              "nodeType": "YulIdentifier",
                                              "src": "4800:3:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "4792:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4792:12:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "4786:5:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4786:19:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4764:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4764:42:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4764:42:46"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "4819:17:46",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4830:6:46",
                                  "type": "",
                                  "value": "0x0180"
                                },
                                "variables": [
                                  {
                                    "name": "_13",
                                    "nodeType": "YulTypedName",
                                    "src": "4823:3:46",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "4860:3:46"
                                        },
                                        {
                                          "name": "_13",
                                          "nodeType": "YulIdentifier",
                                          "src": "4865:3:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4856:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4856:13:46"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "4881:2:46"
                                            },
                                            {
                                              "name": "_13",
                                              "nodeType": "YulIdentifier",
                                              "src": "4885:3:46"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "4877:3:46"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4877:12:46"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "4871:5:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4871:19:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "4849:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4849:42:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4849:42:46"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "4904:23:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "4915:3:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4920:6:46",
                                      "type": "",
                                      "value": "0x01a0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "4911:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4911:16:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "4904:3:46"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "4940:25:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "4954:6:46"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4962:2:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "4950:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4950:15:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4940:6:46"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3253:1:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3256:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3250:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3250:13:46"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3264:18:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3266:14:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3275:1:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3278:1:46",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3271:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3271:9:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3266:1:46"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3246:3:46",
                            "statements": []
                          },
                          "src": "3242:1733:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4984:11:46",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4992:3:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4984:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_struct$_PositionInfo_$10401_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_PositionInfo_$10401_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2904:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2915:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2926:4:46",
                        "type": ""
                      }
                    ],
                    "src": "2722:2279:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5110:352:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5156:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5165:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5168:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5158:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5158:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5158:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5131:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5140:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5127:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5127:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5152:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5123:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5123:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "5120:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5181:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5207:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5194:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5194:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5185:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5251:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5226:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5226:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5226:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5266:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5276:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5266:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5290:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5322:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5333:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5318:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5318:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5305:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5305:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "5294:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "5371:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "5346:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5346:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5346:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5388:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "5398:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5388:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5414:42:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5441:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5452:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5437:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5437:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5424:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5424:32:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "5414:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5060:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5071:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5083:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5091:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5099:6:46",
                        "type": ""
                      }
                    ],
                    "src": "5006:456:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5568:97:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5615:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5624:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5627:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5617:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5617:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5617:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5589:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5598:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5585:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5585:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5610:3:46",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5581:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5581:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "5578:53:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5640:19:46",
                          "value": {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5650:9:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5640:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_MintParams_$10423_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5534:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5545:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5557:6:46",
                        "type": ""
                      }
                    ],
                    "src": "5467:198:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5855:247:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5865:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5877:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5888:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5873:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5873:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5865:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5908:9:46"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5919:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5901:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5901:25:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5901:25:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5946:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5957:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5942:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5942:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5966:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5974:34:46",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5962:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5962:47:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5935:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5935:75:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5935:75:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6030:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6041:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6026:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6026:18:46"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "6046:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6019:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6019:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6019:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6073:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6084:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6069:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6069:18:46"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "6089:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6062:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6062:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6062:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint128_t_uint256_t_uint256__to_t_uint256_t_uint128_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5800:9:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5811:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5819:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5827:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5835:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5846:4:46",
                        "type": ""
                      }
                    ],
                    "src": "5670:432:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6236:119:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6246:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6258:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6269:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6254:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6254:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6246:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6288:9:46"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6299:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6281:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6281:25:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6281:25:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6326:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6337:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6322:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6322:18:46"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6342:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6315:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6315:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6315:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6197:9:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6208:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6216:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6227:4:46",
                        "type": ""
                      }
                    ],
                    "src": "6107:248:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6430:177:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6476:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6485:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6488:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6478:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6478:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6478:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6451:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6460:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6447:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6447:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6472:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6443:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6443:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "6440:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6501:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6527:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6514:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6514:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6505:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6571:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "6546:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6546:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6546:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6586:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6596:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6586:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6396:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6407:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6419:6:46",
                        "type": ""
                      }
                    ],
                    "src": "6360:247:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6713:76:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6723:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6735:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6746:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6731:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6731:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6723:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6765:9:46"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6776:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6758:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6758:25:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6758:25:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6682:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6693:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6704:4:46",
                        "type": ""
                      }
                    ],
                    "src": "6612:177:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6881:228:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6927:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6936:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6939:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6929:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6929:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6929:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6902:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6911:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6898:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6898:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6923:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "6894:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6894:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "6891:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6952:33:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6975:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6962:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6962:23:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6952:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6994:45:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7024:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7035:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7020:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7020:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7007:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7007:32:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "6998:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "7073:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "7048:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7048:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7048:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7088:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7098:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "7088:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6839:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "6850:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6862:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6870:6:46",
                        "type": ""
                      }
                    ],
                    "src": "6794:315:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7542:758:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7552:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7564:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7575:3:46",
                                "type": "",
                                "value": "416"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7560:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7560:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7552:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7595:9:46"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7606:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7588:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7588:25:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7588:25:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7622:29:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7640:3:46",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7645:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "7636:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7636:11:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7649:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7632:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7632:19:46"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "7626:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7671:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7682:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7667:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7667:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7691:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7699:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7687:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7687:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7660:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7660:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7660:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7723:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7734:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7719:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7719:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "7743:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7751:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7739:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7739:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7712:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7712:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7712:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7775:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7786:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7771:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7771:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "7795:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7803:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7791:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7791:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7764:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7764:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7764:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7827:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7838:3:46",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7823:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7823:19:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value4",
                                    "nodeType": "YulIdentifier",
                                    "src": "7848:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7856:10:46",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7844:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7844:23:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7816:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7816:52:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7816:52:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7888:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7899:3:46",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7884:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7884:19:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value5",
                                    "nodeType": "YulIdentifier",
                                    "src": "7909:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7917:8:46",
                                    "type": "",
                                    "value": "0xffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7905:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7905:21:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7877:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7877:50:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7877:50:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value6",
                                "nodeType": "YulIdentifier",
                                "src": "7955:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7967:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7978:3:46",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7963:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7963:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint128",
                              "nodeType": "YulIdentifier",
                              "src": "7936:18:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7936:47:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7936:47:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value7",
                                "nodeType": "YulIdentifier",
                                "src": "8009:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8021:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8032:3:46",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8017:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8017:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_int24",
                              "nodeType": "YulIdentifier",
                              "src": "7992:16:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7992:45:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7992:45:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value8",
                                "nodeType": "YulIdentifier",
                                "src": "8063:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8075:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8086:3:46",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8071:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8071:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_int24",
                              "nodeType": "YulIdentifier",
                              "src": "8046:16:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8046:45:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8046:45:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value9",
                                "nodeType": "YulIdentifier",
                                "src": "8119:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8131:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8142:3:46",
                                    "type": "",
                                    "value": "288"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8127:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8127:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint128",
                              "nodeType": "YulIdentifier",
                              "src": "8100:18:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8100:47:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8100:47:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value10",
                                "nodeType": "YulIdentifier",
                                "src": "8175:7:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8188:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8199:3:46",
                                    "type": "",
                                    "value": "320"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8184:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8184:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_uint128",
                              "nodeType": "YulIdentifier",
                              "src": "8156:18:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8156:48:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8156:48:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8224:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8235:3:46",
                                    "type": "",
                                    "value": "352"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8220:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8220:19:46"
                              },
                              {
                                "name": "value11",
                                "nodeType": "YulIdentifier",
                                "src": "8241:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8213:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8213:36:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8213:36:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8269:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8280:3:46",
                                    "type": "",
                                    "value": "384"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8265:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8265:19:46"
                              },
                              {
                                "name": "value12",
                                "nodeType": "YulIdentifier",
                                "src": "8286:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8258:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8258:36:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8258:36:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address_t_address_t_address_t_uint32_t_uint24_t_uint128_t_int24_t_int24_t_uint128_t_uint128_t_uint256_t_uint256__to_t_uint256_t_address_t_address_t_address_t_uint32_t_uint24_t_uint128_t_int24_t_int24_t_uint128_t_uint128_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7412:9:46",
                        "type": ""
                      },
                      {
                        "name": "value12",
                        "nodeType": "YulTypedName",
                        "src": "7423:7:46",
                        "type": ""
                      },
                      {
                        "name": "value11",
                        "nodeType": "YulTypedName",
                        "src": "7432:7:46",
                        "type": ""
                      },
                      {
                        "name": "value10",
                        "nodeType": "YulTypedName",
                        "src": "7441:7:46",
                        "type": ""
                      },
                      {
                        "name": "value9",
                        "nodeType": "YulTypedName",
                        "src": "7450:6:46",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "7458:6:46",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "7466:6:46",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "7474:6:46",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "7482:6:46",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "7490:6:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7498:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7506:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7514:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7522:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7533:4:46",
                        "type": ""
                      }
                    ],
                    "src": "7114:1186:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8428:604:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8474:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8483:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8486:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8476:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8476:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8476:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8449:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8458:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8445:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8445:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8470:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8441:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8441:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "8438:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8499:33:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8522:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8509:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8509:23:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8499:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8541:42:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8568:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8579:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8564:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8564:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8551:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8551:32:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8541:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8592:46:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8623:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8634:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8619:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8619:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8606:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8606:32:46"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "8596:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8647:28:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8657:18:46",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8651:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8702:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8711:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8714:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8704:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8704:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8704:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8690:6:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8698:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8687:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8687:14:46"
                          },
                          "nodeType": "YulIf",
                          "src": "8684:34:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8727:32:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8741:9:46"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8752:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8737:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8737:22:46"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "8731:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8807:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8816:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8819:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8809:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8809:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8809:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "8786:2:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8790:4:46",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8782:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8782:13:46"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8797:7:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "8778:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8778:27:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "8771:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8771:35:46"
                          },
                          "nodeType": "YulIf",
                          "src": "8768:55:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8832:30:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "8859:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8846:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8846:16:46"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "8836:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8889:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8898:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8901:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8891:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8891:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8891:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "8877:6:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8885:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8874:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8874:14:46"
                          },
                          "nodeType": "YulIf",
                          "src": "8871:34:46"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8955:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8964:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8967:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8957:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8957:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8957:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "8928:2:46"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "8932:6:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8924:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8924:15:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8941:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8920:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8920:24:46"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8946:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8917:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8917:37:46"
                          },
                          "nodeType": "YulIf",
                          "src": "8914:57:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8980:21:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "8994:2:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8998:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8990:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8990:11:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8980:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9010:16:46",
                          "value": {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "9020:6:46"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "9010:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8370:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8381:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8393:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8401:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8409:6:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8417:6:46",
                        "type": ""
                      }
                    ],
                    "src": "8305:727:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9079:76:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9133:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9142:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9145:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9135:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9135:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9135:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9102:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "9123:5:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "9116:6:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9116:13:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "9109:6:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9109:21:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "9099:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9099:32:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "9092:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9092:40:46"
                          },
                          "nodeType": "YulIf",
                          "src": "9089:60:46"
                        }
                      ]
                    },
                    "name": "validator_revert_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9068:5:46",
                        "type": ""
                      }
                    ],
                    "src": "9037:118:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9244:298:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9290:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9299:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9302:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9292:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9292:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9292:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9265:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9274:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9261:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9261:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9286:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9257:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9257:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "9254:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9315:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9341:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9328:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9328:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9319:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9385:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "9360:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9360:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9360:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9400:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9410:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9400:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9424:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9456:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9467:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9452:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9452:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9439:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9439:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "9428:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "9502:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "9480:21:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9480:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9480:30:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9519:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "9529:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "9519:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9202:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9213:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9225:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9233:6:46",
                        "type": ""
                      }
                    ],
                    "src": "9160:382:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9579:95:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9596:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9603:3:46",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9608:10:46",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "9599:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9599:20:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9589:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9589:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9589:31:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9636:1:46",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9639:4:46",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9629:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9629:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9629:15:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9660:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9663:4:46",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "9653:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9653:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9653:15:46"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "9547:127:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9809:1136:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9856:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9865:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9868:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9858:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9858:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9858:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9830:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9839:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9826:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9826:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9851:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9822:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9822:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "9819:53:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9881:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9907:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9894:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9894:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9885:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9951:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "9926:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9926:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9926:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9966:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9976:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9966:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9990:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10022:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10033:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10018:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10018:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10005:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10005:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "9994:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "10071:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "10046:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10046:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10046:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10088:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "10098:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10088:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10114:42:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10141:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10152:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10137:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10137:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10124:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10124:32:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "10114:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10165:46:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10196:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10207:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10192:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10192:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10179:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10179:32:46"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "10169:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10220:28:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10230:18:46",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "10224:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10275:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10284:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10287:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10277:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10277:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10277:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10263:6:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10271:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10260:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10260:14:46"
                          },
                          "nodeType": "YulIf",
                          "src": "10257:34:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10300:32:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10314:9:46"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10325:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10310:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10310:22:46"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "10304:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10380:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10389:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10392:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10382:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10382:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10382:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10359:2:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10363:4:46",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10355:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10355:13:46"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10370:7:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10351:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10351:27:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10344:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10344:35:46"
                          },
                          "nodeType": "YulIf",
                          "src": "10341:55:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10405:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "10428:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10415:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10415:16:46"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "10409:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10454:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "10456:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10456:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10456:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "10446:2:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10450:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10443:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10443:10:46"
                          },
                          "nodeType": "YulIf",
                          "src": "10440:36:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10485:17:46",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10499:2:46",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "10495:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10495:7:46"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "10489:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10511:23:46",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10531:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10525:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10525:9:46"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "10515:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10543:71:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "10565:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "10589:2:46"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "10593:4:46",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "10585:3:46"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "10585:13:46"
                                          },
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "10600:2:46"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "10581:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10581:22:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10605:2:46",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10577:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10577:31:46"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "10610:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10573:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10573:40:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10561:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10561:53:46"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "10547:10:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10673:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "10675:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10675:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10675:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "10632:10:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10644:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10629:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10629:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "10652:10:46"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "10664:6:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10649:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10649:22:46"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "10626:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10626:46:46"
                          },
                          "nodeType": "YulIf",
                          "src": "10623:72:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10711:2:46",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "10715:10:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10704:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10704:22:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10704:22:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "10742:6:46"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "10750:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10735:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10735:18:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10735:18:46"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10799:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10808:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10811:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10801:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10801:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10801:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "10776:2:46"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "10780:2:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10772:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10772:11:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10785:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10768:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10768:20:46"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10790:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10765:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10765:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "10762:53:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "10841:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10849:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10837:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10837:15:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "10858:2:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10862:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10854:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10854:11:46"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "10867:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "10824:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10824:46:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10824:46:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nodeType": "YulIdentifier",
                                        "src": "10894:6:46"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "10902:2:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10890:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10890:15:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10907:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10886:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10886:24:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10912:1:46",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10879:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10879:35:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10879:35:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10923:16:46",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "10933:6:46"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "10923:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9751:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9762:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9774:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9782:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9790:6:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "9798:6:46",
                        "type": ""
                      }
                    ],
                    "src": "9679:1266:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11073:102:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11083:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11095:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11106:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11091:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11091:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11083:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11125:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "11140:6:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11156:3:46",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "11161:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "11152:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11152:11:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11165:1:46",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "11148:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11148:19:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11136:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11136:32:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11118:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11118:51:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11118:51:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IPoolManager_$10365__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11042:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11053:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11064:4:46",
                        "type": ""
                      }
                    ],
                    "src": "10950:225:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11267:301:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11313:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11322:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11325:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11315:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11315:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11315:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11288:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11297:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11284:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11284:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11309:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11280:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11280:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "11277:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11338:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11364:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11351:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11351:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "11342:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11408:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "11383:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11383:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11383:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11423:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "11433:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11423:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11447:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11479:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11490:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11475:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11475:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11462:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11462:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "11451:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "11528:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "11503:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11503:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11503:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11545:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "11555:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "11545:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11225:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11236:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11248:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11256:6:46",
                        "type": ""
                      }
                    ],
                    "src": "11180:388:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11628:325:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11638:22:46",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11652:1:46",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "11655:4:46"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "11648:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11648:12:46"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "11638:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11669:38:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "11699:4:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11705:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11695:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11695:12:46"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "11673:18:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11746:31:46",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "11748:27:46",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "11762:6:46"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11770:4:46",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "11758:3:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11758:17:46"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "11748:6:46"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "11726:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "11719:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11719:26:46"
                          },
                          "nodeType": "YulIf",
                          "src": "11716:61:46"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11836:111:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11857:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11864:3:46",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11869:10:46",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "11860:3:46"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11860:20:46"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11850:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11850:31:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11850:31:46"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11901:1:46",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11904:4:46",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "11894:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11894:15:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11894:15:46"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11929:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11932:4:46",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11922:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11922:15:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11922:15:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "11792:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "11815:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11823:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "11812:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11812:14:46"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "11789:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11789:38:46"
                          },
                          "nodeType": "YulIf",
                          "src": "11786:161:46"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "11608:4:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "11617:6:46",
                        "type": ""
                      }
                    ],
                    "src": "11573:380:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11990:95:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12007:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12014:3:46",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12019:10:46",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12010:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12010:20:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12000:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12000:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12000:31:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12047:1:46",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12050:4:46",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12040:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12040:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12040:15:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12071:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12074:4:46",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "12064:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12064:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12064:15:46"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "11958:127:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12139:79:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12149:17:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12161:1:46"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12164:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12157:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12157:9:46"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "12149:4:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12190:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12192:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12192:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12192:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "12181:4:46"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12187:1:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12178:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12178:11:46"
                          },
                          "nodeType": "YulIf",
                          "src": "12175:37:46"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12121:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12124:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "12130:4:46",
                        "type": ""
                      }
                    ],
                    "src": "12090:128:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12270:125:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12280:20:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12290:10:46",
                            "type": "",
                            "value": "0xffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12284:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12309:34:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "12324:1:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12327:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12320:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12320:10:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "12336:1:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12339:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12332:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12332:10:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12316:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12316:27:46"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "12309:3:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12367:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12369:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12369:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12369:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "12358:3:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12363:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12355:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12355:11:46"
                          },
                          "nodeType": "YulIf",
                          "src": "12352:37:46"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12253:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12256:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "12262:3:46",
                        "type": ""
                      }
                    ],
                    "src": "12223:172:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12432:95:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12449:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12456:3:46",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12461:10:46",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12452:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12452:20:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12442:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12442:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12442:31:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12489:1:46",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12492:4:46",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12482:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12482:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12482:15:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12513:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12516:4:46",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "12506:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12506:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12506:15:46"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "12400:127:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12578:155:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12588:20:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12598:10:46",
                            "type": "",
                            "value": "0xffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12592:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12617:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "12636:5:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12643:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12632:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12632:14:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "12621:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12674:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12676:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12676:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12676:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "12661:7:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "12670:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "12658:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12658:15:46"
                          },
                          "nodeType": "YulIf",
                          "src": "12655:41:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12705:22:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "12716:7:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12725:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12712:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12712:15:46"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "12705:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "12560:5:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "12570:3:46",
                        "type": ""
                      }
                    ],
                    "src": "12532:201:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12895:218:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12905:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12917:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12928:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12913:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12913:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12905:4:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12940:29:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12958:3:46",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12963:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "12954:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12954:11:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12967:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12950:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12950:19:46"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "12944:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12985:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "13000:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "13008:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12996:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12996:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12978:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12978:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12978:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13032:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13043:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13028:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13028:18:46"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "13048:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13021:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13021:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13021:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13075:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13086:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13071:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13071:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "13095:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "13103:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "13091:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13091:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13064:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13064:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13064:43:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12848:9:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "12859:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12867:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12875:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12886:4:46",
                        "type": ""
                      }
                    ],
                    "src": "12738:375:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13292:169:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13309:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13320:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13302:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13302:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13302:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13343:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13354:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13339:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13339:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13359:2:46",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13332:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13332:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13332:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13382:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13393:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13378:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13378:18:46"
                              },
                              {
                                "hexValue": "5472616e73616374696f6e20746f6f206f6c64",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13398:21:46",
                                "type": "",
                                "value": "Transaction too old"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13371:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13371:49:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13371:49:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13429:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13441:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13452:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13437:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13437:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13429:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13269:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13283:4:46",
                        "type": ""
                      }
                    ],
                    "src": "13118:343:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13514:115:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13524:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "13546:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "13533:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13533:20:46"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "13524:5:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13607:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13616:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13619:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13609:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13609:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13609:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13575:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "13586:5:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13593:10:46",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "13582:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13582:22:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "13572:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13572:33:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "13565:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13565:41:46"
                          },
                          "nodeType": "YulIf",
                          "src": "13562:61:46"
                        }
                      ]
                    },
                    "name": "abi_decode_uint32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "13493:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13504:5:46",
                        "type": ""
                      }
                    ],
                    "src": "13466:163:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13703:115:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13749:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13758:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13761:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13751:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13751:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13751:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13724:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13733:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "13720:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13720:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13745:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "13716:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13716:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "13713:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13774:38:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13802:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint32",
                              "nodeType": "YulIdentifier",
                              "src": "13784:17:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13784:28:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "13774:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13669:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "13680:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13692:6:46",
                        "type": ""
                      }
                    ],
                    "src": "13634:184:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13978:235:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13988:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14000:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14011:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13996:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13996:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13988:4:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14023:29:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14041:3:46",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14046:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14037:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14037:11:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14050:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "14033:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14033:19:46"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "14027:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14068:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "14083:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14091:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14079:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14079:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14061:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14061:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14061:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14115:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14126:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14111:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14111:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14135:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "14143:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14131:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14131:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14104:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14104:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14104:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14167:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14178:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14163:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14163:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "14187:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14195:10:46",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14183:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14183:23:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14156:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14156:51:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14156:51:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint32__to_t_address_t_address_t_uint32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13931:9:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "13942:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "13950:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "13958:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13969:4:46",
                        "type": ""
                      }
                    ],
                    "src": "13823:390:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14299:170:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14345:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14354:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14357:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14347:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14347:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14347:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14320:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14329:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14316:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14316:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14341:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14312:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14312:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "14309:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14370:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14389:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14383:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14383:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "14374:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14433:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "14408:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14408:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14408:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14448:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14458:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14448:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14265:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14276:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14288:6:46",
                        "type": ""
                      }
                    ],
                    "src": "14218:251:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14555:170:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14601:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14610:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14613:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14603:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14603:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14603:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14576:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14585:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14572:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14572:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14597:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14568:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14568:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "14565:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14626:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14645:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14639:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14639:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "14630:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14689:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "14664:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14664:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14664:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14704:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14714:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14704:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint160_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14521:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14532:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14544:6:46",
                        "type": ""
                      }
                    ],
                    "src": "14474:251:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14809:198:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14855:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14864:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14867:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14857:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14857:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14857:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "14830:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14839:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "14826:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14826:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14851:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "14822:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14822:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "14819:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14880:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14899:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14893:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14893:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "14884:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14961:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14970:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14973:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "14963:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14963:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14963:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14931:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14949:1:46",
                                        "type": "",
                                        "value": "2"
                                      },
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "14952:5:46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "signextend",
                                      "nodeType": "YulIdentifier",
                                      "src": "14938:10:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14938:20:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "14928:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14928:31:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "14921:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14921:39:46"
                          },
                          "nodeType": "YulIf",
                          "src": "14918:59:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14986:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "14996:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "14986:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_int24_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14775:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "14786:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14798:6:46",
                        "type": ""
                      }
                    ],
                    "src": "14730:277:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15195:288:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15205:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15217:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15228:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15213:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15213:19:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15205:4:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "15241:29:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15259:3:46",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15264:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "15255:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15255:11:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15268:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "15251:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15251:19:46"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "15245:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15286:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "15301:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15309:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15297:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15297:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15279:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15279:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15279:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15333:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15344:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15329:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15329:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15353:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15361:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15349:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15349:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15322:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15322:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15322:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15385:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15396:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15381:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15381:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "15405:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15413:10:46",
                                    "type": "",
                                    "value": "0xffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15401:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15401:23:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15374:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15374:51:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15374:51:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15445:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15456:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15441:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15441:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nodeType": "YulIdentifier",
                                    "src": "15465:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15473:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15461:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15461:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15434:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15434:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15434:43:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint32_t_address__to_t_address_t_address_t_uint32_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15140:9:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "15151:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "15159:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "15167:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15175:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15186:4:46",
                        "type": ""
                      }
                    ],
                    "src": "15012:471:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15663:252:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15680:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "15695:6:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "15711:3:46",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "15716:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "15707:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15707:11:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15720:1:46",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "15703:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15703:19:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15691:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15691:32:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15673:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15673:51:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15673:51:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15744:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15755:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15740:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15740:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "15764:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15772:34:46",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "15760:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15760:47:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15733:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15733:75:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15733:75:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15828:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15839:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15824:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15824:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15844:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15817:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15817:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15817:30:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15856:53:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "15882:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15894:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15905:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15890:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15890:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "15864:17:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15864:45:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15856:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint128_t_bytes_memory_ptr__to_t_address_t_uint128_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15616:9:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "15627:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "15635:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15643:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15654:4:46",
                        "type": ""
                      }
                    ],
                    "src": "15488:427:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16018:147:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16064:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16073:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16076:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16066:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16066:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16066:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "16039:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16048:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "16035:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16035:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16060:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "16031:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16031:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "16028:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16089:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16105:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16099:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16099:16:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "16089:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16124:35:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16144:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16155:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16140:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16140:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16134:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16134:25:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "16124:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15976:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "15987:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15999:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16007:6:46",
                        "type": ""
                      }
                    ],
                    "src": "15920:245:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16217:88:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16248:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "16250:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16250:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16250:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "16233:5:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16244:1:46",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "16240:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16240:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "16230:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16230:17:46"
                          },
                          "nodeType": "YulIf",
                          "src": "16227:43:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16279:20:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "16290:5:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16297:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16286:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16286:13:46"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "16279:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "16199:5:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "16209:3:46",
                        "type": ""
                      }
                    ],
                    "src": "16170:135:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16370:132:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16380:22:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "16395:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16389:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16389:13:46"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "16380:5:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16480:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16489:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16492:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16482:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16482:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16482:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "16424:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "16435:5:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16442:34:46",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "16431:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16431:46:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "16421:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16421:57:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "16414:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16414:65:46"
                          },
                          "nodeType": "YulIf",
                          "src": "16411:85:46"
                        }
                      ]
                    },
                    "name": "abi_decode_uint128_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "16349:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "16360:5:46",
                        "type": ""
                      }
                    ],
                    "src": "16310:192:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16656:353:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "16703:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16712:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "16715:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "16705:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "16705:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "16705:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "16677:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16686:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "16673:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16673:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16698:3:46",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "16669:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16669:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "16666:53:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16728:50:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16768:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint128_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "16738:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16738:40:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "16728:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16787:35:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16807:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16818:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16803:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16803:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16797:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16797:25:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "16787:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16831:35:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16851:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16862:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16847:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16847:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "16841:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16841:25:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "16831:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16875:59:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16919:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16930:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16915:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16915:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint128_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "16885:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16885:49:46"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "16875:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16943:60:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16987:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16998:3:46",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16983:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16983:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint128_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "16953:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16953:50:46"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "16943:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint128t_uint256t_uint256t_uint128t_uint128_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16590:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "16601:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16613:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16621:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "16629:6:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "16637:6:46",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "16645:6:46",
                        "type": ""
                      }
                    ],
                    "src": "16507:502:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17094:198:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17140:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17149:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17152:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17142:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17142:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17142:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17115:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17124:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17111:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17111:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17136:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17107:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17107:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "17104:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17165:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17184:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17178:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17178:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "17169:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17246:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17255:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17258:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "17248:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17248:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17248:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "17216:5:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "17227:5:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17234:8:46",
                                        "type": "",
                                        "value": "0xffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "17223:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17223:20:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "17213:2:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17213:31:46"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "17206:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17206:39:46"
                          },
                          "nodeType": "YulIf",
                          "src": "17203:59:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17271:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "17281:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "17271:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint24_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17060:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17071:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17083:6:46",
                        "type": ""
                      }
                    ],
                    "src": "17014:278:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17471:162:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17488:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17499:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17481:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17481:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17481:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17522:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17533:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17518:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17518:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17538:2:46",
                                "type": "",
                                "value": "12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17511:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17511:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17511:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17561:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17572:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17557:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17557:18:46"
                              },
                              {
                                "hexValue": "4e6f7420617070726f766564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17577:14:46",
                                "type": "",
                                "value": "Not approved"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17550:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17550:42:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17550:42:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17601:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17613:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17624:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17609:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17609:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17601:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17448:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17462:4:46",
                        "type": ""
                      }
                    ],
                    "src": "17297:336:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17739:117:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17749:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17761:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17772:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17757:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17757:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17749:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17791:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "17806:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17814:34:46",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17802:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17802:47:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17784:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17784:66:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17784:66:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint128__to_t_uint128__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17708:9:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17719:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17730:4:46",
                        "type": ""
                      }
                    ],
                    "src": "17638:218:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17909:149:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17919:44:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17929:34:46",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "17923:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17972:34:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "17987:1:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17990:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17983:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17983:10:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "17999:1:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18002:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17995:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17995:10:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17979:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17979:27:46"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "17972:3:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18030:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "18032:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18032:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18032:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "18021:3:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "18026:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "18018:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18018:11:46"
                          },
                          "nodeType": "YulIf",
                          "src": "18015:37:46"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint128",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "17892:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "17895:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "17901:3:46",
                        "type": ""
                      }
                    ],
                    "src": "17861:197:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18220:259:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18230:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18242:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18253:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18238:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18238:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18230:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18272:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "18287:6:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18303:3:46",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "18308:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "18299:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "18299:11:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "18312:1:46",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "18295:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "18295:19:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18283:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18283:32:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18265:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18265:51:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18265:51:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18325:44:46",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18335:34:46",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "18329:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18389:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18400:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18385:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18385:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18409:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18417:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18405:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18405:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18378:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18378:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18378:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18441:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18452:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18437:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18437:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "18461:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "18469:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "18457:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18457:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18430:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18430:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18430:43:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint128_t_uint128__to_t_address_t_uint128_t_uint128__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18173:9:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "18184:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18192:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18200:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18211:4:46",
                        "type": ""
                      }
                    ],
                    "src": "18063:416:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18582:195:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18628:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18637:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18640:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18630:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18630:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18630:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "18603:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18612:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18599:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18599:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18624:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "18595:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18595:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "18592:52:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18653:50:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18693:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint128_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "18663:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18663:40:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "18653:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18712:59:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18756:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18767:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18752:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18752:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint128_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "18722:29:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18722:49:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "18712:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint128t_uint128_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18540:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18551:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18563:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18571:6:46",
                        "type": ""
                      }
                    ],
                    "src": "18484:293:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18926:482:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "18973:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18982:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18985:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "18975:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "18975:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "18975:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "18947:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18956:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "18943:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18943:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18968:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "18939:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18939:33:46"
                          },
                          "nodeType": "YulIf",
                          "src": "18936:53:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18998:36:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19024:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "19011:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19011:23:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "19002:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "19068:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "19043:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19043:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19043:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19083:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "19093:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "19083:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19107:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19139:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19150:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19135:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19135:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "19122:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19122:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "19111:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "19188:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "19163:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19163:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19163:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19205:17:46",
                          "value": {
                            "name": "value_1",
                            "nodeType": "YulIdentifier",
                            "src": "19215:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "19205:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19231:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19263:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19274:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19259:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19259:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_uint32",
                              "nodeType": "YulIdentifier",
                              "src": "19241:17:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19241:37:46"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "19231:6:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19287:47:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19319:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19330:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19315:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19315:18:46"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "19302:12:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19302:32:46"
                          },
                          "variables": [
                            {
                              "name": "value_2",
                              "nodeType": "YulTypedName",
                              "src": "19291:7:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value_2",
                                "nodeType": "YulIdentifier",
                                "src": "19368:7:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "19343:24:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19343:33:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19343:33:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19385:17:46",
                          "value": {
                            "name": "value_2",
                            "nodeType": "YulIdentifier",
                            "src": "19395:7:46"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "19385:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_payablet_address_payablet_uint32t_address_payable",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18868:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "18879:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18891:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18899:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "18907:6:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "18915:6:46",
                        "type": ""
                      }
                    ],
                    "src": "18782:626:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19587:173:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19604:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19615:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19597:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19597:21:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19597:21:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19638:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19649:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19634:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19634:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19654:2:46",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19627:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19627:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19627:30:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19677:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19688:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19673:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19673:18:46"
                              },
                              {
                                "hexValue": "496e76616c69642063616c6c6261636b2063616c6c6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19693:25:46",
                                "type": "",
                                "value": "Invalid callback caller"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19666:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19666:53:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19666:53:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19728:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19740:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19751:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19736:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19736:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19728:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2e5cf285e34dd20513f4f66f8b885ecee7c668a3b2fe9a226ced0c251b56c512__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19564:9:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19578:4:46",
                        "type": ""
                      }
                    ],
                    "src": "19413:347:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19922:218:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19932:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19944:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19955:2:46",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19940:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19940:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19932:4:46"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19967:29:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19985:3:46",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19990:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "19981:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19981:11:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19994:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "19977:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19977:19:46"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "19971:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20012:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20027:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20035:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20023:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20023:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20005:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20005:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20005:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20059:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20070:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20055:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20055:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20079:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20087:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20075:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20075:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20048:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20048:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20048:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20111:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20122:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20107:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20107:18:46"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "20127:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20100:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20100:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20100:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19875:9:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "19886:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "19894:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19902:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19913:4:46",
                        "type": ""
                      }
                    ],
                    "src": "19765:375:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20223:167:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20269:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20278:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20281:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "20271:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20271:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20271:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "20244:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20253:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "20240:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20240:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20265:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "20236:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20236:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "20233:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20294:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20313:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20307:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20307:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "20298:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "20354:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bool",
                              "nodeType": "YulIdentifier",
                              "src": "20332:21:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20332:28:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20332:28:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20369:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "20379:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "20369:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20189:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "20200:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20212:6:46",
                        "type": ""
                      }
                    ],
                    "src": "20145:245:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20582:309:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20592:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20612:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20606:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20606:13:46"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "20596:6:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "20667:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20675:4:46",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20663:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20663:17:46"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20682:3:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "20687:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "20628:34:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20628:66:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20628:66:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20703:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20720:3:46"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "20725:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20716:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20716:16:46"
                          },
                          "variables": [
                            {
                              "name": "end_1",
                              "nodeType": "YulTypedName",
                              "src": "20707:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20741:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "20763:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20757:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20757:13:46"
                          },
                          "variables": [
                            {
                              "name": "length_1",
                              "nodeType": "YulTypedName",
                              "src": "20745:8:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20818:6:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20826:4:46",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20814:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20814:17:46"
                              },
                              {
                                "name": "end_1",
                                "nodeType": "YulIdentifier",
                                "src": "20833:5:46"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "20840:8:46"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "20779:34:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20779:70:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20779:70:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20858:27:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "end_1",
                                "nodeType": "YulIdentifier",
                                "src": "20869:5:46"
                              },
                              {
                                "name": "length_1",
                                "nodeType": "YulIdentifier",
                                "src": "20876:8:46"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20865:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20865:20:46"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "20858:3:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "20550:3:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20555:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20563:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "20574:3:46",
                        "type": ""
                      }
                    ],
                    "src": "20395:496:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21099:286:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21109:29:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21127:3:46",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21132:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "21123:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21123:11:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21136:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "21119:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21119:19:46"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "21113:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21154:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "21169:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21177:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21165:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21165:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21147:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21147:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21147:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21201:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21212:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21197:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21197:18:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21221:6:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21229:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21217:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21217:15:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21190:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21190:43:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21190:43:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21253:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21264:2:46",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21249:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21249:18:46"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "21269:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21242:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21242:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21242:34:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21296:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21307:2:46",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21292:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21292:18:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21312:3:46",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21285:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21285:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21285:31:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21325:54:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "21351:6:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21363:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21374:3:46",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21359:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21359:19:46"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_string",
                              "nodeType": "YulIdentifier",
                              "src": "21333:17:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21333:46:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21325:4:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21044:9:46",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "21055:6:46",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "21063:6:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21071:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21079:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21090:4:46",
                        "type": ""
                      }
                    ],
                    "src": "20896:489:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21470:169:46",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21516:16:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21525:1:46",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21528:1:46",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "21518:6:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21518:12:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21518:12:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "21491:7:46"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21500:9:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21487:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21487:23:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21512:2:46",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "21483:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21483:32:46"
                          },
                          "nodeType": "YulIf",
                          "src": "21480:52:46"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21541:29:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21560:9:46"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "21554:5:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21554:16:46"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "21545:5:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "21603:5:46"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "21579:23:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21579:30:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21579:30:46"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21618:15:46",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "21628:5:46"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "21618:6:46"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21436:9:46",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "21447:7:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21459:6:46",
                        "type": ""
                      }
                    ],
                    "src": "21390:249:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21676:95:46",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21693:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21700:3:46",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21705:10:46",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "21696:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21696:20:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21686:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21686:31:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21686:31:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21733:1:46",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21736:4:46",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21726:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21726:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21726:15:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21757:1:46",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21760:4:46",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "21750:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21750:15:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21750:15:46"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "21644:127:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21905:145:46",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21915:26:46",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21927:9:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21938:2:46",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21923:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21923:18:46"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21915:4:46"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21957:9:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "21972:6:46"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21988:3:46",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21993:1:46",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "21984:3:46"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "21984:11:46"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "21997:1:46",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "21980:3:46"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21980:19:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21968:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21968:32:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21950:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21950:51:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21950:51:46"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22021:9:46"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22032:2:46",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22017:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22017:18:46"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22037:6:46"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22010:6:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22010:34:46"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22010:34:46"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21866:9:46",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "21877:6:46",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "21885:6:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21896:4:46",
                        "type": ""
                      }
                    ],
                    "src": "21776:274:46"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22104:136:46",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22114:29:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22132:3:46",
                                    "type": "",
                                    "value": "160"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22137:1:46",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "22128:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22128:11:46"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22141:1:46",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "22124:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22124:19:46"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "22118:2:46",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22152:35:46",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "22168:1:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22171:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22164:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22164:10:46"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "22180:1:46"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22183:2:46"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "22176:3:46"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22176:10:46"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "22160:3:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22160:27:46"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "22152:4:46"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22212:22:46",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "22214:16:46"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22214:18:46"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22214:18:46"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "22202:4:46"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "22208:2:46"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "22199:2:46"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22199:12:46"
                          },
                          "nodeType": "YulIf",
                          "src": "22196:38:46"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "22086:1:46",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "22089:1:46",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "22095:4:46",
                        "type": ""
                      }
                    ],
                    "src": "22055:185:46"
                  }
                ]
              },
              "contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_address(value, pos)\n    {\n        mstore(pos, and(value, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_uint32(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffff))\n    }\n    function abi_encode_uint24(value, pos)\n    {\n        mstore(pos, and(value, 0xffffff))\n    }\n    function abi_encode_uint128(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_int24(value, pos)\n    {\n        mstore(pos, signextend(2, value))\n    }\n    function abi_encode_tuple_t_array$_t_struct$_PositionInfo_$10401_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_PositionInfo_$10401_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            mstore(pos, mload(_3))\n            let memberValue0 := mload(add(_3, _1))\n            abi_encode_address(memberValue0, add(pos, _1))\n            let memberValue0_1 := mload(add(_3, _2))\n            abi_encode_address(memberValue0_1, add(pos, _2))\n            let _4 := 0x60\n            let memberValue0_2 := mload(add(_3, _4))\n            abi_encode_address(memberValue0_2, add(pos, _4))\n            let _5 := 0x80\n            let memberValue0_3 := mload(add(_3, _5))\n            abi_encode_uint32(memberValue0_3, add(pos, _5))\n            let _6 := 0xa0\n            let memberValue0_4 := mload(add(_3, _6))\n            abi_encode_uint24(memberValue0_4, add(pos, _6))\n            let _7 := 0xc0\n            let memberValue0_5 := mload(add(_3, _7))\n            abi_encode_uint128(memberValue0_5, add(pos, _7))\n            let _8 := 0xe0\n            let memberValue0_6 := mload(add(_3, _8))\n            abi_encode_int24(memberValue0_6, add(pos, _8))\n            let _9 := 0x0100\n            let memberValue0_7 := mload(add(_3, _9))\n            abi_encode_int24(memberValue0_7, add(pos, _9))\n            let _10 := 0x0120\n            let memberValue0_8 := mload(add(_3, _10))\n            abi_encode_uint128(memberValue0_8, add(pos, _10))\n            let _11 := 0x0140\n            let memberValue0_9 := mload(add(_3, _11))\n            abi_encode_uint128(memberValue0_9, add(pos, _11))\n            let _12 := 0x0160\n            mstore(add(pos, _12), mload(add(_3, _12)))\n            let _13 := 0x0180\n            mstore(add(pos, _13), mload(add(_3, _13)))\n            pos := add(pos, 0x01a0)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_struct$_MintParams_$10423_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := headStart\n    }\n    function abi_encode_tuple_t_uint256_t_uint128_t_uint256_t_uint256__to_t_uint256_t_uint128_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_address_t_address_t_uint32_t_uint24_t_uint128_t_int24_t_int24_t_uint128_t_uint128_t_uint256_t_uint256__to_t_uint256_t_address_t_address_t_address_t_uint32_t_uint24_t_uint128_t_int24_t_int24_t_uint128_t_uint128_t_uint256_t_uint256__fromStack_reversed(headStart, value12, value11, value10, value9, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 416)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), and(value4, 0xffffffff))\n        mstore(add(headStart, 160), and(value5, 0xffffff))\n        abi_encode_uint128(value6, add(headStart, 192))\n        abi_encode_int24(value7, add(headStart, 224))\n        abi_encode_int24(value8, add(headStart, 256))\n        abi_encode_uint128(value9, add(headStart, 288))\n        abi_encode_uint128(value10, add(headStart, 320))\n        mstore(add(headStart, 352), value11)\n        mstore(add(headStart, 384), value12)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value2 := add(_2, 32)\n        value3 := length\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_encode_tuple_t_contract$_IPoolManager_$10365__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint32(x, y) -> sum\n    {\n        let _1 := 0xffffffff\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint32(value) -> ret\n    {\n        let _1 := 0xffffffff\n        let value_1 := and(value, _1)\n        if eq(value_1, _1) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_c2621685b6a86291a4533558eb72fba04db12a0363db47624d86d9bbb608d293__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Transaction too old\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint32(headStart)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint32__to_t_address_t_address_t_uint32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffffff))\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint160_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_int24_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, signextend(2, value))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint32_t_address__to_t_address_t_address_t_uint32_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffffff))\n        mstore(add(headStart, 96), and(value3, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint128_t_bytes_memory_ptr__to_t_address_t_uint128_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string(value2, add(headStart, 96))\n    }\n    function abi_decode_tuple_t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_decode_uint128_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint128t_uint256t_uint256t_uint128t_uint128_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_uint128_fromMemory(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := abi_decode_uint128_fromMemory(add(headStart, 96))\n        value4 := abi_decode_uint128_fromMemory(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_uint24_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_70356c467a9713064077b7fa0ff1a074c93b1f7c48415be181b9cd799b628361__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"Not approved\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint128__to_t_uint128__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffff))\n    }\n    function checked_add_t_uint128(x, y) -> sum\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint128_t_uint128__to_t_address_t_uint128_t_uint128__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        let _1 := 0xffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_decode_tuple_t_uint128t_uint128_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_uint128_fromMemory(headStart)\n        value1 := abi_decode_uint128_fromMemory(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address_payablet_address_payablet_uint32t_address_payable(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := abi_decode_uint32(add(headStart, 64))\n        let value_2 := calldataload(add(headStart, 96))\n        validator_revert_address(value_2)\n        value3 := value_2\n    }\n    function abi_encode_tuple_t_stringliteral_2e5cf285e34dd20513f4f66f8b885ecee7c668a3b2fe9a226ced0c251b56c512__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Invalid callback caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint160(x, y) -> diff\n    {\n        let _1 := sub(shl(160, 1), 1)\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n}",
              "id": 46,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "60806040526004361061012a5760003560e01c80636352211e116100ab5780639f382e9b1161006f5780639f382e9b14610413578063a22cb46514610433578063b88d4fde14610453578063c87b56dd14610473578063dc4c90d314610493578063e985e9c5146104b357600080fd5b80636352211e146102c557806370a08231146102e55780638d3c100a1461031357806395d89b411461033357806399fbab881461034857600080fd5b806323b872dd116100f257806323b872dd146102025780632c6cc6c71461022257806342842e0e1461025d57806342966c681461027d5780635e01eb5a146102b257600080fd5b806301ffc9a71461012f57806306fdde0314610164578063081812fc14610186578063095ea7b3146101be57806318f56a0a146101e0575b600080fd5b34801561013b57600080fd5b5061014f61014a366004612427565b6104d3565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b50610179610525565b60405161015b9190612494565b34801561019257600080fd5b506101a66101a13660046124a7565b6105b7565b6040516001600160a01b03909116815260200161015b565b3480156101ca57600080fd5b506101de6101d93660046124d5565b6105e0565b005b3480156101ec57600080fd5b506101f56105ef565b60405161015b9190612501565b34801561020e57600080fd5b506101de61021d366004612614565b6107f6565b610235610230366004612655565b610886565b604080519485526001600160801b03909316602085015291830152606082015260800161015b565b34801561026957600080fd5b506101de610278366004612614565b61103b565b34801561028957600080fd5b5061029d6102983660046124a7565b61105b565b6040805192835260208301919091520161015b565b3480156102be57600080fd5b50336101a6565b3480156102d157600080fd5b506101a66102e03660046124a7565b611361565b3480156102f157600080fd5b5061030561030036600461266d565b61136c565b60405190815260200161015b565b34801561031f57600080fd5b5061029d61032e36600461268a565b6113b4565b34801561033f57600080fd5b5061017961156d565b34801561035457600080fd5b506103fa6103633660046124a7565b600860205260009081526040902080546001820154600280840154600385015460048601546005870154600688015460079098015496976001600160a01b039687169794871696841695600160a01b850463ffffffff1695600160c01b90950462ffffff16946001600160801b0380861695600160801b808204850b96600160981b90920490940b9482821694909104909116918d565b60405161015b9d9c9b9a999897969594939291906126ba565b34801561041f57600080fd5b506101de61042e366004612763565b61157c565b34801561043f57600080fd5b506101de61044e3660046127f1565b611777565b34801561045f57600080fd5b506101de61046e366004612835565b611782565b34801561047f57600080fd5b5061017961048e3660046124a7565b61179a565b34801561049f57600080fd5b506006546101a6906001600160a01b031681565b3480156104bf57600080fd5b5061014f6104ce366004612915565b61180f565b60006001600160e01b031982166380ac58cd60e01b148061050457506001600160e01b03198216635b5e139f60e01b145b8061051f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053490612943565b80601f016020809104026020016040519081016040528092919081815260200182805461056090612943565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b60006105c28261183d565b506000828152600460205260409020546001600160a01b031661051f565b6105eb828233611876565b5050565b60606001600754610600919061298d565b67ffffffffffffffff8111156106185761061861281f565b6040519080825280602002602001820160405280156106af57816020015b604080516101a08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282526000199092019101816106365790505b50905060005b60016007546106c4919061298d565b8163ffffffff1610156107f257600860006106e08360016129a0565b63ffffffff9081168252602080830193909352604091820160002082516101a0810184528154815260018201546001600160a01b039081169582019590955260028083015486169482019490945260038201549485166060820152600160a01b850483166080820152600160c01b90940462ffffff1660a085015260048101546001600160801b0380821660c0870152600160801b808304860b60e0880152600160981b90920490940b61010086015260058201548085166101208701520490921661014084015260068201546101608401526007909101546101808301528351849184169081106107d4576107d46129c4565b602002602001018190525080806107ea906129da565b9150506106b5565b5090565b6001600160a01b03821661082557604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610832838333611883565b9050836001600160a01b0316816001600160a01b031614610880576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161081c565b50505050565b600080808060c0850135428110156108d65760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015260640161081c565b6006546000906001600160a01b03166371c54fc96108f760208a018a61266d565b61090760408b0160208c0161266d565b61091760608c0160408d01612a11565b6040518463ffffffff1660e01b815260040161093593929190612a2c565b602060405180830381865afa158015610952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109769190612a55565b905060008190506000816001600160a01b0316638db791d26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612a55565b90506000610a4f836001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190612a72565b61197c565b90506000610a94846001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b9050610aab8383838e606001358f60800135611c37565b98506000610abc60208d018d61266d565b610acc60408e0160208f0161266d565b8d6040016020810190610adf9190612a11565b604080516001600160a01b039485166020820152939092169183019190915263ffffffff16606082015233608082015260a00160408051601f19818403018152908290526392f026ad60e01b825291506001600160a01b038616906392f026ad90610b529030908e908690600401612a95565b60408051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190612ac8565b9099509750610bc8610bac60c08e0160a08f0161266d565b60078054906000610bbc83612aec565b919050559c508c611cfb565b6040516316c1973960e01b815230600482015260009081906001600160a01b038816906316c197399060240160a060405180830381865afa158015610c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c359190612b1c565b50509250925050604051806101a001604052808e81526020018f60a0016020810190610c61919061266d565b6001600160a01b031681526020018f6000016020810190610c82919061266d565b6001600160a01b031681526020018f6020016020810190610ca3919061266d565b6001600160a01b031681526020018f6040016020810190610cc49190612a11565b63ffffffff168152602001886001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190612b73565b62ffffff1681526020018d6001600160801b03168152602001886001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612a72565b60020b8152602001886001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612a72565b60020b815260200160006001600160801b0316815260200160006001600160801b0316815260200183815260200182815250600860008f81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160030160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160186101000a81548162ffffff021916908362ffffff16021790555060c08201518160040160006101000a8154816001600160801b0302191690836001600160801b0316021790555060e08201518160040160106101000a81548162ffffff021916908360020b62ffffff1602179055506101008201518160040160136101000a81548162ffffff021916908360020b62ffffff1602179055506101208201518160050160006101000a8154816001600160801b0302191690836001600160801b031602179055506101408201518160050160106101000a8154816001600160801b0302191690836001600160801b03160217905550610160820151816006015561018082015181600701559050505050505050505050509193509193565b61105683838360405180602001604052806000815250611782565b505050565b60008082600061106a82611361565b9050611077813384611d60565b6110b25760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000858152600860205260408082206004808201546006546002840154600385015495516371c54fc960e01b815294966001600160801b039093169592946001600160a01b03928316946371c54fc9946111229493841693811692600160a01b90910463ffffffff169101612a2c565b602060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612a55565b6040516390bc169360e01b81526001600160801b038416600482015290915081906001600160a01b038216906390bc16939060240160408051808303816000875af11580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190612ac8565b6040516316c1973960e01b8152306004820152919950975060009081906001600160a01b038416906316c197399060240160a060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612b1c565b5050925092505061127e866006015483611266919061298d565b60048801546001600160801b0316600160801b611dc6565b611288908b612b98565b6005870180546000906112a59084906001600160801b0316612b98565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506112dc866007015482611266919061298d565b6112e6908a612b98565b60058701805460109061130a908490600160801b90046001600160801b0316612b98565b82546001600160801b039182166101009390930a9283029190920219909116179055506006860191909155600785015550505060040180546fffffffffffffffffffffffffffffffff191690555091939092509050565b600061051f8261183d565b60006001600160a01b038216611398576040516322718ad960e21b81526000600482015260240161081c565b506001600160a01b031660009081526003602052604090205490565b6000808360006113c382611361565b90506113d0813384611d60565b61140b5760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000868152600860205260408082206006546002820154600383015493516371c54fc960e01b81529294936001600160a01b03928316936371c54fc99361146a9381169290811691600160a01b90910463ffffffff1690600401612a2c565b602060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab9190612a55565b60058301546040516360d49d5360e01b81526001600160a01b038a811660048301526001600160801b038084166024840152600160801b90930490921660448201529192508291908216906360d49d539060640160408051808303816000875af115801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190612bb8565b600060058601556001600160801b03918216985016955061156189611e68565b50505050509250929050565b60606001805461053490612943565b600080808061158d85870187612beb565b6006546040516371c54fc960e01b815294985092965090945092506000916001600160a01b03909116906371c54fc9906115cf90889088908890600401612a2c565b602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190612a55565b90506001600160a01b038116331461166a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063616c6c6261636b2063616c6c6572000000000000000000604482015260640161081c565b88156116eb576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018b90528616906323b872dd906064016020604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190612c45565b505b871561176c576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018a90528516906323b872dd906064016020604051808303816000875af1158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612c45565b505b505050505050505050565b6105eb338383611ea3565b61178d8484846107f6565b6108803385858585611f42565b60606117a58261183d565b5060006117bd60408051602081019091526000815290565b905060008151116117dd5760405180602001604052806000815250611808565b806117e78461206d565b6040516020016117f8929190612c62565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260408120546001600160a01b03168061051f57604051637e27328960e01b81526004810184905260240161081c565b6110568383836001612100565b6000828152600260205260408120546001600160a01b03908116908316156118b0576118b0818486612206565b6001600160a01b038116156118ee576118cd600085600080612100565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561191d576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b60020b600060ff82901d80830118620d89e88111156119a6576119a66345c3193d60e11b8461226a565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b1860028216156119e2576ffff97272373d413259a46990580e213a0260801c5b6004821615611a01576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611a20576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611a3f576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611a5e576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a7d576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611a9c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611abc576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611adc576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611afc576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611b1c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611b3c576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611b5c576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b7c576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611b9c576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611bbd576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611bdd576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611bfc576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611c19576b048a170391f7dc42444e8fa20260801c5b6000841315611c2757600019045b63ffffffff0160201c9392505050565b6000836001600160a01b0316856001600160a01b03161115611c57579293925b846001600160a01b0316866001600160a01b031611611c8257611c7b85858561227b565b9050611cf2565b836001600160a01b0316866001600160a01b03161015611ce4576000611ca987868661227b565b90506000611cb88789866122e5565b9050806001600160801b0316826001600160801b031610611cd95780611cdb565b815b92505050611cf2565b611cef8585846122e5565b90505b95945050505050565b6001600160a01b038216611d2557604051633250574960e11b81526000600482015260240161081c565b6000611d3383836000611883565b90506001600160a01b03811615611056576040516339e3563760e11b81526000600482015260240161081c565b60006001600160a01b03831615801590611dbe5750826001600160a01b0316846001600160a01b03161480611d9a5750611d9a848461180f565b80611dbe57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b60008383028160001985870982811083820303915050808411611de857600080fd5b80600003611dfb57508290049050611808565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611e776000836000611883565b90506001600160a01b0381166105eb57604051637e27328960e01b81526004810183905260240161081c565b6001600160a01b038216611ed557604051630b61174360e31b81526001600160a01b038316600482015260240161081c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561206657604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611f84908890889087908790600401612c91565b6020604051808303816000875af1925050508015611fbf575060408051601f3d908101601f19168201909252611fbc91810190612cc4565b60015b612028573d808015611fed576040519150601f19603f3d011682016040523d82523d6000602084013e611ff2565b606091505b50805160000361202057604051633250574960e11b81526001600160a01b038516600482015260240161081c565b805160208201fd5b6001600160e01b03198116630a85bd0160e11b1461206457604051633250574960e11b81526001600160a01b038516600482015260240161081c565b505b5050505050565b6060600061207a8361231b565b600101905060008167ffffffffffffffff81111561209a5761209a61281f565b6040519080825280601f01601f1916602001820160405280156120c4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120ce57509392505050565b808061211457506001600160a01b03821615155b156121d65760006121248461183d565b90506001600160a01b038316158015906121505750826001600160a01b0316816001600160a01b031614155b80156121635750612161818461180f565b155b1561218c5760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161081c565b81156121d45783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b612211838383611d60565b611056576001600160a01b03831661223f57604051637e27328960e01b81526004810182905260240161081c565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161081c565b816000528060020b60045260246000fd5b6000826001600160a01b0316846001600160a01b0316111561229b579192915b60006122be856001600160a01b0316856001600160a01b0316600160601b611dc6565b9050611cf26122e084836122d28989612ce1565b6001600160a01b0316611dc6565b6123f3565b6000826001600160a01b0316846001600160a01b03161115612305579192915b611dbe6122e083600160601b6122d28888612ce1565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061235a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612386576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123a457662386f26fc10000830492506010015b6305f5e10083106123bc576305f5e100830492506008015b61271083106123d057612710830492506004015b606483106123e2576064830492506002015b600a831061051f5760010192915050565b806001600160801b038116811461240957600080fd5b919050565b6001600160e01b03198116811461242457600080fd5b50565b60006020828403121561243957600080fd5b81356118088161240e565b60005b8381101561245f578181015183820152602001612447565b50506000910152565b60008151808452612480816020860160208601612444565b601f01601f19169290920160200192915050565b6020815260006118086020830184612468565b6000602082840312156124b957600080fd5b5035919050565b6001600160a01b038116811461242457600080fd5b600080604083850312156124e857600080fd5b82356124f3816124c0565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561260757815180518552868101516001600160a01b0390811688870152868201518116878701526060808301519091169086015260808082015163ffffffff169086015260a08082015162ffffff169086015260c0808201516001600160801b03169086015260e080820151600281900b828801525050610100808201516125ae8288018260020b9052565b5050610120818101516001600160801b038116878301525050610140818101516001600160801b038116878301525050610160818101519086015261018090810151908501526101a0909301929085019060010161251e565b5091979650505050505050565b60008060006060848603121561262957600080fd5b8335612634816124c0565b92506020840135612644816124c0565b929592945050506040919091013590565b600060e0828403121561266757600080fd5b50919050565b60006020828403121561267f57600080fd5b8135611808816124c0565b6000806040838503121561269d57600080fd5b8235915060208301356126af816124c0565b809150509250929050565b8d81526001600160a01b038d811660208301528c811660408301528b16606082015263ffffffff8a16608082015262ffffff891660a08201526001600160801b03881660c08201526101a0810161271660e083018960020b9052565b61272661010083018860020b9052565b6001600160801b0386166101208301526001600160801b03851661014083015261016082019390935261018001529b9a5050505050505050505050565b6000806000806060858703121561277957600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561279f57600080fd5b818701915087601f8301126127b357600080fd5b8135818111156127c257600080fd5b8860208285010111156127d457600080fd5b95989497505060200194505050565b801515811461242457600080fd5b6000806040838503121561280457600080fd5b823561280f816124c0565b915060208301356126af816127e3565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561284b57600080fd5b8435612856816124c0565b93506020850135612866816124c0565b925060408501359150606085013567ffffffffffffffff8082111561288a57600080fd5b818701915087601f83011261289e57600080fd5b8135818111156128b0576128b061281f565b604051601f8201601f19908116603f011681019083821181831017156128d8576128d861281f565b816040528281528a60208487010111156128f157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561292857600080fd5b8235612933816124c0565b915060208301356126af816124c0565b600181811c9082168061295757607f821691505b60208210810361266757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561051f5761051f612977565b63ffffffff8181168382160190808211156129bd576129bd612977565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff8083168181036129f3576129f3612977565b6001019392505050565b803563ffffffff8116811461240957600080fd5b600060208284031215612a2357600080fd5b611808826129fd565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b600060208284031215612a6757600080fd5b8151611808816124c0565b600060208284031215612a8457600080fd5b81518060020b811461180857600080fd5b6001600160a01b03841681526001600160801b0383166020820152606060408201819052600090611cf290830184612468565b60008060408385031215612adb57600080fd5b505080516020909101519092909150565b600060018201612afe57612afe612977565b5060010190565b80516001600160801b038116811461240957600080fd5b600080600080600060a08688031215612b3457600080fd5b612b3d86612b05565b94506020860151935060408601519250612b5960608701612b05565b9150612b6760808701612b05565b90509295509295909350565b600060208284031215612b8557600080fd5b815162ffffff8116811461180857600080fd5b6001600160801b038181168382160190808211156129bd576129bd612977565b60008060408385031215612bcb57600080fd5b612bd483612b05565b9150612be260208401612b05565b90509250929050565b60008060008060808587031215612c0157600080fd5b8435612c0c816124c0565b93506020850135612c1c816124c0565b9250612c2a604086016129fd565b91506060850135612c3a816124c0565b939692955090935050565b600060208284031215612c5757600080fd5b8151611808816127e3565b60008351612c74818460208801612444565b835190830190612c88818360208801612444565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611cef90830184612468565b600060208284031215612cd657600080fd5b81516118088161240e565b6001600160a01b038281168282160390808211156129bd576129bd61297756fea2646970667358221220b5eac0bd7cc28c221f5137ec5579c149f2b0d5171170f604039921740181229d64736f6c63430008140033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x12A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0xAB JUMPI DUP1 PUSH4 0x9F382E9B GT PUSH2 0x6F JUMPI DUP1 PUSH4 0x9F382E9B EQ PUSH2 0x413 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x433 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x453 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x473 JUMPI DUP1 PUSH4 0xDC4C90D3 EQ PUSH2 0x493 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2E5 JUMPI DUP1 PUSH4 0x8D3C100A EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x99FBAB88 EQ PUSH2 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0x2C6CC6C7 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0x5E01EB5A EQ PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x18F56A0A EQ PUSH2 0x1E0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x2427 JUMP JUMPDEST PUSH2 0x4D3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x179 PUSH2 0x525 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x2494 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x1A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH2 0x5B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x1D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x24D5 JUMP JUMPDEST PUSH2 0x5E0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F5 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP2 SWAP1 PUSH2 0x2501 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x2614 JUMP JUMPDEST PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x235 PUSH2 0x230 CALLDATASIZE PUSH1 0x4 PUSH2 0x2655 JUMP JUMPDEST PUSH2 0x886 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x15B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x2614 JUMP JUMPDEST PUSH2 0x103B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29D PUSH2 0x298 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH2 0x105B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x15B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH2 0x1A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A6 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH2 0x1361 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x305 PUSH2 0x300 CALLDATASIZE PUSH1 0x4 PUSH2 0x266D JUMP JUMPDEST PUSH2 0x136C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29D PUSH2 0x32E CALLDATASIZE PUSH1 0x4 PUSH2 0x268A JUMP JUMPDEST PUSH2 0x13B4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x179 PUSH2 0x156D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FA PUSH2 0x363 CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP1 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD PUSH1 0x4 DUP7 ADD SLOAD PUSH1 0x5 DUP8 ADD SLOAD PUSH1 0x6 DUP9 ADD SLOAD PUSH1 0x7 SWAP1 SWAP9 ADD SLOAD SWAP7 SWAP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND SWAP8 SWAP5 DUP8 AND SWAP7 DUP5 AND SWAP6 PUSH1 0x1 PUSH1 0xA0 SHL DUP6 DIV PUSH4 0xFFFFFFFF AND SWAP6 PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP6 DIV PUSH3 0xFFFFFF AND SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP7 AND SWAP6 PUSH1 0x1 PUSH1 0x80 SHL DUP1 DUP3 DIV DUP6 SIGNEXTEND SWAP7 PUSH1 0x1 PUSH1 0x98 SHL SWAP1 SWAP3 DIV SWAP1 SWAP5 SIGNEXTEND SWAP5 DUP3 DUP3 AND SWAP5 SWAP1 SWAP2 DIV SWAP1 SWAP2 AND SWAP2 DUP14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15B SWAP14 SWAP13 SWAP12 SWAP11 SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x42E CALLDATASIZE PUSH1 0x4 PUSH2 0x2763 JUMP JUMPDEST PUSH2 0x157C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x44E CALLDATASIZE PUSH1 0x4 PUSH2 0x27F1 JUMP JUMPDEST PUSH2 0x1777 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DE PUSH2 0x46E CALLDATASIZE PUSH1 0x4 PUSH2 0x2835 JUMP JUMPDEST PUSH2 0x1782 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x179 PUSH2 0x48E CALLDATASIZE PUSH1 0x4 PUSH2 0x24A7 JUMP JUMPDEST PUSH2 0x179A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1A6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14F PUSH2 0x4CE CALLDATASIZE PUSH1 0x4 PUSH2 0x2915 JUMP JUMPDEST PUSH2 0x180F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x504 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x51F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x534 SWAP1 PUSH2 0x2943 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x560 SWAP1 PUSH2 0x2943 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x5AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x582 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x590 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5C2 DUP3 PUSH2 0x183D JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x51F JUMP JUMPDEST PUSH2 0x5EB DUP3 DUP3 CALLER PUSH2 0x1876 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x7 SLOAD PUSH2 0x600 SWAP2 SWAP1 PUSH2 0x298D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x618 JUMPI PUSH2 0x618 PUSH2 0x281F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6AF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x1A0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE SWAP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x100 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x120 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x140 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x160 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x180 DUP3 ADD MSTORE DUP3 MSTORE PUSH1 0x0 NOT SWAP1 SWAP3 ADD SWAP2 ADD DUP2 PUSH2 0x636 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x1 PUSH1 0x7 SLOAD PUSH2 0x6C4 SWAP2 SWAP1 PUSH2 0x298D JUMP JUMPDEST DUP2 PUSH4 0xFFFFFFFF AND LT ISZERO PUSH2 0x7F2 JUMPI PUSH1 0x8 PUSH1 0x0 PUSH2 0x6E0 DUP4 PUSH1 0x1 PUSH2 0x29A0 JUMP JUMPDEST PUSH4 0xFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 KECCAK256 DUP3 MLOAD PUSH2 0x1A0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x2 DUP1 DUP4 ADD SLOAD DUP7 AND SWAP5 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x3 DUP3 ADD SLOAD SWAP5 DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 SHL DUP6 DIV DUP4 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xC0 SHL SWAP1 SWAP5 DIV PUSH3 0xFFFFFF AND PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP3 AND PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0x1 PUSH1 0x80 SHL DUP1 DUP4 DIV DUP7 SIGNEXTEND PUSH1 0xE0 DUP9 ADD MSTORE PUSH1 0x1 PUSH1 0x98 SHL SWAP1 SWAP3 DIV SWAP1 SWAP5 SIGNEXTEND PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD DUP1 DUP6 AND PUSH2 0x120 DUP8 ADD MSTORE DIV SWAP1 SWAP3 AND PUSH2 0x140 DUP5 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH2 0x160 DUP5 ADD MSTORE PUSH1 0x7 SWAP1 SWAP2 ADD SLOAD PUSH2 0x180 DUP4 ADD MSTORE DUP4 MLOAD DUP5 SWAP2 DUP5 AND SWAP1 DUP2 LT PUSH2 0x7D4 JUMPI PUSH2 0x7D4 PUSH2 0x29C4 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x7EA SWAP1 PUSH2 0x29DA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6B5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x825 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x832 DUP4 DUP4 CALLER PUSH2 0x1883 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x880 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0xC0 DUP6 ADD CALLDATALOAD TIMESTAMP DUP2 LT ISZERO PUSH2 0x8D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x151C985B9CD858DD1A5BDB881D1BDBC81BDB19 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x71C54FC9 PUSH2 0x8F7 PUSH1 0x20 DUP11 ADD DUP11 PUSH2 0x266D JUMP JUMPDEST PUSH2 0x907 PUSH1 0x40 DUP12 ADD PUSH1 0x20 DUP13 ADD PUSH2 0x266D JUMP JUMPDEST PUSH2 0x917 PUSH1 0x60 DUP13 ADD PUSH1 0x40 DUP14 ADD PUSH2 0x2A11 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x935 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x952 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x976 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x8DB791D2 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E1 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA4F DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x59C4F905 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA4A SWAP2 SWAP1 PUSH2 0x2A72 JUMP JUMPDEST PUSH2 0x197C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA94 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x55B812A8 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH2 0xAAB DUP4 DUP4 DUP4 DUP15 PUSH1 0x60 ADD CALLDATALOAD DUP16 PUSH1 0x80 ADD CALLDATALOAD PUSH2 0x1C37 JUMP JUMPDEST SWAP9 POP PUSH1 0x0 PUSH2 0xABC PUSH1 0x20 DUP14 ADD DUP14 PUSH2 0x266D JUMP JUMPDEST PUSH2 0xACC PUSH1 0x40 DUP15 ADD PUSH1 0x20 DUP16 ADD PUSH2 0x266D JUMP JUMPDEST DUP14 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xADF SWAP2 SWAP1 PUSH2 0x2A11 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP1 SWAP3 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP3 ADD MSTORE CALLER PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH4 0x92F026AD PUSH1 0xE0 SHL DUP3 MSTORE SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x92F026AD SWAP1 PUSH2 0xB52 SWAP1 ADDRESS SWAP1 DUP15 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A95 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB94 SWAP2 SWAP1 PUSH2 0x2AC8 JUMP JUMPDEST SWAP1 SWAP10 POP SWAP8 POP PUSH2 0xBC8 PUSH2 0xBAC PUSH1 0xC0 DUP15 ADD PUSH1 0xA0 DUP16 ADD PUSH2 0x266D JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xBBC DUP4 PUSH2 0x2AEC JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP13 POP DUP13 PUSH2 0x1CFB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x16C19739 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x16C19739 SWAP1 PUSH1 0x24 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC35 SWAP2 SWAP1 PUSH2 0x2B1C JUMP JUMPDEST POP POP SWAP3 POP SWAP3 POP POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 DUP15 DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0xA0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC61 SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xC82 SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0x20 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xCA3 SWAP2 SWAP1 PUSH2 0x266D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP16 PUSH1 0x40 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xCC4 SWAP2 SWAP1 PUSH2 0x2A11 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD31 SWAP2 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST PUSH3 0xFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x59C4F905 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAC SWAP2 SWAP1 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x55B812A8 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE16 SWAP2 SWAP1 PUSH2 0x2A72 JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0x8 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x18 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x13 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH3 0xFFFFFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 SIGNEXTEND PUSH3 0xFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x120 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x140 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x160 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE PUSH2 0x180 DUP3 ADD MLOAD DUP2 PUSH1 0x7 ADD SSTORE SWAP1 POP POP POP POP POP POP POP POP POP POP POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH2 0x1056 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1782 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 PUSH2 0x106A DUP3 PUSH2 0x1361 JUMP JUMPDEST SWAP1 POP PUSH2 0x1077 DUP2 CALLER DUP5 PUSH2 0x1D60 JUMP JUMPDEST PUSH2 0x10B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x139BDD08185C1C1C9BDD9959 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x6 SLOAD PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x3 DUP6 ADD SLOAD SWAP6 MLOAD PUSH4 0x71C54FC9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 SWAP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP1 SWAP4 AND SWAP6 SWAP3 SWAP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 PUSH4 0x71C54FC9 SWAP5 PUSH2 0x1122 SWAP5 SWAP4 DUP5 AND SWAP4 DUP2 AND SWAP3 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP2 ADD PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x113F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1163 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x90BC1693 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x90BC1693 SWAP1 PUSH1 0x24 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11B6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11DA SWAP2 SWAP1 PUSH2 0x2AC8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x16C19739 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP10 POP SWAP8 POP PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x16C19739 SWAP1 PUSH1 0x24 ADD PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x124C SWAP2 SWAP1 PUSH2 0x2B1C JUMP JUMPDEST POP POP SWAP3 POP SWAP3 POP POP PUSH2 0x127E DUP7 PUSH1 0x6 ADD SLOAD DUP4 PUSH2 0x1266 SWAP2 SWAP1 PUSH2 0x298D JUMP JUMPDEST PUSH1 0x4 DUP9 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH1 0x1 PUSH1 0x80 SHL PUSH2 0x1DC6 JUMP JUMPDEST PUSH2 0x1288 SWAP1 DUP12 PUSH2 0x2B98 JUMP JUMPDEST PUSH1 0x5 DUP8 ADD DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x12A5 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x2B98 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH2 0x12DC DUP7 PUSH1 0x7 ADD SLOAD DUP3 PUSH2 0x1266 SWAP2 SWAP1 PUSH2 0x298D JUMP JUMPDEST PUSH2 0x12E6 SWAP1 DUP11 PUSH2 0x2B98 JUMP JUMPDEST PUSH1 0x5 DUP8 ADD DUP1 SLOAD PUSH1 0x10 SWAP1 PUSH2 0x130A SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x80 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x2B98 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 DUP3 AND PUSH2 0x100 SWAP4 SWAP1 SWAP4 EXP SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP3 MUL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP PUSH1 0x6 DUP7 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP6 ADD SSTORE POP POP POP PUSH1 0x4 ADD DUP1 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE POP SWAP2 SWAP4 SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51F DUP3 PUSH2 0x183D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1398 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x0 PUSH2 0x13C3 DUP3 PUSH2 0x1361 JUMP JUMPDEST SWAP1 POP PUSH2 0x13D0 DUP2 CALLER DUP5 PUSH2 0x1D60 JUMP JUMPDEST PUSH2 0x140B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x139BDD08185C1C1C9BDD9959 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x6 SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD SWAP4 MLOAD PUSH4 0x71C54FC9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP4 PUSH4 0x71C54FC9 SWAP4 PUSH2 0x146A SWAP4 DUP2 AND SWAP3 SWAP1 DUP2 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x4 ADD PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1487 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14AB SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x60D49D53 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP1 DUP5 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x80 SHL SWAP1 SWAP4 DIV SWAP1 SWAP3 AND PUSH1 0x44 DUP3 ADD MSTORE SWAP2 SWAP3 POP DUP3 SWAP2 SWAP1 DUP3 AND SWAP1 PUSH4 0x60D49D53 SWAP1 PUSH1 0x64 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x151D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1541 SWAP2 SWAP1 PUSH2 0x2BB8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP7 ADD SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB SWAP2 DUP3 AND SWAP9 POP AND SWAP6 POP PUSH2 0x1561 DUP10 PUSH2 0x1E68 JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x534 SWAP1 PUSH2 0x2943 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH2 0x158D DUP6 DUP8 ADD DUP8 PUSH2 0x2BEB JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x71C54FC9 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x71C54FC9 SWAP1 PUSH2 0x15CF SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2A2C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1610 SWAP2 SWAP1 PUSH2 0x2A55 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x166A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642063616C6C6261636B2063616C6C6572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81C JUMP JUMPDEST DUP9 ISZERO PUSH2 0x16EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP12 SWAP1 MSTORE DUP7 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16E9 SWAP2 SWAP1 PUSH2 0x2C45 JUMP JUMPDEST POP JUMPDEST DUP8 ISZERO PUSH2 0x176C JUMPI PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP11 SWAP1 MSTORE DUP6 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1746 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x176A SWAP2 SWAP1 PUSH2 0x2C45 JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5EB CALLER DUP4 DUP4 PUSH2 0x1EA3 JUMP JUMPDEST PUSH2 0x178D DUP5 DUP5 DUP5 PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x880 CALLER DUP6 DUP6 DUP6 DUP6 PUSH2 0x1F42 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x17A5 DUP3 PUSH2 0x183D JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x17BD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x17DD JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1808 JUMP JUMPDEST DUP1 PUSH2 0x17E7 DUP5 PUSH2 0x206D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17F8 SWAP3 SWAP2 SWAP1 PUSH2 0x2C62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x51F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH2 0x1056 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x2100 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x18B0 JUMPI PUSH2 0x18B0 DUP2 DUP5 DUP7 PUSH2 0x2206 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x18EE JUMPI PUSH2 0x18CD PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x2100 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x191D JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SIGNEXTEND PUSH1 0x0 PUSH1 0xFF DUP3 SWAP1 SAR DUP1 DUP4 ADD XOR PUSH3 0xD89E8 DUP2 GT ISZERO PUSH2 0x19A6 JUMPI PUSH2 0x19A6 PUSH4 0x45C3193D PUSH1 0xE1 SHL DUP5 PUSH2 0x226A JUMP JUMPDEST PUSH17 0x1FFFCB933BD6FAD37AA2D162D1A594001 PUSH1 0x1 DUP3 AND MUL PUSH1 0x1 PUSH1 0x80 SHL XOR PUSH1 0x2 DUP3 AND ISZERO PUSH2 0x19E2 JUMPI PUSH16 0xFFF97272373D413259A46990580E213A MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x4 DUP3 AND ISZERO PUSH2 0x1A01 JUMPI PUSH16 0xFFF2E50F5F656932EF12357CF3C7FDCC MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x8 DUP3 AND ISZERO PUSH2 0x1A20 JUMPI PUSH16 0xFFE5CACA7E10E4E61C3624EAA0941CD0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x10 DUP3 AND ISZERO PUSH2 0x1A3F JUMPI PUSH16 0xFFCB9843D60F6159C9DB58835C926644 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x20 DUP3 AND ISZERO PUSH2 0x1A5E JUMPI PUSH16 0xFF973B41FA98C081472E6896DFB254C0 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x40 DUP3 AND ISZERO PUSH2 0x1A7D JUMPI PUSH16 0xFF2EA16466C96A3843EC78B326B52861 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x80 DUP3 AND ISZERO PUSH2 0x1A9C JUMPI PUSH16 0xFE5DEE046A99A2A811C461F1969C3053 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x100 DUP3 AND ISZERO PUSH2 0x1ABC JUMPI PUSH16 0xFCBE86C7900A88AEDCFFC83B479AA3A4 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x200 DUP3 AND ISZERO PUSH2 0x1ADC JUMPI PUSH16 0xF987A7253AC413176F2B074CF7815E54 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x400 DUP3 AND ISZERO PUSH2 0x1AFC JUMPI PUSH16 0xF3392B0822B70005940C7A398E4B70F3 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x800 DUP3 AND ISZERO PUSH2 0x1B1C JUMPI PUSH16 0xE7159475A2C29B7443B29C7FA6E889D9 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x1000 DUP3 AND ISZERO PUSH2 0x1B3C JUMPI PUSH16 0xD097F3BDFD2022B8845AD8F792AA5825 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x2000 DUP3 AND ISZERO PUSH2 0x1B5C JUMPI PUSH16 0xA9F746462D870FDF8A65DC1F90E061E5 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x4000 DUP3 AND ISZERO PUSH2 0x1B7C JUMPI PUSH16 0x70D869A156D2A1B890BB3DF62BAF32F7 MUL PUSH1 0x80 SHR JUMPDEST PUSH2 0x8000 DUP3 AND ISZERO PUSH2 0x1B9C JUMPI PUSH16 0x31BE135F97D08FD981231505542FCFA6 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x10000 DUP3 AND ISZERO PUSH2 0x1BBD JUMPI PUSH16 0x9AA508B5B7A84E1C677DE54F3E99BC9 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x20000 DUP3 AND ISZERO PUSH2 0x1BDD JUMPI PUSH15 0x5D6AF8DEDB81196699C329225EE604 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x40000 DUP3 AND ISZERO PUSH2 0x1BFC JUMPI PUSH14 0x2216E584F5FA1EA926041BEDFE98 MUL PUSH1 0x80 SHR JUMPDEST PUSH3 0x80000 DUP3 AND ISZERO PUSH2 0x1C19 JUMPI PUSH12 0x48A170391F7DC42444E8FA2 MUL PUSH1 0x80 SHR JUMPDEST PUSH1 0x0 DUP5 SGT ISZERO PUSH2 0x1C27 JUMPI PUSH1 0x0 NOT DIV JUMPDEST PUSH4 0xFFFFFFFF ADD PUSH1 0x20 SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x1C57 JUMPI SWAP3 SWAP4 SWAP3 JUMPDEST DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT PUSH2 0x1C82 JUMPI PUSH2 0x1C7B DUP6 DUP6 DUP6 PUSH2 0x227B JUMP JUMPDEST SWAP1 POP PUSH2 0x1CF2 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND LT ISZERO PUSH2 0x1CE4 JUMPI PUSH1 0x0 PUSH2 0x1CA9 DUP8 DUP7 DUP7 PUSH2 0x227B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1CB8 DUP8 DUP10 DUP7 PUSH2 0x22E5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND LT PUSH2 0x1CD9 JUMPI DUP1 PUSH2 0x1CDB JUMP JUMPDEST DUP2 JUMPDEST SWAP3 POP POP POP PUSH2 0x1CF2 JUMP JUMPDEST PUSH2 0x1CEF DUP6 DUP6 DUP5 PUSH2 0x22E5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1D25 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D33 DUP4 DUP4 PUSH1 0x0 PUSH2 0x1883 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1056 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1DBE JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x1D9A JUMPI POP PUSH2 0x1D9A DUP5 DUP5 PUSH2 0x180F JUMP JUMPDEST DUP1 PUSH2 0x1DBE JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 MUL DUP2 PUSH1 0x0 NOT DUP6 DUP8 MULMOD DUP3 DUP2 LT DUP4 DUP3 SUB SUB SWAP2 POP POP DUP1 DUP5 GT PUSH2 0x1DE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x0 SUB PUSH2 0x1DFB JUMPI POP DUP3 SWAP1 DIV SWAP1 POP PUSH2 0x1808 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP7 DUP9 MULMOD PUSH1 0x0 DUP7 DUP2 SUB DUP8 AND SWAP7 DUP8 SWAP1 DIV SWAP7 PUSH1 0x2 PUSH1 0x3 DUP10 MUL DUP2 XOR DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL DUP3 SUB MUL DUP1 DUP11 MUL SWAP1 SWAP2 SUB MUL SWAP2 DUP2 SWAP1 SUB DUP2 SWAP1 DIV PUSH1 0x1 ADD DUP7 DUP5 GT SWAP1 SWAP6 SUB SWAP5 SWAP1 SWAP5 MUL SWAP2 SWAP1 SWAP5 SUB SWAP3 SWAP1 SWAP3 DIV SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 MUL SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E77 PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x1883 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1ED5 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x2066 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x1F84 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2C91 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1FBF JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1FBC SWAP2 DUP2 ADD SWAP1 PUSH2 0x2CC4 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2028 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1FED JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FF2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2020 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x2064 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x207A DUP4 PUSH2 0x231B JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x209A JUMPI PUSH2 0x209A PUSH2 0x281F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20C4 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x20CE JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x2114 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x21D6 JUMPI PUSH1 0x0 PUSH2 0x2124 DUP5 PUSH2 0x183D JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x2150 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x2163 JUMPI POP PUSH2 0x2161 DUP2 DUP5 PUSH2 0x180F JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x218C JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST DUP2 ISZERO PUSH2 0x21D4 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2211 DUP4 DUP4 DUP4 PUSH2 0x1D60 JUMP JUMPDEST PUSH2 0x1056 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x223F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x81C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x81C JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE DUP1 PUSH1 0x2 SIGNEXTEND PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x229B JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST PUSH1 0x0 PUSH2 0x22BE DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x1DC6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CF2 PUSH2 0x22E0 DUP5 DUP4 PUSH2 0x22D2 DUP10 DUP10 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1DC6 JUMP JUMPDEST PUSH2 0x23F3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GT ISZERO PUSH2 0x2305 JUMPI SWAP2 SWAP3 SWAP2 JUMPDEST PUSH2 0x1DBE PUSH2 0x22E0 DUP4 PUSH1 0x1 PUSH1 0x60 SHL PUSH2 0x22D2 DUP9 DUP9 PUSH2 0x2CE1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x235A JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2386 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x23A4 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x23BC JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x23D0 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x23E2 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x51F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x2424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2439 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1808 DUP2 PUSH2 0x240E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x245F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2447 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2480 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2444 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1808 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2468 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x24F3 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2607 JUMPI DUP2 MLOAD DUP1 MLOAD DUP6 MSTORE DUP7 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP9 DUP8 ADD MSTORE DUP7 DUP3 ADD MLOAD DUP2 AND DUP8 DUP8 ADD MSTORE PUSH1 0x60 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP7 ADD MSTORE PUSH1 0x80 DUP1 DUP3 ADD MLOAD PUSH4 0xFFFFFFFF AND SWAP1 DUP7 ADD MSTORE PUSH1 0xA0 DUP1 DUP3 ADD MLOAD PUSH3 0xFFFFFF AND SWAP1 DUP7 ADD MSTORE PUSH1 0xC0 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 DUP7 ADD MSTORE PUSH1 0xE0 DUP1 DUP3 ADD MLOAD PUSH1 0x2 DUP2 SWAP1 SIGNEXTEND DUP3 DUP9 ADD MSTORE POP POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x25AE DUP3 DUP9 ADD DUP3 PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP8 DUP4 ADD MSTORE POP POP PUSH2 0x140 DUP2 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP8 DUP4 ADD MSTORE POP POP PUSH2 0x160 DUP2 DUP2 ADD MLOAD SWAP1 DUP7 ADD MSTORE PUSH2 0x180 SWAP1 DUP2 ADD MLOAD SWAP1 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x251E JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2634 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x2644 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x267F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1808 DUP2 PUSH2 0x24C0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x269D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x26AF DUP2 PUSH2 0x24C0 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP14 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP13 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP12 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH4 0xFFFFFFFF DUP11 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH3 0xFFFFFF DUP10 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP9 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1A0 DUP2 ADD PUSH2 0x2716 PUSH1 0xE0 DUP4 ADD DUP10 PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x2726 PUSH2 0x100 DUP4 ADD DUP9 PUSH1 0x2 SIGNEXTEND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP7 AND PUSH2 0x120 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP6 AND PUSH2 0x140 DUP4 ADD MSTORE PUSH2 0x160 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x180 ADD MSTORE SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2779 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x279F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x27C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x27D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2804 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x280F DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x26AF DUP2 PUSH2 0x27E3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x284B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2856 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2866 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x288A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x289E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x28B0 JUMPI PUSH2 0x28B0 PUSH2 0x281F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x28D8 JUMPI PUSH2 0x28D8 PUSH2 0x281F JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x28F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2928 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2933 DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x26AF DUP2 PUSH2 0x24C0 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2957 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2667 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x51F JUMPI PUSH2 0x51F PUSH2 0x2977 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29BD JUMPI PUSH2 0x29BD PUSH2 0x2977 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x29F3 JUMPI PUSH2 0x29F3 PUSH2 0x2977 JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1808 DUP3 PUSH2 0x29FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1808 DUP2 PUSH2 0x24C0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x2 SIGNEXTEND DUP2 EQ PUSH2 0x1808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1CF2 SWAP1 DUP4 ADD DUP5 PUSH2 0x2468 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2ADB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2AFE JUMPI PUSH2 0x2AFE PUSH2 0x2977 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2409 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2B34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2B3D DUP7 PUSH2 0x2B05 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP PUSH2 0x2B59 PUSH1 0x60 DUP8 ADD PUSH2 0x2B05 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B67 PUSH1 0x80 DUP8 ADD PUSH2 0x2B05 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1808 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29BD JUMPI PUSH2 0x29BD PUSH2 0x2977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2BD4 DUP4 PUSH2 0x2B05 JUMP JUMPDEST SWAP2 POP PUSH2 0x2BE2 PUSH1 0x20 DUP5 ADD PUSH2 0x2B05 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2C01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2C0C DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x2C1C DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP3 POP PUSH2 0x2C2A PUSH1 0x40 DUP7 ADD PUSH2 0x29FD JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x2C3A DUP2 PUSH2 0x24C0 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1808 DUP2 PUSH2 0x27E3 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2C74 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2444 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2C88 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2444 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1CEF SWAP1 DUP4 ADD DUP5 PUSH2 0x2468 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1808 DUP2 PUSH2 0x240E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x29BD JUMPI PUSH2 0x29BD PUSH2 0x2977 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB5 0xEA 0xC0 0xBD PUSH29 0xC28C221F5137EC5579C149F2B0D5171170F604039921740181229D6473 PUSH16 0x6C634300081400330000000000000000 ",
          "sourceMap": "1058:6972:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1527:300:5;;;;;;;;;;-1:-1:-1;1527:300:5;;;;;:::i;:::-;;:::i;:::-;;;565:14:46;;558:22;540:41;;528:2;513:18;1527:300:5;;;;;;;;2263:89;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3299:154::-;;;;;;;;;;-1:-1:-1;3299:154:5;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1806:32:46;;;1788:51;;1776:2;1761:18;3299:154:5;1642:203:46;3152:113:5;;;;;;;;;;-1:-1:-1;3152:113:5;;;;;:::i;:::-;;:::i;:::-;;6881:278:22;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3852:578:5:-;;;;;;;;;;-1:-1:-1;3852:578:5;;;;;:::i;:::-;;:::i;2093:2360:22:-;;;;;;:::i;:::-;;:::i;:::-;;;;5901:25:46;;;-1:-1:-1;;;;;5962:47:46;;;5957:2;5942:18;;5935:75;6026:18;;;6019:34;6084:2;6069:18;;6062:34;5888:3;5873:19;2093:2360:22;5670:432:46;4464:132:5;;;;;;;;;;-1:-1:-1;4464:132:5;;;;;:::i;:::-;;:::i;4461:1552:22:-;;;;;;;;;;-1:-1:-1;4461:1552:22;;;;;:::i;:::-;;:::i;:::-;;;;6281:25:46;;;6337:2;6322:18;;6315:34;;;;6254:18;4461:1552:22;6107:248:46;1551:86:22;;;;;;;;;;-1:-1:-1;1619:10:22;1551:86;;2103:118:5;;;;;;;;;;-1:-1:-1;2103:118:5;;;;;:::i;:::-;;:::i;1861:208::-;;;;;;;;;;-1:-1:-1;1861:208:5;;;;;:::i;:::-;;:::i;:::-;;;6758:25:46;;;6746:2;6731:18;1861:208:5;6612:177:46;6025:810:22;;;;;;;;;;-1:-1:-1;6025:810:22;;;;;:::i;:::-;;:::i;2394:93:5:-;;;;;;;;;;;;;:::i;1489:49:22:-;;;;;;;;;;-1:-1:-1;1489:49:22;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1489:49:22;;;;;;;;;;;-1:-1:-1;;;1489:49:22;;;;;-1:-1:-1;;;1489:49:22;;;;;;-1:-1:-1;;;;;1489:49:22;;;;-1:-1:-1;;;1489:49:22;;;;;;-1:-1:-1;;;1489:49:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7315:712::-;;;;;;;;;;-1:-1:-1;7315:712:22;;;;;:::i;:::-;;:::i;3487:144:5:-;;;;;;;;;;-1:-1:-1;3487:144:5;;;;;:::i;:::-;;:::i;4630:233::-;;;;;;;;;;-1:-1:-1;4630:233:5;;;;;:::i;:::-;;:::i;2529:255::-;;;;;;;;;;-1:-1:-1;2529:255:5;;;;;:::i;:::-;;:::i;1157:31:22:-;;;;;;;;;;-1:-1:-1;1157:31:22;;;;-1:-1:-1;;;;;1157:31:22;;;3665:153:5;;;;;;;;;;-1:-1:-1;3665:153:5;;;;;:::i;:::-;;:::i;1527:300::-;1629:4;-1:-1:-1;;;;;;1664:40:5;;-1:-1:-1;;;1664:40:5;;:104;;-1:-1:-1;;;;;;;1720:48:5;;-1:-1:-1;;;1720:48:5;1664:104;:156;;;-1:-1:-1;;;;;;;;;;829:40:13;;;1784:36:5;1645:175;1527:300;-1:-1:-1;;1527:300:5:o;2263:89::-;2308:13;2340:5;2333:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2263:89;:::o;3299:154::-;3366:7;3385:22;3399:7;3385:13;:22::i;:::-;-1:-1:-1;5679:7:5;5705:24;;;:15;:24;;;;;;-1:-1:-1;;;;;5705:24:5;3425:21;5609:127;3152:113;3223:35;3232:2;3236:7;1619:10:22;3223:8:5;:35::i;:::-;3152:113;;:::o;6881:278:22:-;6931:34;7019:1;7011:7;;:9;;;;:::i;:::-;6992:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6992:29:22;;-1:-1:-1;;6992:29:22;;;;;;;;;;;;6977:44;;7036:8;7032:90;7057:1;7049:7;;:9;;;;:::i;:::-;7047:1;:11;;;7032:90;;;7096:9;:14;7106:3;:1;7108;7106:3;:::i;:::-;7096:14;;;;;;;;;;;;;;;;;;-1:-1:-1;7096:14:22;7078:32;;;;;;;;;;;;;;;-1:-1:-1;;;;;7078:32:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7078:32:22;;;;;;;;-1:-1:-1;;;7078:32:22;;;;;;;;;;;;;-1:-1:-1;;;;;7078:32:22;;;;;;;-1:-1:-1;;;7078:32:22;;;;;;;;;-1:-1:-1;;;7078:32:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:15;;;;;;;;;;;;;:::i;:::-;;;;;;:32;;;;7059:3;;;;;:::i;:::-;;;;7032:90;;;;6881:278;:::o;3852:578:5:-;-1:-1:-1;;;;;3946:16:5;;3942:87;;3985:33;;-1:-1:-1;;;3985:33:5;;4015:1;3985:33;;;1788:51:46;1761:18;;3985:33:5;;;;;;;;3942:87;4247:21;4271:34;4279:2;4283:7;1619:10:22;4271:7:5;:34::i;:::-;4247:58;;4336:4;-1:-1:-1;;;;;4319:21:5;:13;-1:-1:-1;;;;;4319:21:5;;4315:109;;4363:50;;-1:-1:-1;;;4363:50:5;;-1:-1:-1;;;;;12996:15:46;;;4363:50:5;;;12978:34:46;13028:18;;;13021:34;;;13091:15;;13071:18;;;13064:43;12913:18;;4363:50:5;12738:375:46;4315:109:5;3932:498;3852:578;;;:::o;2093:2360:22:-;2221:18;;;;2185:15;;;;1729;1819:8;:27;;1811:58;;;;-1:-1:-1;;;1811:58:22;;13320:2:46;1811:58:22;;;13302:21:46;13359:2;13339:18;;;13332:30;-1:-1:-1;;;13378:18:46;;;13371:49;13437:18;;1811:58:22;13118:343:46;1811:58:22;2584:11:::1;::::0;2570:13:::1;::::0;-1:-1:-1;;;;;2584:11:22::1;:19;2604:13;;::::0;::::1;:6:::0;:13:::1;:::i;:::-;2618;::::0;;;::::1;::::0;::::1;;:::i;:::-;2632:12;::::0;;;::::1;::::0;::::1;;:::i;:::-;2584:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2570:75;;2656:10;2673:5;2656:23;;2826:20;2847:4;-1:-1:-1::0;;;;;2847:17:22::1;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2826:40;;2877:21;2899:45;2927:4;-1:-1:-1::0;;;;;2927:14:22::1;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2899:27;:45::i;:::-;2877:67;;2955:21;2977:45;3005:4;-1:-1:-1::0;;;;;3005:14:22::1;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;2977:45;2955:67;;3043:205;3097:12;3124:13;3152;3180:6;:21;;;3216:6;:21;;;3043:39;:205::i;:::-;3033:215:::0;-1:-1:-1;3422:17:22::1;3451:13;;::::0;::::1;:6:::0;:13:::1;:::i;:::-;3465;::::0;;;::::1;::::0;::::1;;:::i;:::-;3479:6;:12;;;;;;;;;;:::i;:::-;3440:63;::::0;;-1:-1:-1;;;;;15297:15:46;;;3440:63:22::1;::::0;::::1;15279:34:46::0;15349:15;;;;15329:18;;;15322:43;;;;15413:10;15401:23;15381:18;;;15374:51;3492:10:22::1;15441:18:46::0;;;15434:43;15213:19;;3440:63:22::1;::::0;;-1:-1:-1;;3440:63:22;;::::1;::::0;;;;;;;-1:-1:-1;;;3532:39:22;;3440:63;-1:-1:-1;;;;;;3532:9:22;::::1;::::0;::::1;::::0;:39:::1;::::0;3550:4:::1;::::0;3556:9;;3440:63;;3532:39:::1;;;:::i;:::-;;::::0;::::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3514:57:::0;;-1:-1:-1;3514:57:22;-1:-1:-1;3620:46:22::1;3626:16;::::0;;;::::1;::::0;::::1;;:::i;:::-;3655:7;:9:::0;;;:7:::1;:9;::::0;::::1;:::i;:::-;;;;;3644:20;;;3620:5;:46::i;:::-;3857:31;::::0;-1:-1:-1;;;3857:31:22;;3882:4:::1;3857:31;::::0;::::1;1788:51:46::0;3746:32:22::1;::::0;;;-1:-1:-1;;;;;3857:16:22;::::1;::::0;::::1;::::0;1761:18:46;;3857:31:22::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3716:172;;;;;;;3923:522;;;;;;;;3954:10;3923:522;;;;3985:6;:16;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;3923:522:22::1;;;;;4023:6;:13;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;3923:522:22::1;;;;;4058:6;:13;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;3923:522:22::1;;;;;4092:6;:12;;;;;;;;;;:::i;:::-;3923:522;;;;;;4123:4;-1:-1:-1::0;;;;;4123:8:22::1;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3923:522;;;;;;4158:9;-1:-1:-1::0;;;;;3923:522:22::1;;;;;4192:4;-1:-1:-1::0;;;;;4192:14:22::1;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3923:522;;;;;;4233:4;-1:-1:-1::0;;;;;4233:14:22::1;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3923:522;;;;;;4276:1;-1:-1:-1::0;;;;;3923:522:22::1;;;;;4304:1;-1:-1:-1::0;;;;;3923:522:22::1;;;;;4345:24;3923:522;;;;4409:24;3923:522;;::::0;3901:9:::1;:21;3911:10;3901:21;;;;;;;;;;;:544;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;-1:-1:-1::0;;;;;3901:544:22::1;;;;;;;;;;;;;;;;;;;;;;;;;2299:2154;;;;;;;;2093:2360:::0;;;;;;:::o;4464:132:5:-;4550:39;4567:4;4573:2;4577:7;4550:39;;;;;;;;;;;;:16;:39::i;:::-;4464:132;;;:::o;4461:1552:22:-;4565:15;4582;4534:10;1954:13;1968:23;1983:7;1968:14;:23::i;:::-;1954:37;;2010:39;2024:5;2030:10;2041:7;2010:13;:39::i;:::-;2002:63;;;;-1:-1:-1;;;2002:63:22;;17499:2:46;2002:63:22;;;17481:21:46;17538:2;17518:18;;;17511:30;-1:-1:-1;;;17557:18:46;;;17550:42;17609:18;;2002:63:22;17297:336:46;2002:63:22;4615:29:::1;4645:21:::0;;;:9:::1;:21;::::0;;;;;4948:18:::1;::::0;;::::1;::::0;5045:11:::1;::::0;5065:15:::1;::::0;::::1;::::0;5081::::1;::::0;::::1;::::0;5045:67;;-1:-1:-1;;;5045:67:22;;4645:21;;-1:-1:-1;;;;;4948:18:22;;::::1;::::0;4615:29;;-1:-1:-1;;;;;5045:11:22;;::::1;::::0;:19:::1;::::0;:67:::1;::::0;5065:15;;::::1;::::0;5081;::::1;::::0;-1:-1:-1;;;5097:14:22;;::::1;;;::::0;5045:67:::1;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5175:21;::::0;-1:-1:-1;;;5175:21:22;;-1:-1:-1;;;;;17802:47:46;;5175:21:22::1;::::0;::::1;17784:66:46::0;5031:81:22;;-1:-1:-1;5031:81:22;;-1:-1:-1;;;;;5175:9:22;::::1;::::0;::::1;::::0;17757:18:46;;5175:21:22::1;::::0;::::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5413:31;::::0;-1:-1:-1;;;5413:31:22;;5438:4:::1;5413:31;::::0;::::1;1788:51:46::0;5157:39:22;;-1:-1:-1;5157:39:22;-1:-1:-1;5304:32:22::1;::::0;;;-1:-1:-1;;;;;5413:16:22;::::1;::::0;::::1;::::0;1761:18:46;;5413:31:22::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5262:182;;;;;;;5504:113;5545:8;:33;;;5520:24;:58;;;;:::i;:::-;5579:18;::::0;::::1;::::0;-1:-1:-1;;;;;5579:18:22::1;-1:-1:-1::0;;;5504:15:22::1;:113::i;:::-;5479:139;::::0;5487:7;5479:139:::1;:::i;:::-;5457:20;::::0;::::1;:161:::0;;:20:::1;::::0;:161:::1;::::0;;;-1:-1:-1;;;;;5457:161:22::1;;:::i;:::-;;;;;;;;-1:-1:-1::0;;;;;5457:161:22::1;;;;;-1:-1:-1::0;;;;;5457:161:22::1;;;;;;5676:113;5717:8;:33;;;5692:24;:58;;;;:::i;5676:113::-;5651:139;::::0;5659:7;5651:139:::1;:::i;:::-;5629:20;::::0;::::1;:161:::0;;:20:::1;::::0;:161:::1;::::0;;;-1:-1:-1;;;5629:161:22;::::1;-1:-1:-1::0;;;;;5629:161:22::1;;:::i;:::-;::::0;;-1:-1:-1;;;;;5629:161:22;;::::1;;::::0;;;::::1;::::0;;::::1;::::0;;;::::1;;::::0;;::::1;;::::0;;-1:-1:-1;5841:33:22::1;::::0;::::1;:60:::0;;;;5912:33:::1;::::0;::::1;:60:::0;-1:-1:-1;;;5983:18:22::1;;:22:::0;;-1:-1:-1;;5983:22:22::1;::::0;;-1:-1:-1;4461:1552:22;;;;-1:-1:-1;4461:1552:22;-1:-1:-1;4461:1552:22:o;2103:118:5:-;2166:7;2192:22;2206:7;2192:13;:22::i;1861:208::-;1924:7;-1:-1:-1;;;;;1947:19:5;;1943:87;;1989:30;;-1:-1:-1;;;1989:30:5;;2016:1;1989:30;;;1788:51:46;1761:18;;1989:30:5;1642:203:46;1943:87:5;-1:-1:-1;;;;;;2046:16:5;;;;;:9;:16;;;;;;;1861:208::o;6025:810:22:-;6150:15;6166;6119:10;1954:13;1968:23;1983:7;1968:14;:23::i;:::-;1954:37;;2010:39;2024:5;2030:10;2041:7;2010:13;:39::i;:::-;2002:63;;;;-1:-1:-1;;;2002:63:22;;17499:2:46;2002:63:22;;;17481:21:46;17538:2;17518:18;;;17511:30;-1:-1:-1;;;17557:18:46;;;17550:42;17609:18;;2002:63:22;17297:336:46;2002:63:22;6326:29:::1;6356:21:::0;;;:9:::1;:21;::::0;;;;;6402:11:::1;::::0;6422:15:::1;::::0;::::1;::::0;6438::::1;::::0;::::1;::::0;6402:67;;-1:-1:-1;;;6402:67:22;;6356:21;;6326:29;-1:-1:-1;;;;;6402:11:22;;::::1;::::0;:19:::1;::::0;:67:::1;::::0;6422:15;::::1;::::0;6438;;::::1;::::0;-1:-1:-1;;;6454:14:22;;::::1;;;::::0;6402:67:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6586:20;::::0;::::1;::::0;6535:117:::1;::::0;-1:-1:-1;;;6535:117:22;;-1:-1:-1;;;;;18283:32:46;;;6535:117:22::1;::::0;::::1;18265:51:46::0;-1:-1:-1;;;;;6586:20:22;;::::1;18385:18:46::0;;;18378:43;-1:-1:-1;;;6621:20:22;;::::1;::::0;;::::1;18437:18:46::0;;;18430:43;6388:81:22;;-1:-1:-1;6388:81:22;;6535:12;;::::1;::::0;::::1;::::0;18238:18:46;;6535:117:22::1;::::0;::::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6740:1;6717:20;::::0;::::1;6752:24:::0;-1:-1:-1;;;;;6514:138:22;;::::1;::::0;-1:-1:-1;6514:138:22::1;::::0;-1:-1:-1;6810:17:22::1;6816:10:::0;6810:5:::1;:17::i;:::-;6188:647;;;1943:142:::0;6025:810;;;;;;:::o;2394:93:5:-;2441:13;2473:7;2466:14;;;;;:::i;7315:712:22:-;7476:14;;;;7534:49;;;;7545:4;7534:49;:::i;:::-;7608:11;;:40;;-1:-1:-1;;;7608:40:22;;7475:108;;-1:-1:-1;7475:108:22;;-1:-1:-1;7475:108:22;;-1:-1:-1;7475:108:22;-1:-1:-1;7594:13:22;;-1:-1:-1;;;;;7608:11:22;;;;:19;;:40;;7475:108;;;;;;7608:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7594:54;-1:-1:-1;;;;;;7667:17:22;;7674:10;7667:17;7659:52;;;;-1:-1:-1;;;7659:52:22;;19615:2:46;7659:52:22;;;19597:21:46;19654:2;19634:18;;;19627:30;19693:25;19673:18;;;19666:53;19736:18;;7659:52:22;19413:347:46;7659:52:22;7827:9;;7824:93;;7852:53;;-1:-1:-1;;;7852:53:22;;-1:-1:-1;;;;;20023:15:46;;;7852:53:22;;;20005:34:46;7886:10:22;20055:18:46;;;20048:43;20107:18;;;20100:34;;;7852:27:22;;;;;19940:18:46;;7852:53:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7824:93;7930:9;;7927:93;;7955:53;;-1:-1:-1;;;7955:53:22;;-1:-1:-1;;;;;20023:15:46;;;7955:53:22;;;20005:34:46;7989:10:22;20055:18:46;;;20048:43;20107:18;;;20100:34;;;7955:27:22;;;;;19940:18:46;;7955:53:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7927:93;7409:618;;;;;7315:712;;;;:::o;3487:144:5:-;3572:52;1619:10:22;3605:8:5;3615;3572:18;:52::i;4630:233::-;4743:31;4756:4;4762:2;4766:7;4743:12;:31::i;:::-;4784:72;1619:10:22;4832:4:5;4838:2;4842:7;4851:4;4784:33;:72::i;2529:255::-;2593:13;2618:22;2632:7;2618:13;:22::i;:::-;;2651:21;2675:10;3102:9;;;;;;;;;-1:-1:-1;3102:9:5;;;3026:92;2675:10;2651:34;;2726:1;2708:7;2702:21;:25;:75;;;;;;;;;;;;;;;;;2744:7;2753:18;:7;:16;:18::i;:::-;2730:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2702:75;2695:82;2529:255;-1:-1:-1;;;2529:255:5:o;3665:153::-;-1:-1:-1;;;;;3776:25:5;;;3753:4;3776:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;3665:153::o;15858:241::-;15921:7;5470:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5470:16:5;;15983:88;;16029:31;;-1:-1:-1;;;16029:31:5;;;;;6758:25:46;;;6731:18;;16029:31:5;6612:177:46;14138:120:5;14218:33;14227:2;14231:7;14240:4;14246;14218:8;:33::i;8507:795::-;8593:7;5470:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5470:16:5;;;;8704:18;;;8700:86;;8738:37;8755:4;8761;8767:7;8738:16;:37::i;:::-;-1:-1:-1;;;;;8830:18:5;;;8826:256;;8946:48;8963:1;8967:7;8984:1;8988:5;8946:8;:48::i;:::-;-1:-1:-1;;;;;9037:15:5;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;9037:20:5;;;8826:256;-1:-1:-1;;;;;9096:16:5;;;9092:107;;-1:-1:-1;;;;;9156:13:5;;;;;;:9;:13;;;;;:18;;9173:1;9156:18;;;9092:107;9209:16;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9209:21:5;-1:-1:-1;;;;;9209:21:5;;;;;;;;;9246:27;;9209:16;;9246:27;;;;;;;9291:4;8507:795;-1:-1:-1;;;;8507:795:5:o;3170:4516:40:-;3394:1;3383:19;3247:20;3493:3;3489:14;;;3761:15;;;3751:26;1330:6;3809:35;;3805:94;;;3862:37;-1:-1:-1;;;3894:4:40;3862:31;:37::i;:::-;4573:52;4664:3;4651:17;;4544:146;-1:-1:-1;;;4486:222:40;4749:3;4739:13;;:18;4735:99;;4792:34;4784:42;4831:3;4783:51;4735:99;4862:3;4852:13;;:18;4848:99;;4905:34;4897:42;4944:3;4896:51;4848:99;4975:3;4965:13;;:18;4961:99;;5018:34;5010:42;5057:3;5009:51;4961:99;5088:4;5078:14;;:19;5074:100;;5132:34;5124:42;5171:3;5123:51;5074:100;5202:4;5192:14;;:19;5188:100;;5246:34;5238:42;5285:3;5237:51;5188:100;5316:4;5306:14;;:19;5302:100;;5360:34;5352:42;5399:3;5351:51;5302:100;5430:4;5420:14;;:19;5416:100;;5474:34;5466:42;5513:3;5465:51;5416:100;5544:5;5534:15;;:20;5530:101;;5589:34;5581:42;5628:3;5580:51;5530:101;5659:5;5649:15;;:20;5645:101;;5704:34;5696:42;5743:3;5695:51;5645:101;5774:5;5764:15;;:20;5760:101;;5819:34;5811:42;5858:3;5810:51;5760:101;5889:5;5879:15;;:20;5875:101;;5934:34;5926:42;5973:3;5925:51;5875:101;6004:6;5994:16;;:21;5990:102;;6050:34;6042:42;6089:3;6041:51;5990:102;6120:6;6110:16;;:21;6106:102;;6166:34;6158:42;6205:3;6157:51;6106:102;6236:6;6226:16;;:21;6222:102;;6282:34;6274:42;6321:3;6273:51;6222:102;6352:6;6342:16;;:21;6338:102;;6398:34;6390:42;6437:3;6389:51;6338:102;6468:7;6458:17;;:22;6454:102;;6515:33;6507:41;6553:3;6506:50;6454:102;6584:7;6574:17;;:22;6570:101;;6631:32;6623:40;6668:3;6622:49;6570:101;6699:7;6689:17;;:22;6685:99;;6746:30;6738:38;6781:3;6737:47;6685:99;6812:7;6802:17;;:22;6798:94;;6859:25;6851:33;6889:3;6850:42;6798:94;7031:1;7025:4;7021:12;7018:83;;;-1:-1:-1;;7065:18:40;7018:83;7636:18;7625:30;7644:2;7617:39;;3170:4516;-1:-1:-1;;;3170:4516:40:o;3222:1161:34:-;3425:17;3474:13;-1:-1:-1;;;;;3458:29:34;:13;-1:-1:-1;;;;;3458:29:34;;3454:110;;;3535:13;;3550;3454:110;3595:13;-1:-1:-1;;;;;3579:29:34;:12;-1:-1:-1;;;;;3579:29:34;;3575:802;;3636:123;3676:13;3707;3738:7;3636:22;:123::i;:::-;3624:135;;3575:802;;;3795:13;-1:-1:-1;;;;;3780:28:34;:12;-1:-1:-1;;;;;3780:28:34;;3776:601;;;3824:18;3845:122;3885:12;3915:13;3946:7;3845:22;:122::i;:::-;3824:143;;3981:18;4002:122;4042:13;4073:12;4103:7;4002:22;:122::i;:::-;3981:143;;4164:10;-1:-1:-1;;;;;4151:23:34;:10;-1:-1:-1;;;;;4151:23:34;;:49;;4190:10;4151:49;;;4177:10;4151:49;4139:61;;3810:401;;3776:601;;;4243:123;4283:13;4314;4345:7;4243:22;:123::i;:::-;4231:135;;3776:601;3222:1161;;;;;;;:::o;9624:327:5:-;-1:-1:-1;;;;;9691:16:5;;9687:87;;9730:33;;-1:-1:-1;;;9730:33:5;;9760:1;9730:33;;;1788:51:46;1761:18;;9730:33:5;1642:203:46;9687:87:5;9783:21;9807:32;9815:2;9819:7;9836:1;9807:7;:32::i;:::-;9783:56;-1:-1:-1;;;;;;9853:27:5;;;9849:96;;9903:31;;-1:-1:-1;;;9903:31:5;;9931:1;9903:31;;;1788:51:46;1761:18;;9903:31:5;1642:203:46;6047:272:5;6150:4;-1:-1:-1;;;;;6185:21:5;;;;;;:127;;;6232:7;-1:-1:-1;;;;;6223:16:5;:5;-1:-1:-1;;;;;6223:16:5;;:52;;;;6243:32;6260:5;6267:7;6243:16;:32::i;:::-;6223:88;;;-1:-1:-1;5679:7:5;5705:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6279:32:5;;;5705:24;;6279:32;6223:88;6166:146;6047:272;-1:-1:-1;;;;6047:272:5:o;741:4171:33:-;853:14;1242:5;;;853:14;-1:-1:-1;;1246:1:33;1242;1430:20;1503:5;1499:2;1496:13;1488:5;1484:2;1480:14;1476:34;1467:43;;;1663:5;1649:11;:19;1641:28;;;;;;1750:5;1759:1;1750:10;1746:177;;-1:-1:-1;1837:23:33;;;;-1:-1:-1;1895:13:33;;1746:177;2223:17;2323:11;2320:1;2317;2310:25;2731:12;2747:15;;;2746:31;;2899:22;;;;;3806:1;3787;:15;;3786:21;;4049:17;;;4045:21;;4038:28;4111:17;;;4107:21;;4100:28;4174:17;;;4170:21;;4163:28;4237:17;;;4233:21;;4226:28;4300:17;;;4296:21;;4289:28;4364:17;;;4360:21;;;4353:28;3343:12;;;;3339:23;;;3364:1;3335:31;2484:20;;;2473:32;;;3402:12;;;;2531:21;;;;3059:16;;;;3393:21;;;;4857:11;;;;;-1:-1:-1;;741:4171:33;;;;;:::o;11156:227:5:-;11207:21;11231:40;11247:1;11251:7;11268:1;11231:7;:40::i;:::-;11207:64;-1:-1:-1;;;;;;11285:27:5;;11281:96;;11335:31;;-1:-1:-1;;;11335:31:5;;;;;6758:25:46;;;6731:18;;11335:31:5;6612:177:46;15311:312:5;-1:-1:-1;;;;;15418:22:5;;15414:91;;15463:31;;-1:-1:-1;;;15463:31:5;;-1:-1:-1;;;;;1806:32:46;;15463:31:5;;;1788:51:46;1761:18;;15463:31:5;1642:203:46;15414:91:5;-1:-1:-1;;;;;15514:25:5;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;15514:46:5;;;;;;;;;;15575:41;;540::46;;;15575::5;;513:18:46;15575:41:5;;;;;;;15311:312;;;:::o;993:926:9:-;-1:-1:-1;;;;;1173:14:9;;;:18;1169:744;;1211:67;;-1:-1:-1;;;1211:67:9;;-1:-1:-1;;;;;1211:36:9;;;;;:67;;1248:8;;1258:4;;1264:7;;1273:4;;1211:67;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1211:67:9;;;;;;;;-1:-1:-1;;1211:67:9;;;;;;;;;;;;:::i;:::-;;;1207:696;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1568:6;:13;1585:1;1568:18;1564:325;;1672:39;;-1:-1:-1;;;1672:39:9;;-1:-1:-1;;;;;1806:32:46;;1672:39:9;;;1788:51:46;1761:18;;1672:39:9;1642:203:46;1564:325:9;1841:6;1835:13;1828:4;1820:6;1816:17;1809:40;1207:696;-1:-1:-1;;;;;;1325:51:9;;-1:-1:-1;;;1325:51:9;1321:182;;1445:39;;-1:-1:-1;;;1445:39:9;;-1:-1:-1;;;;;1806:32:46;;1445:39:9;;;1788:51:46;1761:18;;1445:39:9;1642:203:46;1321:182:9;1279:238;1207:696;993:926;;;;;:::o;1308:634:12:-;1364:13;1413:14;1430:17;1441:5;1430:10;:17::i;:::-;1450:1;1430:21;1413:38;;1465:20;1499:6;1488:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1488:18:12;-1:-1:-1;1465:41:12;-1:-1:-1;1595:30:12;;;1611:4;1595:30;1652:247;-1:-1:-1;;1683:5:12;-1:-1:-1;;;1782:2:12;1771:14;;1766:32;1683:5;1753:46;1843:2;1834:11;;;-1:-1:-1;1863:21:12;1652:247;1863:21;-1:-1:-1;1919:6:12;1308:634;-1:-1:-1;;;1308:634:12:o;14440:662:5:-;14600:9;:31;;;-1:-1:-1;;;;;;14613:18:5;;;;14600:31;14596:460;;;14647:13;14663:22;14677:7;14663:13;:22::i;:::-;14647:38;-1:-1:-1;;;;;;14813:18:5;;;;;;:35;;;14844:4;-1:-1:-1;;;;;14835:13:5;:5;-1:-1:-1;;;;;14835:13:5;;;14813:35;:69;;;;;14853:29;14870:5;14877:4;14853:16;:29::i;:::-;14852:30;14813:69;14809:142;;;14909:27;;-1:-1:-1;;;14909:27:5;;-1:-1:-1;;;;;1806:32:46;;14909:27:5;;;1788:51:46;1761:18;;14909:27:5;1642:203:46;14809:142:5;14969:9;14965:81;;;15023:7;15019:2;-1:-1:-1;;;;;15003:28:5;15012:5;-1:-1:-1;;;;;15003:28:5;;;;;;;;;;;14965:81;14633:423;14596:460;-1:-1:-1;;15066:24:5;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15066:29:5;-1:-1:-1;;;;;15066:29:5;;;;;;;;;;14440:662::o;6751:368::-;6863:38;6877:5;6884:7;6893;6863:13;:38::i;:::-;6858:255;;-1:-1:-1;;;;;6921:19:5;;6917:186;;6967:31;;-1:-1:-1;;;6967:31:5;;;;;6758:25:46;;;6731:18;;6967:31:5;6612:177:46;6917:186:5;7044:44;;-1:-1:-1;;;7044:44:5;;-1:-1:-1;;;;;21968:32:46;;7044:44:5;;;21950:51:46;22017:18;;;22010:34;;;21923:18;;7044:44:5;21776:274:46;1210:223:30;1333:8;1330:1;1323:19;1382:5;1379:1;1368:20;1362:4;1355:34;1412:4;1409:1;1402:15;1015:653:34;1163:17;1212:13;-1:-1:-1;;;;;1196:29:34;:13;-1:-1:-1;;;;;1196:29:34;;1192:110;;;1273:13;;1288;1192:110;1312:20;1335:109;1364:13;-1:-1:-1;;;;;1335:109:34;1391:13;-1:-1:-1;;;;;1335:109:34;-1:-1:-1;;;1335:15:34;:109::i;:::-;1312:132;-1:-1:-1;1473:188:34;1500:147;1537:7;1312:132;1600:29;1616:13;1600;:29;:::i;:::-;-1:-1:-1;;;;;1500:147:34;:15;:147::i;:::-;1473:9;:188::i;2107:515::-;2255:17;2304:13;-1:-1:-1;;;;;2288:29:34;:13;-1:-1:-1;;;;;2288:29:34;;2284:110;;;2365:13;;2380;2284:110;2423:192;2450:151;2487:7;-1:-1:-1;;;2554:29:34;2570:13;2554;:29;:::i;29154:916:15:-;29207:7;;-1:-1:-1;;;29282:17:15;;29278:103;;-1:-1:-1;;;29319:17:15;;;-1:-1:-1;29364:2:15;29354:12;29278:103;29407:8;29398:5;:17;29394:103;;29444:8;29435:17;;;-1:-1:-1;29480:2:15;29470:12;29394:103;29523:8;29514:5;:17;29510:103;;29560:8;29551:17;;;-1:-1:-1;29596:2:15;29586:12;29510:103;29639:7;29630:5;:16;29626:100;;29675:7;29666:16;;;-1:-1:-1;29710:1:15;29700:11;29626:100;29752:7;29743:5;:16;29739:100;;29788:7;29779:16;;;-1:-1:-1;29823:1:15;29813:11;29739:100;29865:7;29856:5;:16;29852:100;;29901:7;29892:16;;;-1:-1:-1;29936:1:15;29926:11;29852:100;29978:7;29969:5;:16;29965:66;;30015:1;30005:11;30057:6;29154:916;-1:-1:-1;;29154:916:15:o;437:110:34:-;538:1;-1:-1:-1;;;;;518:21:34;;;;510:30;;;;;;437:110;;;:::o;14:131:46:-;-1:-1:-1;;;;;;88:32:46;;78:43;;68:71;;135:1;132;125:12;68:71;14:131;:::o;150:245::-;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:46;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:46;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:46:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:46;;1348:180;-1:-1:-1;1348:180:46:o;1850:131::-;-1:-1:-1;;;;;1925:31:46;;1915:42;;1905:70;;1971:1;1968;1961:12;1986:315;2054:6;2062;2115:2;2103:9;2094:7;2090:23;2086:32;2083:52;;;2131:1;2128;2121:12;2083:52;2170:9;2157:23;2189:31;2214:5;2189:31;:::i;:::-;2239:5;2291:2;2276:18;;;;2263:32;;-1:-1:-1;;;1986:315:46:o;2722:2279::-;2955:2;3007:21;;;3077:13;;2980:18;;;3099:22;;;2926:4;;2955:2;3140;;3158:18;;;;3199:15;;;2926:4;3242:1733;3256:6;3253:1;3250:13;3242:1733;;;3315:13;;3353:9;;3341:22;;3402:11;;;3396:18;-1:-1:-1;;;;;1599:31:46;;;3460:12;;;1587:44;3514:11;;;3508:18;1599:31;;3574:12;;;1587:44;3610:4;3655:11;;;3649:18;1599:31;;;3715:12;;;1587:44;3751:4;3796:11;;;3790:18;2382:10;2371:22;3855:12;;;2359:35;3891:4;3936:11;;;3930:18;2481:8;2470:20;3995:12;;;2458:33;4031:4;4076:11;;;4070:18;-1:-1:-1;;;;;2568:46:46;4136:12;;;2556:59;4172:4;4217:11;;;4211:18;2701:1;2690:20;;;4275:12;;;2678:33;4242:46;;4311:6;4366:2;4362;4358:11;4352:18;4383:46;4425:2;4420:3;4416:12;4400:14;2701:1;2690:20;2678:33;;2626:91;4383:46;-1:-1:-1;;4453:6:46;4500:12;;;4494:19;-1:-1:-1;;;;;2568:46:46;;4561:13;;;2556:59;-1:-1:-1;;4599:6:46;4646:12;;;4640:19;-1:-1:-1;;;;;2568:46:46;;4707:13;;;2556:59;-1:-1:-1;;4745:6:46;4792:12;;;4786:19;4771:13;;;4764:42;4830:6;4877:12;;;4871:19;4856:13;;;4849:42;4920:6;4911:16;;;;4950:15;;;;3278:1;3271:9;3242:1733;;;-1:-1:-1;4992:3:46;;2722:2279;-1:-1:-1;;;;;;;2722:2279:46:o;5006:456::-;5083:6;5091;5099;5152:2;5140:9;5131:7;5127:23;5123:32;5120:52;;;5168:1;5165;5158:12;5120:52;5207:9;5194:23;5226:31;5251:5;5226:31;:::i;:::-;5276:5;-1:-1:-1;5333:2:46;5318:18;;5305:32;5346:33;5305:32;5346:33;:::i;:::-;5006:456;;5398:7;;-1:-1:-1;;;5452:2:46;5437:18;;;;5424:32;;5006:456::o;5467:198::-;5557:6;5610:3;5598:9;5589:7;5585:23;5581:33;5578:53;;;5627:1;5624;5617:12;5578:53;-1:-1:-1;5650:9:46;5467:198;-1:-1:-1;5467:198:46:o;6360:247::-;6419:6;6472:2;6460:9;6451:7;6447:23;6443:32;6440:52;;;6488:1;6485;6478:12;6440:52;6527:9;6514:23;6546:31;6571:5;6546:31;:::i;6794:315::-;6862:6;6870;6923:2;6911:9;6902:7;6898:23;6894:32;6891:52;;;6939:1;6936;6929:12;6891:52;6975:9;6962:23;6952:33;;7035:2;7024:9;7020:18;7007:32;7048:31;7073:5;7048:31;:::i;:::-;7098:5;7088:15;;;6794:315;;;;;:::o;7114:1186::-;7588:25;;;-1:-1:-1;;;;;7687:15:46;;;7682:2;7667:18;;7660:43;7739:15;;;7734:2;7719:18;;7712:43;7791:15;;7786:2;7771:18;;7764:43;7856:10;7844:23;;7838:3;7823:19;;7816:52;7917:8;7905:21;;7640:3;7884:19;;7877:50;-1:-1:-1;;;;;2568:46:46;;7978:3;7963:19;;2556:59;7575:3;7560:19;;7992:45;8032:3;8021:9;8017:19;8009:6;2701:1;2690:20;2678:33;;2626:91;7992:45;8046;8086:3;8075:9;8071:19;8063:6;2701:1;2690:20;2678:33;;2626:91;8046:45;-1:-1:-1;;;;;2568:46:46;;8142:3;8127:19;;2556:59;-1:-1:-1;;;;;2568:46:46;;8199:3;8184:19;;2556:59;8235:3;8220:19;;8213:36;;;;8280:3;8265:19;8258:36;7114:1186;;-1:-1:-1;;;;;;;;;;;7114:1186:46:o;8305:727::-;8393:6;8401;8409;8417;8470:2;8458:9;8449:7;8445:23;8441:32;8438:52;;;8486:1;8483;8476:12;8438:52;8522:9;8509:23;8499:33;;8579:2;8568:9;8564:18;8551:32;8541:42;;8634:2;8623:9;8619:18;8606:32;8657:18;8698:2;8690:6;8687:14;8684:34;;;8714:1;8711;8704:12;8684:34;8752:6;8741:9;8737:22;8727:32;;8797:7;8790:4;8786:2;8782:13;8778:27;8768:55;;8819:1;8816;8809:12;8768:55;8859:2;8846:16;8885:2;8877:6;8874:14;8871:34;;;8901:1;8898;8891:12;8871:34;8946:7;8941:2;8932:6;8928:2;8924:15;8920:24;8917:37;8914:57;;;8967:1;8964;8957:12;8914:57;8305:727;;;;-1:-1:-1;;8998:2:46;8990:11;;-1:-1:-1;;;8305:727:46:o;9037:118::-;9123:5;9116:13;9109:21;9102:5;9099:32;9089:60;;9145:1;9142;9135:12;9160:382;9225:6;9233;9286:2;9274:9;9265:7;9261:23;9257:32;9254:52;;;9302:1;9299;9292:12;9254:52;9341:9;9328:23;9360:31;9385:5;9360:31;:::i;:::-;9410:5;-1:-1:-1;9467:2:46;9452:18;;9439:32;9480:30;9439:32;9480:30;:::i;9547:127::-;9608:10;9603:3;9599:20;9596:1;9589:31;9639:4;9636:1;9629:15;9663:4;9660:1;9653:15;9679:1266;9774:6;9782;9790;9798;9851:3;9839:9;9830:7;9826:23;9822:33;9819:53;;;9868:1;9865;9858:12;9819:53;9907:9;9894:23;9926:31;9951:5;9926:31;:::i;:::-;9976:5;-1:-1:-1;10033:2:46;10018:18;;10005:32;10046:33;10005:32;10046:33;:::i;:::-;10098:7;-1:-1:-1;10152:2:46;10137:18;;10124:32;;-1:-1:-1;10207:2:46;10192:18;;10179:32;10230:18;10260:14;;;10257:34;;;10287:1;10284;10277:12;10257:34;10325:6;10314:9;10310:22;10300:32;;10370:7;10363:4;10359:2;10355:13;10351:27;10341:55;;10392:1;10389;10382:12;10341:55;10428:2;10415:16;10450:2;10446;10443:10;10440:36;;;10456:18;;:::i;:::-;10531:2;10525:9;10499:2;10585:13;;-1:-1:-1;;10581:22:46;;;10605:2;10577:31;10573:40;10561:53;;;10629:18;;;10649:22;;;10626:46;10623:72;;;10675:18;;:::i;:::-;10715:10;10711:2;10704:22;10750:2;10742:6;10735:18;10790:7;10785:2;10780;10776;10772:11;10768:20;10765:33;10762:53;;;10811:1;10808;10801:12;10762:53;10867:2;10862;10858;10854:11;10849:2;10841:6;10837:15;10824:46;10912:1;10907:2;10902;10894:6;10890:15;10886:24;10879:35;10933:6;10923:16;;;;;;;9679:1266;;;;;;;:::o;11180:388::-;11248:6;11256;11309:2;11297:9;11288:7;11284:23;11280:32;11277:52;;;11325:1;11322;11315:12;11277:52;11364:9;11351:23;11383:31;11408:5;11383:31;:::i;:::-;11433:5;-1:-1:-1;11490:2:46;11475:18;;11462:32;11503:33;11462:32;11503:33;:::i;11573:380::-;11652:1;11648:12;;;;11695;;;11716:61;;11770:4;11762:6;11758:17;11748:27;;11716:61;11823:2;11815:6;11812:14;11792:18;11789:38;11786:161;;11869:10;11864:3;11860:20;11857:1;11850:31;11904:4;11901:1;11894:15;11932:4;11929:1;11922:15;11958:127;12019:10;12014:3;12010:20;12007:1;12000:31;12050:4;12047:1;12040:15;12074:4;12071:1;12064:15;12090:128;12157:9;;;12178:11;;;12175:37;;;12192:18;;:::i;12223:172::-;12290:10;12320;;;12332;;;12316:27;;12355:11;;;12352:37;;;12369:18;;:::i;:::-;12352:37;12223:172;;;;:::o;12400:127::-;12461:10;12456:3;12452:20;12449:1;12442:31;12492:4;12489:1;12482:15;12516:4;12513:1;12506:15;12532:201;12570:3;12598:10;12643:2;12636:5;12632:14;12670:2;12661:7;12658:15;12655:41;;12676:18;;:::i;:::-;12725:1;12712:15;;12532:201;-1:-1:-1;;;12532:201:46:o;13466:163::-;13533:20;;13593:10;13582:22;;13572:33;;13562:61;;13619:1;13616;13609:12;13634:184;13692:6;13745:2;13733:9;13724:7;13720:23;13716:32;13713:52;;;13761:1;13758;13751:12;13713:52;13784:28;13802:9;13784:28;:::i;13823:390::-;-1:-1:-1;;;;;14079:15:46;;;14061:34;;14131:15;;;;14126:2;14111:18;;14104:43;14195:10;14183:23;;;14178:2;14163:18;;14156:51;14011:2;13996:18;;13823:390::o;14218:251::-;14288:6;14341:2;14329:9;14320:7;14316:23;14312:32;14309:52;;;14357:1;14354;14347:12;14309:52;14389:9;14383:16;14408:31;14433:5;14408:31;:::i;14730:277::-;14798:6;14851:2;14839:9;14830:7;14826:23;14822:32;14819:52;;;14867:1;14864;14857:12;14819:52;14899:9;14893:16;14952:5;14949:1;14938:20;14931:5;14928:31;14918:59;;14973:1;14970;14963:12;15488:427;-1:-1:-1;;;;;15691:32:46;;15673:51;;-1:-1:-1;;;;;15760:47:46;;15755:2;15740:18;;15733:75;15844:2;15839;15824:18;;15817:30;;;-1:-1:-1;;15864:45:46;;15890:18;;15882:6;15864:45;:::i;15920:245::-;15999:6;16007;16060:2;16048:9;16039:7;16035:23;16031:32;16028:52;;;16076:1;16073;16066:12;16028:52;-1:-1:-1;;16099:16:46;;16155:2;16140:18;;;16134:25;16099:16;;16134:25;;-1:-1:-1;15920:245:46:o;16170:135::-;16209:3;16230:17;;;16227:43;;16250:18;;:::i;:::-;-1:-1:-1;16297:1:46;16286:13;;16170:135::o;16310:192::-;16389:13;;-1:-1:-1;;;;;16431:46:46;;16421:57;;16411:85;;16492:1;16489;16482:12;16507:502;16613:6;16621;16629;16637;16645;16698:3;16686:9;16677:7;16673:23;16669:33;16666:53;;;16715:1;16712;16705:12;16666:53;16738:40;16768:9;16738:40;:::i;:::-;16728:50;;16818:2;16807:9;16803:18;16797:25;16787:35;;16862:2;16851:9;16847:18;16841:25;16831:35;;16885:49;16930:2;16919:9;16915:18;16885:49;:::i;:::-;16875:59;;16953:50;16998:3;16987:9;16983:19;16953:50;:::i;:::-;16943:60;;16507:502;;;;;;;;:::o;17014:278::-;17083:6;17136:2;17124:9;17115:7;17111:23;17107:32;17104:52;;;17152:1;17149;17142:12;17104:52;17184:9;17178:16;17234:8;17227:5;17223:20;17216:5;17213:31;17203:59;;17258:1;17255;17248:12;17861:197;-1:-1:-1;;;;;17983:10:46;;;17995;;;17979:27;;18018:11;;;18015:37;;;18032:18;;:::i;18484:293::-;18563:6;18571;18624:2;18612:9;18603:7;18599:23;18595:32;18592:52;;;18640:1;18637;18630:12;18592:52;18663:40;18693:9;18663:40;:::i;:::-;18653:50;;18722:49;18767:2;18756:9;18752:18;18722:49;:::i;:::-;18712:59;;18484:293;;;;;:::o;18782:626::-;18891:6;18899;18907;18915;18968:3;18956:9;18947:7;18943:23;18939:33;18936:53;;;18985:1;18982;18975:12;18936:53;19024:9;19011:23;19043:31;19068:5;19043:31;:::i;:::-;19093:5;-1:-1:-1;19150:2:46;19135:18;;19122:32;19163:33;19122:32;19163:33;:::i;:::-;19215:7;-1:-1:-1;19241:37:46;19274:2;19259:18;;19241:37;:::i;:::-;19231:47;;19330:2;19319:9;19315:18;19302:32;19343:33;19368:7;19343:33;:::i;:::-;18782:626;;;;-1:-1:-1;18782:626:46;;-1:-1:-1;;18782:626:46:o;20145:245::-;20212:6;20265:2;20253:9;20244:7;20240:23;20236:32;20233:52;;;20281:1;20278;20271:12;20233:52;20313:9;20307:16;20332:28;20354:5;20332:28;:::i;20395:496::-;20574:3;20612:6;20606:13;20628:66;20687:6;20682:3;20675:4;20667:6;20663:17;20628:66;:::i;:::-;20757:13;;20716:16;;;;20779:70;20757:13;20716:16;20826:4;20814:17;;20779:70;:::i;:::-;20865:20;;20395:496;-1:-1:-1;;;;20395:496:46:o;20896:489::-;-1:-1:-1;;;;;21165:15:46;;;21147:34;;21217:15;;21212:2;21197:18;;21190:43;21264:2;21249:18;;21242:34;;;21312:3;21307:2;21292:18;;21285:31;;;21090:4;;21333:46;;21359:19;;21351:6;21333:46;:::i;21390:249::-;21459:6;21512:2;21500:9;21491:7;21487:23;21483:32;21480:52;;;21528:1;21525;21518:12;21480:52;21560:9;21554:16;21579:30;21603:5;21579:30;:::i;22055:185::-;-1:-1:-1;;;;;22176:10:46;;;22164;;;22160:27;;22199:12;;;22196:38;;;22214:18;;:::i"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2315000",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "approve(address,uint256)": "31531",
            "balanceOf(address)": "2628",
            "burn(uint256)": "infinite",
            "collect(uint256,address)": "infinite",
            "getAllPositions()": "infinite",
            "getApproved(uint256)": "infinite",
            "getSender()": "323",
            "isApprovedForAll(address,address)": "infinite",
            "mint((address,address,uint32,uint256,uint256,address,uint256))": "infinite",
            "mintCallback(uint256,uint256,bytes)": "infinite",
            "name()": "infinite",
            "ownerOf(uint256)": "infinite",
            "poolManager()": "2447",
            "positions(uint256)": "18000",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "infinite",
            "supportsInterface(bytes4)": "534",
            "symbol()": "infinite",
            "tokenURI(uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite"
          },
          "internal": {
            "_blockTimestamp()": "infinite"
          }
        },
        "methodIdentifiers": {
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "burn(uint256)": "42966c68",
          "collect(uint256,address)": "8d3c100a",
          "getAllPositions()": "18f56a0a",
          "getApproved(uint256)": "081812fc",
          "getSender()": "5e01eb5a",
          "isApprovedForAll(address,address)": "e985e9c5",
          "mint((address,address,uint32,uint256,uint256,address,uint256))": "2c6cc6c7",
          "mintCallback(uint256,uint256,bytes)": "9f382e9b",
          "name()": "06fdde03",
          "ownerOf(uint256)": "6352211e",
          "poolManager()": "dc4c90d3",
          "positions(uint256)": "99fbab88",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenURI(uint256)": "c87b56dd",
          "transferFrom(address,address,uint256)": "23b872dd"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPositions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"}],\"internalType\":\"struct IPositionManager.PositionInfo[]\",\"name\":\"positionInfo\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IPositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokensOwed1\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC-721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"stateVariables\":{\"_nextId\":{\"details\":\"The ID of the next token that will be minted. Skips 0\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x6ead281d4569c26b3dee7313aefff24add906f3600b57d8aef1255a17d6b34e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf78f05f3b8c9f75570e85300d7b4600d7f6f6a198449273f31d44c1641adb46f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x88cd5e3bee2e8c36b8d9058fbcaa81ad5704281b25634122234b55ea853d8055\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf46268c37522320bb2119a5a394bc5c739a95c0c574c8d08e8c643f4d06e5c76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(reason, 0x20), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc2dfdc8fbc8fdb142575c90568e237b809a1feaccff23e32d00131887a08dc36\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(add(buffer, 0x20), offset))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/PositionManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n \\r\\n // \\u548cUniswap V3 \\u7684 NonfungiblePositionManager.sol \\u5408\\u7ea6\\u7c7b\\u4f3c\\uff0c\\u90fd\\u662f\\u7528\\u4e8e\\u7ba1\\u7406\\u7528\\u6237\\u5934\\u5bf8\\u7684\\u5408\\u7ea6\\u3002\\r\\n // PositionManager \\u5408\\u7ea6\\u662f\\u4e3a\\u4e86\\u65b9\\u4fbf\\u7528\\u6237\\u7ba1\\u7406\\u81ea\\u5df1\\u7684\\u6d41\\u52a8\\u6027\\uff0c\\u800c\\u4e0d\\u662f\\u76f4\\u63a5\\u8c03\\u7528\\u4ea4\\u6613\\u6c60\\u5408\\u7ea6\\r\\n //\\u548c NonfungiblePositionManager \\u4e00\\u6837\\uff0cPositionManager \\r\\n //\\u4e5f\\u662f\\u4e00\\u4e2a\\u6ee1\\u8db3 ERC721 \\u6807\\u51c6\\u7684\\u5408\\u7ea6\\uff0c\\u8fd9\\u6837\\u7528\\u6237\\u53ef\\u4ee5\\u5f88\\u65b9\\u4fbf\\u7684\\u901a\\u8fc7 NFT \\u7684\\u65b9\\u5f0f\\u6765\\u7ba1\\u7406\\u81ea\\u5df1\\u7684\\u5408\\u7ea6\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/LiquidityAmounts.sol\\\";\\r\\nimport \\\"./libraries/TickMath.sol\\\";\\r\\nimport \\\"./libraries/FixedPoint128.sol\\\";\\r\\nimport \\\"./libraries/FullMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPositionManager.sol\\\";\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\nimport \\\"./interfaces/IPoolManager.sol\\\";\\r\\n\\r\\n\\r\\n//\\u5bf9\\u4e8e Pool \\u5408\\u7ea6\\u6765\\u8bf4\\uff0c\\u6d41\\u52a8\\u6027\\u90fd\\u662f PositionManager \\u5408\\u7ea6\\u638c\\u7ba1\\uff0c\\r\\n//PositionManager \\u76f8\\u5f53\\u4e8e\\u4ee3\\u7ba1\\u4e86 LP \\u7684\\u6d41\\u4e1c\\u897f\\uff0c\\u6240\\u4ee5\\u9700\\u8981\\u5728\\u5b83\\u5185\\u90e8\\u518d\\u5b58\\u50a8\\u4e0b\\u76f8\\u5173\\u4fe1\\u606f\\u3002\\r\\ncontract PositionManager is IPositionManager, ERC721{\\r\\n    // \\u4fdd\\u5b58 PoolManager \\u5408\\u7ea6\\u5730\\u5740\\r\\n    IPoolManager public poolManager;\\r\\n    /// @dev The ID of the next token that will be minted. Skips 0\\r\\n    uint256 private _nextId =1;\\r\\n\\r\\n    constructor(address _poolManager)ERC721(\\\"MetaSwapPosition\\\",\\\"MSP\\\"){\\r\\n        poolManager = IPoolManager(_poolManager);\\r\\n    }\\r\\n    // \\u7528\\u4e00\\u4e2a mapping \\u6765\\u5b58\\u653e\\u6240\\u6709 Position \\u7684\\u4fe1\\u606f\\r\\n    mapping(uint256 => PositionInfo) public positions;\\r\\n\\r\\n\\r\\n\\r\\n    function getSender() public view returns (address){\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _blockTimestamp() internal view virtual returns (uint256){\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    modifier checkDeadline(uint256 deadline){\\r\\n        require(deadline>=_blockTimestamp(),\\\"Transaction too old\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isAuthorizedForToken(uint256 tokenId){\\r\\n        address owner=ERC721.ownerOf(tokenId);\\r\\n        require(_isAuthorized(owner,msg.sender,tokenId),\\\"Not approved\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(MintParams calldata params) external payable override \\r\\n        checkDeadline(params.deadline) \\r\\n        returns (uint256 positionId, uint128 liquidity, uint256 amount0, uint256 amount1)\\r\\n    {\\r\\n        // mint \\u4e00\\u4e2a NFT \\u4f5c\\u4e3a position \\u53d1\\u7ed9 LP\\r\\n        // NFT \\u7684 tokenId \\u5c31\\u662f positionId\\r\\n        // \\u901a\\u8fc7 MintParams \\u91cc\\u9762\\u7684 token0 \\u548c token1 \\u4ee5\\u53ca index \\u83b7\\u53d6\\u5bf9\\u5e94\\u7684 Pool\\r\\n        // \\u8c03\\u7528 poolManager \\u7684 getPool \\u65b9\\u6cd5\\u83b7\\u53d6 Pool \\u5730\\u5740\\r\\n        address _pool=poolManager.getPool(params.token0,params.token1,params.index);\\r\\n        IPool pool=IPool(_pool);\\r\\n\\r\\n        // \\u901a\\u8fc7\\u83b7\\u53d6 pool \\u76f8\\u5173\\u4fe1\\u606f\\uff0c\\u7ed3\\u5408 params.amount0Desired \\u548c params.amount1Desired \\u8ba1\\u7b97\\u8fd9\\u6b21\\u8981\\u6ce8\\u5165\\u7684\\u6d41\\u52a8\\u6027\\r\\n        uint160 sqrtPriceX96=pool.sqrtPriceX96();\\r\\n        uint160 sqrtRatioAX96=TickMath.getSqrtPriceAtTick(pool.tickLower());\\r\\n        uint160 sqrtRatioBX96=TickMath.getSqrtPriceAtTick(pool.tickUpper());\\r\\n        liquidity=LiquidityAmounts.getLiquidityForAmounts(\\r\\n            sqrtPriceX96,\\r\\n            sqrtRatioAX96,\\r\\n            sqrtRatioBX96,\\r\\n            params.amount0Desired,\\r\\n            params.amount1Desired\\r\\n        );\\r\\n        // data \\u662f mint \\u540e\\u56de\\u8c03 PositionManager \\u4f1a\\u989d\\u5916\\u5e26\\u7684\\u6570\\u636e\\r\\n        // \\u9700\\u8981 PoistionManger \\u5b9e\\u73b0\\u56de\\u8c03mintCallback\\uff0c\\u5728\\u56de\\u8c03\\u4e2d\\u7ed9 Pool \\u6253\\u94b1\\r\\n        bytes memory data=abi.encode(params.token0,params.token1,params.index,msg.sender);\\r\\n        (amount0,amount1)=pool.mint(address(this),liquidity,data);\\r\\n        // \\u521b\\u5efa NFT \\u5e76\\u53d1\\u9001\\u7ed9LP\\r\\n        _mint(params.recipient,(positionId=_nextId++));\\r\\n        // \\u66f4\\u65b0 PositionInfo \\u4fe1\\u606f\\r\\n        (\\r\\n            ,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            ,\\r\\n\\r\\n        ) = pool.getPosition(address(this));\\r\\n\\r\\n        positions[positionId]=PositionInfo({\\r\\n            id:positionId,\\r\\n            owner:params.recipient,\\r\\n            token0:params.token0,\\r\\n            token1:params.token1,\\r\\n            index:params.index,\\r\\n            fee:pool.fee(),\\r\\n            liquidity:liquidity,\\r\\n            tickLower:pool.tickLower(),\\r\\n            tickUpper:pool.tickUpper(),\\r\\n            tokensOwed0:0,\\r\\n            tokensOwed1:0,\\r\\n            feeGrowthInside0LastX128:feeGrowthInside0LastX128,\\r\\n            feeGrowthInside1LastX128:feeGrowthInside1LastX128\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function burn(uint256 positionId) external override isAuthorizedForToken(positionId) \\r\\n        returns (uint256 amount0, uint256 amount1)\\r\\n    {\\r\\n        PositionInfo storage position=positions[positionId];\\r\\n        // \\u901a\\u8fc7 isAuthorizedForToken \\u68c0\\u67e5 positionId \\u662f\\u5426\\u6709\\u6743\\u9650\\r\\n        // \\u79fb\\u9664\\u6d41\\u52a8\\u6027\\uff0c\\u4f46\\u662f token \\u8fd8\\u662f\\u4fdd\\u7559\\u5728 pool \\u4e2d\\uff0c\\u9700\\u8981\\u518d\\u8c03\\u7528 collect \\u65b9\\u6cd5\\u624d\\u80fd\\u53d6\\u56de token\\r\\n        // \\u901a\\u8fc7 positionId \\u83b7\\u53d6\\u5bf9\\u5e94 LP \\u7684\\u6d41\\u52a8\\u6027\\r\\n        uint128 _liquidity=position.liquidity;\\r\\n         // \\u8c03\\u7528 Pool \\u7684\\u65b9\\u6cd5\\u7ed9 LP \\u9000\\u6d41\\u52a8\\u6027\\r\\n        address _pool=poolManager.getPool(position.token0,position.token1,position.index);\\r\\n        IPool pool=IPool(_pool);\\r\\n        (amount0,amount1)=pool.burn(_liquidity);\\r\\n        // \\u8ba1\\u7b97\\u8fd9\\u90e8\\u5206\\u6d41\\u52a8\\u6027\\u4ea7\\u751f\\u7684\\u624b\\u7eed\\u8d39\\r\\n        (\\r\\n            ,//_liquidity\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            ,\\r\\n        ) = pool.getPosition(address(this));\\r\\n\\r\\n        position.tokensOwed0+=uint128(amount0)+uint128(FullMath.mulDiv(feeGrowthInside0LastX128-position.feeGrowthInside0LastX128,position.liquidity,FixedPoint128.Q128));\\r\\n        position.tokensOwed1+=uint128(amount1)+uint128(FullMath.mulDiv(feeGrowthInside1LastX128-position.feeGrowthInside1LastX128,position.liquidity,FixedPoint128.Q128));\\r\\n\\r\\n        // \\u66f4\\u65b0 position \\u7684\\u4fe1\\u606f\\r\\n        position.feeGrowthInside0LastX128 = feeGrowthInside0LastX128;\\r\\n        position.feeGrowthInside1LastX128 = feeGrowthInside1LastX128;\\r\\n        position.liquidity = 0;\\r\\n    }\\r\\n    \\r\\n    function collect(uint256 positionId,address recipient) external override isAuthorizedForToken(positionId) \\r\\n        returns (uint256 amount0,uint256 amount1)\\r\\n    {\\r\\n        // \\u901a\\u8fc7 isAuthorizedForToken \\u68c0\\u67e5 positionId \\u662f\\u5426\\u6709\\u6743\\u9650\\r\\n        // \\u8c03\\u7528 Pool \\u7684\\u65b9\\u6cd5\\u7ed9 LP \\u9000\\u6d41\\u52a8\\u6027\\r\\n        PositionInfo storage position=positions[positionId];\\r\\n        address _pool=poolManager.getPool(position.token0,position.token1,position.index);\\r\\n        IPool pool=IPool(_pool);\\r\\n        (amount0, amount1) = pool.collect(\\r\\n            recipient,\\r\\n            position.tokensOwed0,\\r\\n            position.tokensOwed1\\r\\n        );\\r\\n\\r\\n        // position \\u5df2\\u7ecf\\u5f7b\\u5e95\\u6ca1\\u7528\\u4e86\\uff0c\\u9500\\u6bc1\\r\\n        position.tokensOwed0 = 0;\\r\\n        position.tokensOwed1 = 0;\\r\\n        // \\u9500\\u6bc1 NFT\\r\\n        _burn(positionId);\\r\\n    }\\r\\n\\r\\n    // \\u83b7\\u53d6\\u5168\\u90e8\\u7684Position\\u4fe1\\u606f\\r\\n    function getAllPositions() external view returns (PositionInfo[] memory positionInfo){\\r\\n        positionInfo = new PositionInfo[](_nextId-1);\\r\\n        for(uint32 i=0;i<_nextId-1;i++){\\r\\n            positionInfo[i] = positions[i+1];\\r\\n        }\\r\\n        return positionInfo;\\r\\n    }\\r\\n\\r\\n    // Pool.mint() \\u8c03\\u7528\\u4e86 IMintCallback(msg.sender).mintCallback(amount0, amount1, data)\\r\\n    // \\u56de\\u8c03\\u65b9\\u6cd5\\uff0cPositionManager \\u7ed9 Pool \\u6253\\u94b1\\r\\n    function mintCallback(uint256 amount0, uint256 amount1, bytes calldata data) external override{\\r\\n        //\\u68c0\\u67e5callback \\u7684\\u5408\\u7ea6\\u5730\\u5740\\u662f\\u5426\\u662fpool\\r\\n        (address token0,address token1,uint32 index,address payer)=abi.decode(data,(address,address,uint32,address));\\r\\n        address _pool=poolManager.getPool(token0,token1,index);\\r\\n        require(_pool==msg.sender,\\\"Invalid callback caller\\\");\\r\\n\\r\\n        // \\u5728\\u8fd9\\u91cc\\u7ed9 Pool \\u6253\\u94b1\\uff0c\\u9700\\u8981\\u7528\\u6237\\u5148 approve \\u8db3\\u591f\\u7684\\u91d1\\u989d\\uff0c\\u8fd9\\u91cc\\u624d\\u4f1a\\u6210\\u529f\\r\\n        if(amount0>0){\\r\\n            IERC20(token0).transferFrom(payer,msg.sender,amount0);\\r\\n        }\\r\\n        if(amount1>0){\\r\\n            IERC20(token1).transferFrom(payer,msg.sender,amount1);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x16ef022d097eb0ff238b9c537a96084e9e2b6c749743ceaa6aea521553b8f1c0\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFactory {\\r\\n    struct Parameters {\\r\\n        address factory;\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint24 fee;\\r\\n    }\\r\\n\\r\\n    function parameters() external view returns (        \\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint24 fee\\r\\n    );\\r\\n\\r\\n\\r\\n\\r\\n    event PoolCreated(address token0, address token1,uint32 index, int24 tickLower, int24 tickUpper, uint24 fee,address pool);\\r\\n\\r\\n    function getPool(address tokenA, address tokenB, uint32 index) external view returns (address pool);\\r\\n\\r\\n    function createPool(address tokenA, address tokenB, int24 tickLower, int24 tickUpper, uint24 fee) external returns (address pool);\\r\\n}\",\"keccak256\":\"0x14c33686965f51ba1080b158b0c15729827ea97e1399a8358213c7fd28abcabb\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMintCallback {\\r\\n    function mintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface ISwapCallback {\\r\\n    function swapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IPool {\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function fee() external view returns (uint24);\\r\\n    function tickLower() external view returns (int24);\\r\\n    function tickUpper() external view returns (int24);\\r\\n    function sqrtPriceX96() external view returns (uint160);\\r\\n    function tick() external view returns (int24);\\r\\n    function liquidity() external view returns (uint128);\\r\\n\\r\\n    function initialize(uint160 sqrtPriceX96) external;\\r\\n   /// feeGrowthGlobal0X128 \\u8bb0\\u5f55\\u4ece\\u521b\\u5efa\\u5230\\u73b0\\u5728\\uff0c\\u6bcf\\u4e2a\\u6d41\\u52a8\\u6027\\u7d2f\\u8ba1\\u4ea7\\u751f\\u7684 token0 \\u7684\\u624b\\u7eed\\u8d39\\r\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\r\\n\\r\\n     /// feeGrowthGlobal1X128 \\u8bb0\\u5f55\\u4ece\\u521b\\u5efa\\u5230\\u73b0\\u5728\\uff0c\\u6bcf\\u4e2a\\u6d41\\u52a8\\u6027\\u7d2f\\u8ba1\\u4ea7\\u751f\\u7684 token1 \\u7684\\u624b\\u7eed\\u8d39\\r\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\r\\n   \\r\\n    function getPosition(address owner) \\r\\n        external \\r\\n        view \\r\\n        returns(\\r\\n            uint128 _liquidity,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            uint128 tokensOwed0,\\r\\n            uint128 tokensOwed1\\r\\n        );\\r\\n\\r\\n    event Mint(\\r\\n        address sender, \\r\\n        address indexed owner, \\r\\n        uint128 amount,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function mint(address recipent, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    event Collect(\\r\\n        address indexed owner, \\r\\n        address recipient,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function collect(\\r\\n        address recipient,\\r\\n        uint128 amount0Requested,\\r\\n        uint128 amount1Requested\\r\\n    ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n    event Burn(\\r\\n        address indexed owner, \\r\\n        uint128 amount,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function burn(uint128 amount) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    event Swap(\\r\\n        address indexed sender, \\r\\n        address indexed recipient,\\r\\n        int256 amount0, \\r\\n        int256 amount1, \\r\\n        uint160 sqrtPriceX96,\\r\\n        uint128 liquidity,\\r\\n        int24 tick);\\r\\n\\r\\n    function swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data)\\r\\n    external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n   \\r\\n}\",\"keccak256\":\"0x91f0fea042b16b0df8292ba7339f45e9809f009ce9d13a925f535319e8c24659\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IFactory.sol\\\";\\r\\n\\r\\ninterface IPoolManager is IFactory {\\r\\n    struct PoolInfo {\\r\\n        address pool;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint32 index;\\r\\n        uint24 fee;\\r\\n        uint8 feeProtocol;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        int24 tick;\\r\\n        uint160 sqrtPriceX96;\\r\\n        uint128 liquidity;\\r\\n    }\\r\\n\\r\\n    struct Pair{\\r\\n        address token0;\\r\\n        address token1;\\r\\n    }\\r\\n\\r\\n    function getPairs() external view returns (Pair[] memory);\\r\\n\\r\\n    function getAllPools() external view returns (PoolInfo[] memory poolsInfo);\\r\\n\\r\\n    struct CreateAndInitializeParams{\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint160 sqrtPriceX96;\\r\\n    }\\r\\n\\r\\n    function createAndInitializePoolIfNecessary(CreateAndInitializeParams calldata params) external payable \\r\\n        returns (address pool);\\r\\n}\",\"keccak256\":\"0xf1b64ca71c457626341fdc3d18962b5ddd609a156dbcc081b346667423a9d011\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\ninterface IPositionManager is IERC721,IMintCallback {\\r\\n    struct PositionInfo{\\r\\n        uint256 id;\\r\\n        address owner;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint32 index;\\r\\n        uint24 fee;\\r\\n        uint128 liquidity;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint128 tokensOwed0;\\r\\n        uint128 tokensOwed1;\\r\\n        uint256 feeGrowthInside0LastX128;\\r\\n        uint256 feeGrowthInside1LastX128;\\r\\n    }\\r\\n\\r\\n    function getAllPositions() external view returns (PositionInfo[] memory positionInfo);\\r\\n\\r\\n    struct MintParams{\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint32 index;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    function mint(MintParams calldata params) external payable returns \\r\\n    (uint256 positionId, uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function burn(uint256 positionId) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collect(uint256 positionId, address recipient) \\r\\n    external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n}\",\"keccak256\":\"0x6338591d943974bbf1db8e219c5b2475f21bab98ece4d1d080061b6893d51068\",\"license\":\"MIT\"},\"contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\n/// @author Solady (https://github.com/Vectorized/solady/blob/8200a70e8dc2a77ecb074fc2e99a2a0d36547522/src/utils/LibBit.sol)\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(\\n                        0x1f,\\n                        shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)\\n                    ),\\n                    0x0706060506020500060203020504000106050205030304010505030400000000\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Isolate the least significant bit.\\n            x := and(x, sub(0, x))\\n            // For the upper 3 bits of the result, use a De Bruijn-like lookup.\\n            // Credit to adhusson: https://blog.adhusson.com/cheap-find-first-set-evm/\\n            // forgefmt: disable-next-item\\n            r := shl(\\n                5,\\n                shr(\\n                    252,\\n                    shl(\\n                        shl(\\n                            2,\\n                            shr(\\n                                250,\\n                                mul(\\n                                    x,\\n                                    0xb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff\\n                                )\\n                            )\\n                        ),\\n                        0x8040405543005266443200005020610674053026020000107506200176117077\\n                    )\\n                )\\n            )\\n            // For the lower 5 bits of the result, use a De Bruijn lookup.\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(div(0xd76453e0, shr(r, x)), 0x1f),\\n                    0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x834f1c376abeeef84a21f9dc40897c61ecee062000df6eb52be00da7a92cbc6d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CustomRevert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library for reverting with custom errors efficiently\\n/// @notice Contains functions for reverting with custom errors with different argument types efficiently\\n/// @dev To use this library, declare `using CustomRevert for bytes4;` and replace `revert CustomError()` with\\n/// `CustomError.selector.revertWith()`\\n/// @dev The functions may tamper with the free memory pointer but it is fine since the call context is exited immediately\\nlibrary CustomRevert {\\n    /// @dev Reverts with the selector of a custom error in the scratch space\\n    function revertWith(bytes4 selector) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            revert(0, 0x04)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an address argument in the scratch space\\n    function revertWith(bytes4 selector, address addr) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(addr, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an int24 argument in the scratch space\\n    function revertWith(bytes4 selector, int24 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, signextend(2, value))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with a uint160 argument in the scratch space\\n    function revertWith(bytes4 selector, uint160 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two int24 arguments\\n    function revertWith(\\n        bytes4 selector,\\n        int24 value1,\\n        int24 value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), signextend(2, value1))\\n            mstore(add(fmp, 0x24), signextend(2, value2))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two uint160 arguments\\n    function revertWith(\\n        bytes4 selector,\\n        uint160 value1,\\n        uint160 value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(\\n                add(fmp, 0x04),\\n                and(value1, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(fmp, 0x24),\\n                and(value2, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two address arguments\\n    function revertWith(\\n        bytes4 selector,\\n        address value1,\\n        address value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(\\n                add(fmp, 0x04),\\n                and(value1, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(fmp, 0x24),\\n                and(value2, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @notice bubble up the revert message returned by a call and revert with the selector provided\\n    /// @dev this function should only be used with custom errors of the type `CustomError(address target, bytes revertReason)`\\n    function bubbleUpAndRevertWith(\\n        bytes4 selector,\\n        address addr\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let size := returndatasize()\\n            let fmp := mload(0x40)\\n\\n            // Encode selector, address, offset, size, data\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), addr)\\n            mstore(add(fmp, 0x24), 0x40)\\n            mstore(add(fmp, 0x44), size)\\n            returndatacopy(add(fmp, 0x64), 0, size)\\n\\n            // Ensure the size is a multiple of 32 bytes\\n            let encodedSize := add(0x64, mul(div(add(size, 31), 32), 32))\\n            revert(fmp, encodedSize)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf305488235157fc365b6d64b15b3526d803a9673c503b5cf40059cc0a006f340\",\"license\":\"MIT\"},\"contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0 = a * b; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly (\\\"memory-safe\\\") {\\n                let mm := mulmod(a, b, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                assembly (\\\"memory-safe\\\") {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly (\\\"memory-safe\\\") {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly (\\\"memory-safe\\\") {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly (\\\"memory-safe\\\") {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly (\\\"memory-safe\\\") {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the preconditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(++result > 0);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97f12e3b616807076c16b3ecc8cd932bb320d40e4f1cab92b99065302a0d7f5a\",\"license\":\"MIT\"},\"contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(\\n            sqrtRatioAX96,\\n            sqrtRatioBX96,\\n            FixedPoint96.Q96\\n        );\\n        return\\n            toUint128(\\n                FullMath.mulDiv(\\n                    amount0,\\n                    intermediate,\\n                    sqrtRatioBX96 - sqrtRatioAX96\\n                )\\n            );\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return\\n            toUint128(\\n                FullMath.mulDiv(\\n                    amount1,\\n                    FixedPoint96.Q96,\\n                    sqrtRatioBX96 - sqrtRatioAX96\\n                )\\n            );\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(\\n                sqrtRatioAX96,\\n                sqrtRatioBX96,\\n                amount0\\n            );\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(\\n                sqrtRatioX96,\\n                sqrtRatioBX96,\\n                amount0\\n            );\\n            uint128 liquidity1 = getLiquidityForAmount1(\\n                sqrtRatioAX96,\\n                sqrtRatioX96,\\n                amount1\\n            );\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(\\n                sqrtRatioAX96,\\n                sqrtRatioBX96,\\n                amount1\\n            );\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                liquidity,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                FixedPoint96.Q96\\n            );\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(\\n                sqrtRatioAX96,\\n                sqrtRatioBX96,\\n                liquidity\\n            );\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(\\n                sqrtRatioX96,\\n                sqrtRatioBX96,\\n                liquidity\\n            );\\n            amount1 = getAmount1ForLiquidity(\\n                sqrtRatioAX96,\\n                sqrtRatioX96,\\n                liquidity\\n            );\\n        } else {\\n            amount1 = getAmount1ForLiquidity(\\n                sqrtRatioAX96,\\n                sqrtRatioBX96,\\n                liquidity\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb58606d183e32e0798821fd4354f5e15889a963b9dc66fe7ac52e5a6e139a496\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Thrown when the tick passed to #getSqrtPriceAtTick is not between MIN_TICK and MAX_TICK\\n    error InvalidTick(int24 tick);\\n    /// @notice Thrown when the price passed to #getTickAtSqrtPrice does not correspond to a price between MIN_TICK and MAX_TICK\\n    error InvalidSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**-128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MAX_TICK = 887272;\\n\\n    /// @dev The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range [1, 32767]\\n    int24 internal constant MIN_TICK_SPACING = 1;\\n    /// @dev The maximum tick spacing value drawn from the range of type int16, i.e. max from the range [1, 32767]\\n    int24 internal constant MAX_TICK_SPACING = type(int16).max;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_PRICE =\\n        1461446703485210103287273052203988822378723970342;\\n    /// @dev A threshold used for optimized bounds check, equals `MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1`\\n    uint160 internal constant MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE =\\n        1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\\n\\n    /// @notice Given a tickSpacing, compute the maximum usable tick\\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MAX_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Given a tickSpacing, compute the minimum usable tick\\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MIN_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the price of the two assets (currency1/currency0)\\n    /// at the given tick\\n    function getSqrtPriceAtTick(\\n        int24 tick\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick;\\n            assembly (\\\"memory-safe\\\") {\\n                tick := signextend(2, tick)\\n                // mask = 0 if tick >= 0 else -1 (all 1s)\\n                let mask := sar(255, tick)\\n                // if tick >= 0, |tick| = tick = 0 ^ tick\\n                // if tick < 0, |tick| = ~~|tick| = ~(-|tick| - 1) = ~(tick - 1) = (-1) ^ (tick - 1)\\n                // either way, |tick| = mask ^ (tick + mask)\\n                absTick := xor(mask, add(mask, tick))\\n            }\\n\\n            if (absTick > uint256(int256(MAX_TICK)))\\n                InvalidTick.selector.revertWith(tick);\\n\\n            // The tick is decomposed into bits, and for each bit with index i that is set, the product of 1/sqrt(1.0001^(2^i))\\n            // is calculated (using Q128.128). The constants used for this calculation are rounded to the nearest integer\\n\\n            // Equivalent to:\\n            //     price = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            //     or price = int(2**128 / sqrt(1.0001)) if (absTick & 0x1) else 1 << 128\\n            uint256 price;\\n            assembly (\\\"memory-safe\\\") {\\n                price := xor(\\n                    shl(128, 1),\\n                    mul(\\n                        xor(shl(128, 1), 0xfffcb933bd6fad37aa2d162d1a594001),\\n                        and(absTick, 0x1)\\n                    )\\n                )\\n            }\\n            if (absTick & 0x2 != 0)\\n                price = (price * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0)\\n                price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0)\\n                price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0)\\n                price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0)\\n                price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0)\\n                price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0)\\n                price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0)\\n                price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0)\\n                price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0)\\n                price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0)\\n                price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0)\\n                price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0)\\n                price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0)\\n                price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0)\\n                price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0)\\n                price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0)\\n                price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0)\\n                price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0)\\n                price = (price * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                // if (tick > 0) price = type(uint256).max / price;\\n                if sgt(tick, 0) {\\n                    price := div(not(0), price)\\n                }\\n\\n                // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n                // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n                // we round up in the division so getTickAtSqrtPrice of the output price is always consistent\\n                // `sub(shl(32, 1), 1)` is `type(uint32).max`\\n                // `price + type(uint32).max` will not overflow because `price` fits in 192 bits\\n                sqrtPriceX96 := shr(32, add(price, sub(shl(32, 1), 1)))\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getSqrtPriceAtTick(tick) <= sqrtPriceX96\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_PRICE, as MIN_SQRT_PRICE is the lowest value getSqrtPriceAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt price for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the getSqrtPriceAtTick(tick) is less than or equal to the input sqrtPriceX96\\n    function getTickAtSqrtPrice(\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (int24 tick) {\\n        unchecked {\\n            // Equivalent: if (sqrtPriceX96 < MIN_SQRT_PRICE || sqrtPriceX96 >= MAX_SQRT_PRICE) revert InvalidSqrtPrice();\\n            // second inequality must be >= because the price can never reach the price at the max tick\\n            // if sqrtPriceX96 < MIN_SQRT_PRICE, the `sub` underflows and `gt` is true\\n            // if sqrtPriceX96 >= MAX_SQRT_PRICE, sqrtPriceX96 - MIN_SQRT_PRICE > MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1\\n            if (\\n                (sqrtPriceX96 - MIN_SQRT_PRICE) >\\n                MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE\\n            ) {\\n                InvalidSqrtPrice.selector.revertWith(sqrtPriceX96);\\n            }\\n\\n            uint256 price = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = price;\\n            uint256 msb = BitMath.mostSignificantBit(r);\\n\\n            if (msb >= 128) r = price >> (msb - 127);\\n            else r = price << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // Q22.128 number\\n\\n            // Magic number represents the ceiling of the maximum value of the error when approximating log_sqrt10001(x)\\n            int24 tickLow = int24(\\n                (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n            );\\n\\n            // Magic number represents the minimum value of the error when approximating log_sqrt10001(x), when\\n            // sqrtPrice is from the range (2^-64, 2^64). This is safe as MIN_SQRT_PRICE is more than 2^-64. If MIN_SQRT_PRICE\\n            // is changed, this may need to be changed too\\n            int24 tickHi = int24(\\n                (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n            );\\n\\n            tick = tickLow == tickHi\\n                ? tickLow\\n                : getSqrtPriceAtTick(tickHi) <= sqrtPriceX96\\n                ? tickHi\\n                : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88c11c5f3e6266a6d9433e76279615a8c1fc199d9e3d13b9c0b559f9b0b82097\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 936,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 938,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 942,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 946,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 950,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 956,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 8847,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "poolManager",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(IPoolManager)10365"
          },
          {
            "astId": 8851,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "_nextId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8872,
            "contract": "contracts/PositionManager.sol:PositionManager",
            "label": "positions",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(PositionInfo)10401_storage)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IPoolManager)10365": {
            "encoding": "inplace",
            "label": "contract IPoolManager",
            "numberOfBytes": "20"
          },
          "t_int24": {
            "encoding": "inplace",
            "label": "int24",
            "numberOfBytes": "3"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_struct(PositionInfo)10401_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct IPositionManager.PositionInfo)",
            "numberOfBytes": "32",
            "value": "t_struct(PositionInfo)10401_storage"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(PositionInfo)10401_storage": {
            "encoding": "inplace",
            "label": "struct IPositionManager.PositionInfo",
            "members": [
              {
                "astId": 10376,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "id",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 10378,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "owner",
                "offset": 0,
                "slot": "1",
                "type": "t_address"
              },
              {
                "astId": 10380,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "token0",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
              },
              {
                "astId": 10382,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "token1",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
              },
              {
                "astId": 10384,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "index",
                "offset": 20,
                "slot": "3",
                "type": "t_uint32"
              },
              {
                "astId": 10386,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "fee",
                "offset": 24,
                "slot": "3",
                "type": "t_uint24"
              },
              {
                "astId": 10388,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "liquidity",
                "offset": 0,
                "slot": "4",
                "type": "t_uint128"
              },
              {
                "astId": 10390,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "tickLower",
                "offset": 16,
                "slot": "4",
                "type": "t_int24"
              },
              {
                "astId": 10392,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "tickUpper",
                "offset": 19,
                "slot": "4",
                "type": "t_int24"
              },
              {
                "astId": 10394,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "tokensOwed0",
                "offset": 0,
                "slot": "5",
                "type": "t_uint128"
              },
              {
                "astId": 10396,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "tokensOwed1",
                "offset": 16,
                "slot": "5",
                "type": "t_uint128"
              },
              {
                "astId": 10398,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "feeGrowthInside0LastX128",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
              },
              {
                "astId": 10400,
                "contract": "contracts/PositionManager.sol:PositionManager",
                "label": "feeGrowthInside1LastX128",
                "offset": 0,
                "slot": "7",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "256"
          },
          "t_uint128": {
            "encoding": "inplace",
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint24": {
            "encoding": "inplace",
            "label": "uint24",
            "numberOfBytes": "3"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "encoding": "inplace",
            "label": "uint32",
            "numberOfBytes": "4"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721Receiver-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(reason, 0x20), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2²⁵⁶ + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(add(buffer, 0x20), offset))\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/ERC721/MyToken.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract MyToken is ERC721, Ownable {\\r\\n    uint256 private _nextTokenId=0;\\r\\n    constructor() ERC721(\\\"MetaSwapToken\\\", \\\"MST\\\") Ownable(msg.sender) {}\\r\\n\\r\\n    function mint(uint256 quantity) public payable {\\r\\n        require(quantity == 1, \\\"Quantity must be 1\\\");\\r\\n        require(msg.value == 0.001 ether, \\\"Price must be 0.001 ether\\\");\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _mint(msg.sender, tokenId);\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/Factory.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IFactory.sol\\\";\\r\\nimport \\\"./Pool.sol\\\";\\r\\n\\r\\ncontract Factory is IFactory {\\r\\n\\r\\n    Parameters public override parameters;\\r\\n\\r\\n    mapping(address => mapping(address => address[])) public  pools;\\r\\n\\r\\n    function sortToken(address tokenA,address tokenB) private pure returns (address,address){\\r\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n    }\\r\\n\\r\\n    function createPool(address tokenA, address tokenB, int24 tickLower, int24 tickUpper, uint24 fee) \\r\\n        external returns (address pool){\\r\\n        require(tokenA != tokenB, \\\"TokenA and TokenB cannot be the same\\\");\\r\\n\\r\\n        address token0;\\r\\n        address token1;\\r\\n        // sort token, avoid the mistake of the order 将tokenA和tokenB按大小排序\\r\\n        (token0,token1) = sortToken(tokenA, tokenB);\\r\\n\\r\\n        //get current all pools\\r\\n        address[] memory existingPools  = pools[token0][token1];\\r\\n        // check if the pool already exists \\r\\n        // 有点耗gas，可以优化\\r\\n        for(uint i = 0; i < existingPools.length; i++){\\r\\n            IPool currentPool =IPool(existingPools[i]);\\r\\n            if (currentPool.tickLower() == tickLower && \\r\\n                currentPool.tickUpper() == tickUpper && \\r\\n                currentPool.fee() == fee){\\r\\n                // if the pool already exists, return the pool\\r\\n                return existingPools[i];\\r\\n            }\\r\\n        }\\r\\n        //save the pool info\\r\\n        parameters = Parameters(address(this), tokenA, tokenB, tickLower, tickUpper, fee);\\r\\n        // generate create2 salt\\r\\n        bytes32 salt = keccak256(abi.encode(token0, token1, tickLower, tickUpper, fee));\\r\\n        // create pool\\r\\n        // salt 来使用 CREATE2 的方式来创建合约，这样的好处是创建出来的合约地址是可预测的，\\r\\n        // 地址生成的逻辑是 新地址 = hash(\\\"0xFF\\\",创建者地址, salt, initcode)\\r\\n        pool=address(new Pool{salt:salt}());\\r\\n        // save created pool\\r\\n        pools[token0][token1].push(pool);\\r\\n        // delete pool info\\r\\n        delete parameters;\\r\\n        //emit PoolCreated event\\r\\n        emit PoolCreated(token0, token1, uint32(existingPools.length), tickLower, tickUpper, fee, pool);\\r\\n    }\\r\\n\\r\\n    function getPool(address tokenA, address tokenB, uint32 index) external view override returns (address pool){\\r\\n        require(tokenA != tokenB, \\\"TokenA and TokenB cannot be the same\\\");\\r\\n        require(tokenA != address(0) && tokenB != address(0), \\\"ZERO_ADDRESS\\\");\\r\\n\\r\\n        address token0;\\r\\n        address token1;\\r\\n\\r\\n        (token0,token1) = sortToken(tokenA, tokenB);\\r\\n\\r\\n        pool = pools[token0][token1][index];\\r\\n\\r\\n        require(pool != address(0), \\\"POOL_NOT_EXISTS\\\");\\r\\n\\r\\n        return pool;\\r\\n    }\\r\\n\\r\\n    \\r\\n}\"\n    },\n    \"contracts/interfaces/IFactory.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFactory {\\r\\n    struct Parameters {\\r\\n        address factory;\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint24 fee;\\r\\n    }\\r\\n\\r\\n    function parameters() external view returns (        \\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint24 fee\\r\\n    );\\r\\n\\r\\n\\r\\n\\r\\n    event PoolCreated(address token0, address token1,uint32 index, int24 tickLower, int24 tickUpper, uint24 fee,address pool);\\r\\n\\r\\n    function getPool(address tokenA, address tokenB, uint32 index) external view returns (address pool);\\r\\n\\r\\n    function createPool(address tokenA, address tokenB, int24 tickLower, int24 tickUpper, uint24 fee) external returns (address pool);\\r\\n}\"\n    },\n    \"contracts/interfaces/IPool.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMintCallback {\\r\\n    function mintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface ISwapCallback {\\r\\n    function swapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IPool {\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function fee() external view returns (uint24);\\r\\n    function tickLower() external view returns (int24);\\r\\n    function tickUpper() external view returns (int24);\\r\\n    function sqrtPriceX96() external view returns (uint160);\\r\\n    function tick() external view returns (int24);\\r\\n    function liquidity() external view returns (uint128);\\r\\n\\r\\n    function initialize(uint160 sqrtPriceX96) external;\\r\\n   /// feeGrowthGlobal0X128 记录从创建到现在，每个流动性累计产生的 token0 的手续费\\r\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\r\\n\\r\\n     /// feeGrowthGlobal1X128 记录从创建到现在，每个流动性累计产生的 token1 的手续费\\r\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\r\\n   \\r\\n    function getPosition(address owner) \\r\\n        external \\r\\n        view \\r\\n        returns(\\r\\n            uint128 _liquidity,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            uint128 tokensOwed0,\\r\\n            uint128 tokensOwed1\\r\\n        );\\r\\n\\r\\n    event Mint(\\r\\n        address sender, \\r\\n        address indexed owner, \\r\\n        uint128 amount,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function mint(address recipent, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    event Collect(\\r\\n        address indexed owner, \\r\\n        address recipient,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function collect(\\r\\n        address recipient,\\r\\n        uint128 amount0Requested,\\r\\n        uint128 amount1Requested\\r\\n    ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n    event Burn(\\r\\n        address indexed owner, \\r\\n        uint128 amount,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function burn(uint128 amount) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    event Swap(\\r\\n        address indexed sender, \\r\\n        address indexed recipient,\\r\\n        int256 amount0, \\r\\n        int256 amount1, \\r\\n        uint160 sqrtPriceX96,\\r\\n        uint128 liquidity,\\r\\n        int24 tick);\\r\\n\\r\\n    function swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data)\\r\\n    external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n   \\r\\n}\"\n    },\n    \"contracts/interfaces/IPoolManager.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IFactory.sol\\\";\\r\\n\\r\\ninterface IPoolManager is IFactory {\\r\\n    struct PoolInfo {\\r\\n        address pool;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint32 index;\\r\\n        uint24 fee;\\r\\n        uint8 feeProtocol;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        int24 tick;\\r\\n        uint160 sqrtPriceX96;\\r\\n        uint128 liquidity;\\r\\n    }\\r\\n\\r\\n    struct Pair{\\r\\n        address token0;\\r\\n        address token1;\\r\\n    }\\r\\n\\r\\n    function getPairs() external view returns (Pair[] memory);\\r\\n\\r\\n    function getAllPools() external view returns (PoolInfo[] memory poolsInfo);\\r\\n\\r\\n    struct CreateAndInitializeParams{\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint160 sqrtPriceX96;\\r\\n    }\\r\\n\\r\\n    function createAndInitializePoolIfNecessary(CreateAndInitializeParams calldata params) external payable \\r\\n        returns (address pool);\\r\\n}\"\n    },\n    \"contracts/interfaces/IPositionManager.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\ninterface IPositionManager is IERC721,IMintCallback {\\r\\n    struct PositionInfo{\\r\\n        uint256 id;\\r\\n        address owner;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint32 index;\\r\\n        uint24 fee;\\r\\n        uint128 liquidity;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint128 tokensOwed0;\\r\\n        uint128 tokensOwed1;\\r\\n        uint256 feeGrowthInside0LastX128;\\r\\n        uint256 feeGrowthInside1LastX128;\\r\\n    }\\r\\n\\r\\n    function getAllPositions() external view returns (PositionInfo[] memory positionInfo);\\r\\n\\r\\n    struct MintParams{\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint32 index;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    function mint(MintParams calldata params) external payable returns \\r\\n    (uint256 positionId, uint128 liquidity, uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function burn(uint256 positionId) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function collect(uint256 positionId, address recipient) \\r\\n    external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n}\"\n    },\n    \"contracts/interfaces/ISwapRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\ninterface ISwapRouter is ISwapCallback{\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        bool zeroForOne,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountInRemaining,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        address tokenIn;           // 输入代币\\r\\n        address tokenOut;          // 输出代币\\r\\n        uint32[] indexPath;        // 交易路径\\r\\n        address recipient;         // 接收者\\r\\n        uint256 deadline;          // 截止时间\\r\\n        uint256 amountIn;          // 指定输入数量（用户确定）\\r\\n        uint256 amountOutMinimum;  // 最少输出数量（滑点保护）\\r\\n        uint160 sqrtPriceLimitX96; // 价格限制\\r\\n    }\\r\\n\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n    \\r\\n    struct ExactOutputParams {\\r\\n        address tokenIn;           // 输入代币\\r\\n        address tokenOut;          // 输出代币\\r\\n        uint32[] indexPath;        // 交易路径\\r\\n        address recipient;         // 接收者\\r\\n        uint256 deadline;          // 截止时间\\r\\n        uint256 amountOut;         // 指定输出数量（用户确定）\\r\\n        uint256 amountInMaximum;   // 最多输入数量（滑点保护）\\r\\n        uint160 sqrtPriceLimitX96; // 价格限制\\r\\n    }\\r\\n\\r\\n     function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct QuoteExactInputParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint32[] indexPath;\\r\\n        uint256 amountIn;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    function quoteExactInput(\\r\\n        QuoteExactInputParams calldata params\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n     struct QuoteExactOutputParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint32[] indexPath;\\r\\n        uint256 amountOut;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        QuoteExactOutputParams calldata params\\r\\n    ) external returns (uint256 amountIn);\\r\\n}\"\n    },\n    \"contracts/libraries/BitMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\n/// @author Solady (https://github.com/Vectorized/solady/blob/8200a70e8dc2a77ecb074fc2e99a2a0d36547522/src/utils/LibBit.sol)\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(\\n                        0x1f,\\n                        shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)\\n                    ),\\n                    0x0706060506020500060203020504000106050205030304010505030400000000\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Isolate the least significant bit.\\n            x := and(x, sub(0, x))\\n            // For the upper 3 bits of the result, use a De Bruijn-like lookup.\\n            // Credit to adhusson: https://blog.adhusson.com/cheap-find-first-set-evm/\\n            // forgefmt: disable-next-item\\n            r := shl(\\n                5,\\n                shr(\\n                    252,\\n                    shl(\\n                        shl(\\n                            2,\\n                            shr(\\n                                250,\\n                                mul(\\n                                    x,\\n                                    0xb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff\\n                                )\\n                            )\\n                        ),\\n                        0x8040405543005266443200005020610674053026020000107506200176117077\\n                    )\\n                )\\n            )\\n            // For the lower 5 bits of the result, use a De Bruijn lookup.\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(div(0xd76453e0, shr(r, x)), 0x1f),\\n                    0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405\\n                )\\n            )\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/CustomRevert.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library for reverting with custom errors efficiently\\n/// @notice Contains functions for reverting with custom errors with different argument types efficiently\\n/// @dev To use this library, declare `using CustomRevert for bytes4;` and replace `revert CustomError()` with\\n/// `CustomError.selector.revertWith()`\\n/// @dev The functions may tamper with the free memory pointer but it is fine since the call context is exited immediately\\nlibrary CustomRevert {\\n    /// @dev Reverts with the selector of a custom error in the scratch space\\n    function revertWith(bytes4 selector) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            revert(0, 0x04)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an address argument in the scratch space\\n    function revertWith(bytes4 selector, address addr) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(addr, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an int24 argument in the scratch space\\n    function revertWith(bytes4 selector, int24 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, signextend(2, value))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with a uint160 argument in the scratch space\\n    function revertWith(bytes4 selector, uint160 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two int24 arguments\\n    function revertWith(\\n        bytes4 selector,\\n        int24 value1,\\n        int24 value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), signextend(2, value1))\\n            mstore(add(fmp, 0x24), signextend(2, value2))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two uint160 arguments\\n    function revertWith(\\n        bytes4 selector,\\n        uint160 value1,\\n        uint160 value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(\\n                add(fmp, 0x04),\\n                and(value1, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(fmp, 0x24),\\n                and(value2, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two address arguments\\n    function revertWith(\\n        bytes4 selector,\\n        address value1,\\n        address value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(\\n                add(fmp, 0x04),\\n                and(value1, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(fmp, 0x24),\\n                and(value2, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @notice bubble up the revert message returned by a call and revert with the selector provided\\n    /// @dev this function should only be used with custom errors of the type `CustomError(address target, bytes revertReason)`\\n    function bubbleUpAndRevertWith(\\n        bytes4 selector,\\n        address addr\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let size := returndatasize()\\n            let fmp := mload(0x40)\\n\\n            // Encode selector, address, offset, size, data\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), addr)\\n            mstore(add(fmp, 0x24), 0x40)\\n            mstore(add(fmp, 0x44), size)\\n            returndatacopy(add(fmp, 0x64), 0, size)\\n\\n            // Ensure the size is a multiple of 32 bytes\\n            let encodedSize := add(0x64, mul(div(add(size, 31), 32), 32))\\n            revert(fmp, encodedSize)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/FixedPoint128.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\"\n    },\n    \"contracts/libraries/FixedPoint96.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\n    },\n    \"contracts/libraries/FullMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0 = a * b; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly (\\\"memory-safe\\\") {\\n                let mm := mulmod(a, b, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                assembly (\\\"memory-safe\\\") {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly (\\\"memory-safe\\\") {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly (\\\"memory-safe\\\") {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly (\\\"memory-safe\\\") {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly (\\\"memory-safe\\\") {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the preconditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(++result > 0);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/LiquidityAmounts.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(\\n            sqrtRatioAX96,\\n            sqrtRatioBX96,\\n            FixedPoint96.Q96\\n        );\\n        return\\n            toUint128(\\n                FullMath.mulDiv(\\n                    amount0,\\n                    intermediate,\\n                    sqrtRatioBX96 - sqrtRatioAX96\\n                )\\n            );\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return\\n            toUint128(\\n                FullMath.mulDiv(\\n                    amount1,\\n                    FixedPoint96.Q96,\\n                    sqrtRatioBX96 - sqrtRatioAX96\\n                )\\n            );\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(\\n                sqrtRatioAX96,\\n                sqrtRatioBX96,\\n                amount0\\n            );\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(\\n                sqrtRatioX96,\\n                sqrtRatioBX96,\\n                amount0\\n            );\\n            uint128 liquidity1 = getLiquidityForAmount1(\\n                sqrtRatioAX96,\\n                sqrtRatioX96,\\n                amount1\\n            );\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(\\n                sqrtRatioAX96,\\n                sqrtRatioBX96,\\n                amount1\\n            );\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                sqrtRatioBX96\\n            ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            FullMath.mulDiv(\\n                liquidity,\\n                sqrtRatioBX96 - sqrtRatioAX96,\\n                FixedPoint96.Q96\\n            );\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(\\n                sqrtRatioAX96,\\n                sqrtRatioBX96,\\n                liquidity\\n            );\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(\\n                sqrtRatioX96,\\n                sqrtRatioBX96,\\n                liquidity\\n            );\\n            amount1 = getAmount1ForLiquidity(\\n                sqrtRatioAX96,\\n                sqrtRatioX96,\\n                liquidity\\n            );\\n        } else {\\n            amount1 = getAmount1ForLiquidity(\\n                sqrtRatioAX96,\\n                sqrtRatioBX96,\\n                liquidity\\n            );\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/LiquidityMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/LowGasSafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2 ** 255);\\n        z = int256(y);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/SqrtPriceMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./LowGasSafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return\\n                        uint160(\\n                            FullMath.mulDivRoundingUp(\\n                                numerator1,\\n                                sqrtPX96,\\n                                denominator\\n                            )\\n                        );\\n            }\\n\\n            return\\n                uint160(\\n                    UnsafeMath.divRoundingUp(\\n                        numerator1,\\n                        (numerator1 / sqrtPX96).add(amount)\\n                    )\\n                );\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require(\\n                (product = amount * sqrtPX96) / amount == sqrtPX96 &&\\n                    numerator1 > product\\n            );\\n            uint256 denominator = numerator1 - product;\\n            return\\n                FullMath\\n                    .mulDivRoundingUp(numerator1, sqrtPX96, denominator)\\n                    .toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? UnsafeMath.divRoundingUp(\\n                        amount << FixedPoint96.RESOLUTION,\\n                        liquidity\\n                    )\\n                    : FullMath.mulDivRoundingUp(\\n                        amount,\\n                        FixedPoint96.Q96,\\n                        liquidity\\n                    )\\n            );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountIn,\\n                    true\\n                )\\n                : getNextSqrtPriceFromAmount1RoundingDown(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountIn,\\n                    true\\n                );\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountOut,\\n                    false\\n                )\\n                : getNextSqrtPriceFromAmount0RoundingUp(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountOut,\\n                    false\\n                );\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(\\n                        numerator1,\\n                        numerator2,\\n                        sqrtRatioBX96\\n                    ),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) /\\n                    sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(\\n                    liquidity,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    FixedPoint96.Q96\\n                )\\n                : FullMath.mulDiv(\\n                    liquidity,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    FixedPoint96.Q96\\n                );\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(-liquidity),\\n                    false\\n                ).toInt256()\\n                : getAmount0Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(liquidity),\\n                    true\\n                ).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(-liquidity),\\n                    false\\n                ).toInt256()\\n                : getAmount1Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(liquidity),\\n                    true\\n                ).toInt256();\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/SwapMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./SqrtPriceMath.sol\\\";\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(\\n                uint256(amountRemaining),\\n                1e6 - feePips,\\n                1e6\\n            );\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioTargetX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    true\\n                )\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioTargetX96,\\n                    liquidity,\\n                    true\\n                );\\n            if (amountRemainingLessFee >= amountIn)\\n                sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioTargetX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    false\\n                )\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioTargetX96,\\n                    liquidity,\\n                    false\\n                );\\n            if (uint256(-amountRemaining) >= amountOut)\\n                sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioNextX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    true\\n                );\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioNextX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    false\\n                );\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioNextX96,\\n                    liquidity,\\n                    true\\n                );\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioNextX96,\\n                    liquidity,\\n                    false\\n                );\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(\\n                amountIn,\\n                feePips,\\n                1e6 - feePips\\n            );\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/TickMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Thrown when the tick passed to #getSqrtPriceAtTick is not between MIN_TICK and MAX_TICK\\n    error InvalidTick(int24 tick);\\n    /// @notice Thrown when the price passed to #getTickAtSqrtPrice does not correspond to a price between MIN_TICK and MAX_TICK\\n    error InvalidSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**-128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MAX_TICK = 887272;\\n\\n    /// @dev The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range [1, 32767]\\n    int24 internal constant MIN_TICK_SPACING = 1;\\n    /// @dev The maximum tick spacing value drawn from the range of type int16, i.e. max from the range [1, 32767]\\n    int24 internal constant MAX_TICK_SPACING = type(int16).max;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_PRICE =\\n        1461446703485210103287273052203988822378723970342;\\n    /// @dev A threshold used for optimized bounds check, equals `MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1`\\n    uint160 internal constant MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE =\\n        1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\\n\\n    /// @notice Given a tickSpacing, compute the maximum usable tick\\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MAX_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Given a tickSpacing, compute the minimum usable tick\\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MIN_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the price of the two assets (currency1/currency0)\\n    /// at the given tick\\n    function getSqrtPriceAtTick(\\n        int24 tick\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick;\\n            assembly (\\\"memory-safe\\\") {\\n                tick := signextend(2, tick)\\n                // mask = 0 if tick >= 0 else -1 (all 1s)\\n                let mask := sar(255, tick)\\n                // if tick >= 0, |tick| = tick = 0 ^ tick\\n                // if tick < 0, |tick| = ~~|tick| = ~(-|tick| - 1) = ~(tick - 1) = (-1) ^ (tick - 1)\\n                // either way, |tick| = mask ^ (tick + mask)\\n                absTick := xor(mask, add(mask, tick))\\n            }\\n\\n            if (absTick > uint256(int256(MAX_TICK)))\\n                InvalidTick.selector.revertWith(tick);\\n\\n            // The tick is decomposed into bits, and for each bit with index i that is set, the product of 1/sqrt(1.0001^(2^i))\\n            // is calculated (using Q128.128). The constants used for this calculation are rounded to the nearest integer\\n\\n            // Equivalent to:\\n            //     price = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            //     or price = int(2**128 / sqrt(1.0001)) if (absTick & 0x1) else 1 << 128\\n            uint256 price;\\n            assembly (\\\"memory-safe\\\") {\\n                price := xor(\\n                    shl(128, 1),\\n                    mul(\\n                        xor(shl(128, 1), 0xfffcb933bd6fad37aa2d162d1a594001),\\n                        and(absTick, 0x1)\\n                    )\\n                )\\n            }\\n            if (absTick & 0x2 != 0)\\n                price = (price * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0)\\n                price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0)\\n                price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0)\\n                price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0)\\n                price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0)\\n                price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0)\\n                price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0)\\n                price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0)\\n                price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0)\\n                price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0)\\n                price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0)\\n                price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0)\\n                price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0)\\n                price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0)\\n                price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0)\\n                price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0)\\n                price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0)\\n                price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0)\\n                price = (price * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                // if (tick > 0) price = type(uint256).max / price;\\n                if sgt(tick, 0) {\\n                    price := div(not(0), price)\\n                }\\n\\n                // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n                // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n                // we round up in the division so getTickAtSqrtPrice of the output price is always consistent\\n                // `sub(shl(32, 1), 1)` is `type(uint32).max`\\n                // `price + type(uint32).max` will not overflow because `price` fits in 192 bits\\n                sqrtPriceX96 := shr(32, add(price, sub(shl(32, 1), 1)))\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getSqrtPriceAtTick(tick) <= sqrtPriceX96\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_PRICE, as MIN_SQRT_PRICE is the lowest value getSqrtPriceAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt price for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the getSqrtPriceAtTick(tick) is less than or equal to the input sqrtPriceX96\\n    function getTickAtSqrtPrice(\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (int24 tick) {\\n        unchecked {\\n            // Equivalent: if (sqrtPriceX96 < MIN_SQRT_PRICE || sqrtPriceX96 >= MAX_SQRT_PRICE) revert InvalidSqrtPrice();\\n            // second inequality must be >= because the price can never reach the price at the max tick\\n            // if sqrtPriceX96 < MIN_SQRT_PRICE, the `sub` underflows and `gt` is true\\n            // if sqrtPriceX96 >= MAX_SQRT_PRICE, sqrtPriceX96 - MIN_SQRT_PRICE > MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1\\n            if (\\n                (sqrtPriceX96 - MIN_SQRT_PRICE) >\\n                MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE\\n            ) {\\n                InvalidSqrtPrice.selector.revertWith(sqrtPriceX96);\\n            }\\n\\n            uint256 price = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = price;\\n            uint256 msb = BitMath.mostSignificantBit(r);\\n\\n            if (msb >= 128) r = price >> (msb - 127);\\n            else r = price << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // Q22.128 number\\n\\n            // Magic number represents the ceiling of the maximum value of the error when approximating log_sqrt10001(x)\\n            int24 tickLow = int24(\\n                (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n            );\\n\\n            // Magic number represents the minimum value of the error when approximating log_sqrt10001(x), when\\n            // sqrtPrice is from the range (2^-64, 2^64). This is safe as MIN_SQRT_PRICE is more than 2^-64. If MIN_SQRT_PRICE\\n            // is changed, this may need to be changed too\\n            int24 tickHi = int24(\\n                (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n            );\\n\\n            tick = tickLow == tickHi\\n                ? tickLow\\n                : getSqrtPriceAtTick(tickHi) <= sqrtPriceX96\\n                ? tickHi\\n                : tickLow;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/TransferHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title TransferHelper\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TF\\\"\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/UnsafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Pool.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./libraries/SqrtPriceMath.sol\\\";\\nimport \\\"./libraries/TickMath.sol\\\";\\nimport \\\"./libraries/LiquidityMath.sol\\\";\\nimport \\\"./libraries/LowGasSafeMath.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./libraries/FullMath.sol\\\";\\nimport \\\"./libraries/FixedPoint128.sol\\\";\\nimport \\\"./libraries/SwapMath.sol\\\";\\n\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\n//MetaSwap每个代币对可能有多个 Pool 合约，每个 Pool 合约就是一个交易池，每个交易池都有自己的价格上下限和手续费\\n//Uniswap 的交易池只有交易对+手续费属性，而我们的交易池还有价格上下限属性。\\n//在 Uniswap V3 中，你需要在一个交易池里面去管理在不同价格区间内的流动性\\n//这里简化了 只需要考虑这个固定范围内的流动性管理和交易即可，\\ncontract Pool is IPool {\\n    using SafeCast for uint256;\\n    using LowGasSafeMath for int256;\\n    using LowGasSafeMath for uint256;\\n\\n    // ============ 不可变状态变量 ============\\n    \\n    address public immutable override factory;\\n\\n    address public immutable override token0;\\n\\n    address public immutable override token1;\\n\\n    uint24 public immutable override fee;\\n\\n    int24 public immutable override tickLower;\\n\\n    int24 public immutable override tickUpper;\\n\\n    // ============ 可变状态变量 ============\\n    \\n    uint160 public override sqrtPriceX96;\\n\\n    int24 public override tick;\\n\\n    uint128 public override liquidity;\\n\\n    uint256 public override feeGrowthGlobal0X128;\\n\\n    uint256 public override feeGrowthGlobal1X128;\\n\\n\\n    /**\\n     * @notice 流动性位置结构体\\n     * @dev 存储每个地址的流动性位置信息\\n     */\\n    struct Position{\\n        uint128 liquidity;// 该 Position 拥有的流动性\\n        uint128 tokensOwed0;// 可提取的 token0 数量\\n        uint128 tokensOwed1;// 可提取的 token1 数量\\n        uint256 feeGrowthInside0LastX128;// 上次提取手续费时的 feeGrowthGlobal0X128\\n        uint256 feeGrowthInside1LastX128;// 上次提取手续费是的 feeGrowthGlobal1X128\\n    }\\n    // 用一个 mapping 来存放所有 Position 的信息，key 是地址，value 是 Position 结构体\\n    mapping(address => Position) public positions;\\n    \\n    /**\\n     * @notice 构造函数 - 从Factory读取池参数\\n     * @dev 使用CREATE2部署，参数通过Factory的parameters变量传递\\n     */\\n    constructor(){\\n        // Factory 创建 Pool 时会通 new Pool{salt: salt}() 的方式创建 Pool 合约，\\n        // 通过 salt 指定 Pool 的地址，这样其他地方也可以推算出 Pool 的地址\\n        // 参数通过读取 Factory 合约的 parameters 获取\\n        // 不通过构造函数传入，因为 CREATE2 会根据 \\n        // initcode 计算出新地址（new_address = hash(0xFF, sender, salt, bytecode)），带上参数就不能计算出稳定的地址了\\n        (factory, token0, token1, tickLower, tickUpper,fee) = IFactory(msg.sender).parameters();\\n    }\\n\\n    /**\\n     * @notice 初始化池的价格\\n     * @param _sqrtPriceX96 初始价格的平方根（X96格式）\\n     * @dev 只能初始化一次，价格必须在tick范围内\\n    */\\n    function initialize(uint160 _sqrtPriceX96) external override {\\n        require(sqrtPriceX96 == 0, \\\"Already initialized\\\");\\n         // 通过价格获取 tick，判断 tick 是否在 tickLower 和 tickUpper 之间\\n        tick=TickMath.getTickAtSqrtPrice(_sqrtPriceX96);\\n        require(tick >= tickLower && tick <= tickUpper, \\\"sqrtPriceX96 should be within the range of [tickLower, tickUpper)\\\");\\n        // 初始化 Pool 的 sqrtPriceX96\\n        sqrtPriceX96 = _sqrtPriceX96;\\n    }\\n\\n    \\n    struct ModifyPositionParams {\\n         // the address that owns the position\\n        address owner;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n\\n    // 添加流动性\\n    // 添加流动性时，需要传入 amount 和 data，amount 是添加的流动性数量，data 是回调数据\\n    // recipient 流动性的权益赋予谁\\n    // return amount0 和 amount1 是添加流动性后需要多少 amount0 和 amount1\\n    // 添加流动性后，需要回调 mintCallback 方法，这个方法需要传入 amount0 和 amount1，\\n    function mint(address recipent,uint128 amount,bytes calldata data) \\n        external override returns (uint256 amount0,uint256 amount1){\\n            require(amount > 0, \\\"Amount must be greater than 0\\\");\\n            // 基于 amount 计算出当前需要多少 amount0 和 amount1\\n            (int256 amount0Int,int256 amount1Int) = _modifyPosition(ModifyPositionParams({owner: recipent, liquidityDelta: int128(amount)})\\n            );\\n            amount0=uint256(amount0Int);\\n            amount1=uint256(amount1Int);\\n            uint256 balance0Before;\\n            uint256 balance1Before;\\n            if (amount0 > 0) balance0Before=_balance0();\\n            if (amount1 > 0) balance1Before=_balance1();\\n            // 回调 mintCallback 调用 `mint` 方法的合约需要实现 `IMintCallback` 接口完成代币的转入操作：\\n            IMintCallback(msg.sender).mintCallback(amount0, amount1, data);\\n            //回调完成后会检查交易池合约的对应余额是否发生变化，并且增量应该大于 amount0 和 amount1：这意味着调用方确实转入了所需的资产。\\n            if (amount0 > 0) {\\n                require(balance0Before.add(amount0)<=_balance0(), \\\"M0\\\");\\n            }\\n            if (amount1 > 0) {\\n                require(balance1Before.add(amount1)<=_balance1(), \\\"M1\\\");\\n            }\\n            // 触发 Mint 事件\\n            emit Mint(msg.sender, recipent, amount, amount0, amount1);\\n    }\\n\\n\\n    //Uniswap V3 中，计算流动性时的上下限是参数动态传入的 params.tickLower 和 params.tickUpper\\n    //MetaSwap 交易池都固定在一个价格区间内，mint 也只能在这个价格区间内 mint，所以 tickLower 和 tickUpper 是固定的\\n    function _modifyPosition(ModifyPositionParams memory params) private returns(int256 amount0,int256 amount1){\\n        // 通过新增的流动性计算 amount0 和 amount1\\n        // 参考 UniswapV3 的代码\\n        // 用到 SqrtPriceMath 库，这个库是 Uniswap V3 中的一个工具库\\n        // FullMath.sol 和 TickMath.sol 因为依赖于 solidity <0.8.0;这里用的是 0.8.0+，所以我们使用 Uniswap V4 的代码\\n        // 当前价格在一定在tick区间内，所以不需要考虑价格超出区间的情况\\n        amount0=SqrtPriceMath.getAmount0Delta(sqrtPriceX96,TickMath.getSqrtPriceAtTick(tickUpper),params.liquidityDelta);\\n        amount1=SqrtPriceMath.getAmount1Delta(sqrtPriceX96,TickMath.getSqrtPriceAtTick(tickLower),params.liquidityDelta);\\n\\n        // 获取当前用户的 position，recipient 应该改为 msg.sender\\n        Position storage position = positions[params.owner];\\n\\n        //关键步骤：结算未领取的费用\\n        //将费用增长因子差值乘以头寸原有的流动性数量，再除以 Q128（一个固定点数精度常量），得到应累加的费用代币数量。\\n        uint128 tokensOwed0 = uint128(\\n            FullMath.mulDiv(\\n                feeGrowthGlobal0X128 - position.feeGrowthInside0LastX128,\\n                position.liquidity,\\n                FixedPoint128.Q128\\n            )\\n        );\\n        uint128 tokensOwed1 = uint128(\\n            FullMath.mulDiv(\\n                feeGrowthGlobal1X128 - position.feeGrowthInside1LastX128,\\n                position.liquidity,\\n                FixedPoint128.Q128\\n            )\\n        );\\n\\n         // 更新提取手续费的记录，同步到当前最新的 feeGrowthGlobal0X128，代表都提取完了\\n        position.feeGrowthInside0LastX128 = feeGrowthGlobal0X128;\\n        position.feeGrowthInside1LastX128 = feeGrowthGlobal1X128;\\n        // 把可以提取的手续费记录到 tokensOwed0 和 tokensOwed1 中\\n        // LP 可以通过 collect 来最终提取到用户自己账户上\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            position.tokensOwed0 += tokensOwed0;\\n            position.tokensOwed1 += tokensOwed1;\\n        }\\n        // 修改池子 liquidity 和头寸 position.liquidity\\n        liquidity=LiquidityMath.addDelta(liquidity,params.liquidityDelta);\\n        position.liquidity=LiquidityMath.addDelta(position.liquidity,params.liquidityDelta);\\n    }\\n\\n\\n    //它不需要有回调，另外提取代币是放到 collect 中操作的。\\n    //在 burn 方法中，我们只是把流动性移除，并计算出要退回给 LP 的 amount0 和 amount1，记录在合约状态中\\n    function burn(uint128 amount) external override returns (uint256 amount0,uint256 amount1){\\n        require(amount > 0, \\\"Burn Amount must be greater than 0\\\");\\n        require(amount <=positions[msg.sender].liquidity,\\\"Burn amount exceeds liquidity\\\");\\n        // 修改 positions 中的信息\\n        (int256 amount0Int, int256 amount1Int) = _modifyPosition(\\n            ModifyPositionParams({\\n                owner: msg.sender,\\n                liquidityDelta: -int128(amount)\\n            })\\n        );\\n        // 获取燃烧后的退换的 amount0 和 amount1\\n        amount0=uint256(-amount0Int);\\n        amount1=uint256(-amount1Int);\\n\\n        if (amount0 > 0 || amount1 > 0) {\\n            (\\n                positions[msg.sender].tokensOwed0,\\n                positions[msg.sender].tokensOwed1\\n            ) = (\\n                positions[msg.sender].tokensOwed0 + uint128(amount0),\\n                positions[msg.sender].tokensOwed1 + uint128(amount1)\\n            );\\n        }\\n\\n        emit Burn(msg.sender, amount, amount0, amount1);\\n    }\\n\\n    //Position 中定义了 tokensOwed0 和 tokensOwed1，\\n    //用来记录 LP 可以提取的代币数量，这个代币数量是在 collect 中提取的\\n     function collect(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override returns (uint128 amount0, uint128 amount1) {\\n        // 获取当前用户的 position\\n        Position storage position = positions[msg.sender];\\n        // 把钱退给用户 recipient\\n        amount0 = amount0Requested > position.tokensOwed0\\n            ? position.tokensOwed0\\n            : amount0Requested;\\n        amount1 = amount1Requested > position.tokensOwed1\\n            ? position.tokensOwed1\\n            : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            position.tokensOwed0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            position.tokensOwed1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n        // 触发 Collect 事件\\n        emit Collect(msg.sender, recipient, amount0, amount1);\\n    }\\n\\n    // 交易中需要临时存储的变量\\n    struct SwapParams {\\n        // 剩余需要交换的数量\\n        int256 amountSpecifiedRemaining;\\n        // 已计算出的数量\\n        int256 amountCalculated;\\n        // 当前价格\\n        uint160 sqrtPriceX96;\\n         // 全局费用增长，根据方向选择 token0 或token1 的费用增长。\\n        uint256 feeGrowthGlobalX128;\\n        // 该交易中用户转入的 token 的数量\\n        uint256 amountIn;\\n         // 该交易中用户转出的 token 的数量\\n        uint256 amountOut;\\n        // 该交易中需要支付的手续费 如果 zeroForOne 是 ture，则是用户转入 token0，单位是 token0 的数量，反正是 token1 的数量\\n        uint256 feeAmount;\\n    }\\n\\n\\n    //amountSpecified:指定的代币数量，指定输入的代币数量(要支付的 token0 的数量)则为正数，指定输出的代币(要获取的 token1)数量则为负数\\n    //sqrtPriceLimitX96: 价格限制，如果从 token0 交换 token1 则限定价格下限，从 token1 交换 token0 则限定价格上限\\n    //如果从 token0 交换 token1 则限定价格下限，从 token1 交换 token0 则限定价格上限\\n    //data: 回调数据\\n    function swap(\\n        address recipient, \\n        bool zeroForOne, \\n        int256 amountSpecified,  \\n        uint160 sqrtPriceLimitX96, \\n        bytes calldata data) external override returns (int256 amount0, int256 amount1)\\n        {\\n        // 检查 amountSpecified 是否为 0\\n        require(amountSpecified != 0, \\\"AS\\\");\\n        // 对于 zeroForOne 方向，token0 换 token1,交易会导致池子的 token0 变多，\\n        // 价格下跌，我们需要验证 sqrtPriceLimitX96 必须小于当前的价格，\\n        // 对于 !zeroForOne 方向，价格限制必须高于当前价格但低于最大价格\\n        require(\\n            zeroForOne \\n             ? sqrtPriceLimitX96 < sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_PRICE\\n             : sqrtPriceLimitX96 > sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_PRICE,\\n            \\\"SPL\\\"\\n        );\\n\\n        bool exactInput=amountSpecified>0; //判断是输入还是输出模式\\n        SwapParams memory state = SwapParams({\\n            amountSpecifiedRemaining: amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: sqrtPriceX96,\\n            feeGrowthGlobalX128: zeroForOne\\n                ? feeGrowthGlobal0X128\\n                : feeGrowthGlobal1X128,\\n            amountIn: 0,\\n            amountOut: 0,\\n            feeAmount: 0\\n        });\\n        // 计算交易的上下限，基于 tick 计算价格\\n        uint160 sqrtPriceX96Lower =TickMath.getSqrtPriceAtTick(tickLower);\\n        uint160 sqrtPriceX96Upper =TickMath.getSqrtPriceAtTick(tickUpper);\\n        // 计算用户交易价格的限制，如果是 zeroForOne 是 true，说明用户会换入 token0，\\n        // 会压低 token0 的价格（也就是池子的价格），所以要限制最低价格不能超过 sqrtPriceX96Lower\\n        uint160 sqrtPriceX96PoolLimit = zeroForOne\\n            ? sqrtPriceX96Lower\\n            : sqrtPriceX96Upper;\\n        //  SwapMath.computeSwapStep 计算当前步骤的输入量、输出量、费用和新价格。\\n        (state.sqrtPriceX96,state.amountIn,state.amountOut,state.feeAmount)=SwapMath.computeSwapStep(sqrtPriceX96,\\n            (zeroForOne ? sqrtPriceX96PoolLimit < sqrtPriceLimitX96 : sqrtPriceX96PoolLimit > sqrtPriceLimitX96)\\n            ?sqrtPriceLimitX96:sqrtPriceX96PoolLimit,\\n            liquidity,\\n            amountSpecified, // 第一次剩余需要交换的数量=指定输入的代币数量(要支付的 token0 的数量)\\n            fee\\n        );\\n\\n        //更新后的价格\\n        sqrtPriceX96=state.sqrtPriceX96;\\n        tick=TickMath.getTickAtSqrtPrice(sqrtPriceX96);\\n\\n        //计算手续费\\n        //手续费乘以 FixedPoint128.Q128（2 的 96 次方），然后除以流动性数量得到的 （池子单个流动性单位手续费）\\n        state.feeGrowthGlobalX128 += FullMath.mulDiv(\\n            state.feeAmount,\\n            FixedPoint128.Q128,\\n            liquidity\\n        );\\n        if(zeroForOne){\\n            feeGrowthGlobal0X128=state.feeGrowthGlobalX128;\\n        }else{\\n            feeGrowthGlobal1X128=state.feeGrowthGlobalX128;\\n        }\\n\\n        //计算交易后用户手里的token0和token1的数量\\n        //根据精确输入或精确输出模式，更新剩余交换量和计算量。\\n        if(exactInput){\\n            //精确输入: amountSpecifiedRemaining 减少（输入量 + 费用），amountCalculated 减少输出量（因为输出为负）\\n            state.amountSpecifiedRemaining -= int256(state.amountIn + state.feeAmount);\\n            state.amountCalculated = state.amountCalculated.sub(int256(state.amountOut));\\n        }else{\\n            //精确输出: amountSpecifiedRemaining 增加输出量（因为输出为负），amountCalculated 增加（输入量 + 费用）。\\n            state.amountSpecifiedRemaining += int256(state.amountOut);\\n            state.amountCalculated = state.amountCalculated.add(int256(state.amountIn + state.feeAmount));\\n        }\\n        // 计算最终代币变化量\\n        (amount0,amount1)= zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n\\n\\n        // 执行代币转账和回调\\n        if (zeroForOne){\\n            // 记录当前余额，用于后续检查\\n            uint256 balance0Before=_balance0();\\n            // 调用回调函数，要求调用者支付token0 给 Pool 转入 token0\\n            ISwapCallback(msg.sender).swapCallback(amount0, amount1, data);\\n            // 检查余额变化，确保调用者支付了足够的token0\\n            require(balance0Before.add(uint256(amount0))<=_balance0(), \\\"IIA\\\");\\n            // 如果是token0 → token1，将token1转账给接收者\\n            if(amount1 <0)\\n                TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\\n            }\\n        else{\\n           // callback 中需要给 Pool 转入 token\\n            uint256 balance1Before = _balance1();\\n            ISwapCallback(msg.sender).swapCallback(amount0, amount1, data);\\n            require(balance1Before.add(uint256(amount1))<=_balance1(), \\\"IIA\\\");\\n             // 转 Token 给用户\\n             if(amount0 <0){\\n                TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\\n             }\\n        }\\n        emit Swap(msg.sender, recipient, amount0, amount1, sqrtPriceX96, liquidity,tick);\\n    }\\n    /// @dev Get the pool's balance of token0\\n    function _balance0() private view returns (uint256){\\n        (bool success,bytes memory data)=token0.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)));\\n        require(success&&data.length>=32,\\\"Failed to get balance of token0\\\");\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function _balance1() private view returns (uint256){\\n        (bool success,bytes memory data)=token1.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)));\\n        require(success&&data.length>=32,\\\"Failed to get balance of token1\\\");\\n        return abi.decode(data, (uint256));\\n    }\\n\\n\\n    /**\\n     * @notice 获取指定地址的流动性位置信息\\n     * @param owner 位置所有者地址\\n     */\\n     function getPosition(address owner) external view override returns (uint128 _liquidity,uint256 feeGrowthInside0LastX128,uint256 feeGrowthInside1LastX128,uint128 tokensOwed0,uint128 tokensOwed1)\\n        {\\n            return (\\n                positions[owner].liquidity,\\n                positions[owner].feeGrowthInside0LastX128,\\n                positions[owner].feeGrowthInside1LastX128,\\n                positions[owner].tokensOwed0,\\n                positions[owner].tokensOwed1\\n            );\\n        }\\n}\\n\"\n    },\n    \"contracts/PoolManager.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n//这个合约并不是必须的，它只是为了给前端提供数据，\\r\\n//推荐将这些数据存储在服务端（Uniswap 的做法），\\r\\n//通过调用服务端的接口来保存、获取这些数据，\\r\\n//这样的话既可以提高操作数据的响应速度，又可以减少合约存储数据的 gas 开销。\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IPoolManager.sol\\\";\\r\\nimport \\\"./Factory.sol\\\";\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\n\\r\\ncontract PoolManager is Factory,IPoolManager {\\r\\n\\r\\n    Pair[] public pairs;\\r\\n\\r\\n    //用于查询 DEX 是否支持某一交易对的交易\\r\\n    function getPairs() external view override returns (Pair[] memory){\\r\\n        return pairs;\\r\\n    }\\r\\n\\r\\n    /// @notice 获取所有池子信息 未优化（gas 消耗太大 正常后端返回）\\r\\n    function getAllPools() external view override returns (PoolInfo[] memory poolsInfo){\\r\\n        uint32 length=0;\\r\\n         // 先算一下大小，从 pools 获取\\r\\n        for (uint32 i=0;i<pairs.length;i++){\\r\\n            length+=uint32(pools[pairs[i].token0][pairs[i].token1].length);\\r\\n        }\\r\\n        // 再填充数据\\r\\n        poolsInfo = new PoolInfo[](length);\\r\\n        uint256 index;\\r\\n        for (uint32 i=0;i<pairs.length;i++){\\r\\n            // 获取同一交易对的所有池子\\r\\n            address[] memory addresses =pools[pairs[i].token0][pairs[i].token1];\\r\\n                for(uint32 j=0;j<addresses.length;j++){\\r\\n                    IPool pool=IPool(addresses[j]);\\r\\n                    poolsInfo[index] = PoolInfo(\\r\\n                        {\\r\\n                            pool: addresses[j],\\r\\n                            token0: pool.token0(),\\r\\n                            token1: pool.token1(),\\r\\n                            index: j,\\r\\n                            fee: pool.fee(),\\r\\n                            feeProtocol: 0,\\r\\n                            tickLower: pool.tickLower(),\\r\\n                            tickUpper: pool.tickUpper(),\\r\\n                            tick: pool.tick(),\\r\\n                            sqrtPriceX96: pool.sqrtPriceX96(),\\r\\n                            liquidity: pool.liquidity()\\r\\n                        }\\r\\n                    );\\r\\n                    index++;\\r\\n                }\\r\\n            }\\r\\n            return poolsInfo;\\r\\n    }\\r\\n\\r\\n    \\r\\n    \\r\\n    function createAndInitializePoolIfNecessary(CreateAndInitializeParams calldata params) external payable override returns (address poolAddress){\\r\\n        // 要求 token0 < token1。因为在这个方法中需要传入初始化的价格，而在交易池中价格是按照 token0/token1 的方式计算的，\\r\\n        // 做这个限制可以避免 LP 不小心初始化错误的价格。\\r\\n        require(params.token0 < params.token1, \\\"TokenA must be less than TokenB\\\");\\r\\n\\r\\n        // 创建池子\\r\\n        poolAddress = this.createPool(params.token0, params.token1, params.tickLower, params.tickUpper, params.fee);\\r\\n        // 获取池子合约\\r\\n        IPool pool =IPool(poolAddress);\\r\\n        // 获取同一交易对的数量\\r\\n        uint256 index=pools[pool.token0()][pool.token1()].length;\\r\\n\\r\\n         // 新创建的池子，没有初始化价格，需要初始化价格\\r\\n         if(pool.sqrtPriceX96() == 0){\\r\\n            pool.initialize(params.sqrtPriceX96);\\r\\n\\r\\n            if (index ==1){\\r\\n                pairs.push(Pair(pool.token0(),pool.token1()));\\r\\n            }\\r\\n         }\\r\\n\\r\\n    }\\r\\n    \\r\\n}\"\n    },\n    \"contracts/PositionManager.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n \\r\\n // 和Uniswap V3 的 NonfungiblePositionManager.sol 合约类似，都是用于管理用户头寸的合约。\\r\\n // PositionManager 合约是为了方便用户管理自己的流动性，而不是直接调用交易池合约\\r\\n //和 NonfungiblePositionManager 一样，PositionManager \\r\\n //也是一个满足 ERC721 标准的合约，这样用户可以很方便的通过 NFT 的方式来管理自己的合约\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/LiquidityAmounts.sol\\\";\\r\\nimport \\\"./libraries/TickMath.sol\\\";\\r\\nimport \\\"./libraries/FixedPoint128.sol\\\";\\r\\nimport \\\"./libraries/FullMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPositionManager.sol\\\";\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\nimport \\\"./interfaces/IPoolManager.sol\\\";\\r\\n\\r\\n\\r\\n//对于 Pool 合约来说，流动性都是 PositionManager 合约掌管，\\r\\n//PositionManager 相当于代管了 LP 的流东西，所以需要在它内部再存储下相关信息。\\r\\ncontract PositionManager is IPositionManager, ERC721{\\r\\n    // 保存 PoolManager 合约地址\\r\\n    IPoolManager public poolManager;\\r\\n    /// @dev The ID of the next token that will be minted. Skips 0\\r\\n    uint256 private _nextId =1;\\r\\n\\r\\n    constructor(address _poolManager)ERC721(\\\"MetaSwapPosition\\\",\\\"MSP\\\"){\\r\\n        poolManager = IPoolManager(_poolManager);\\r\\n    }\\r\\n    // 用一个 mapping 来存放所有 Position 的信息\\r\\n    mapping(uint256 => PositionInfo) public positions;\\r\\n\\r\\n\\r\\n\\r\\n    function getSender() public view returns (address){\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _blockTimestamp() internal view virtual returns (uint256){\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    modifier checkDeadline(uint256 deadline){\\r\\n        require(deadline>=_blockTimestamp(),\\\"Transaction too old\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isAuthorizedForToken(uint256 tokenId){\\r\\n        address owner=ERC721.ownerOf(tokenId);\\r\\n        require(_isAuthorized(owner,msg.sender,tokenId),\\\"Not approved\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mint(MintParams calldata params) external payable override \\r\\n        checkDeadline(params.deadline) \\r\\n        returns (uint256 positionId, uint128 liquidity, uint256 amount0, uint256 amount1)\\r\\n    {\\r\\n        // mint 一个 NFT 作为 position 发给 LP\\r\\n        // NFT 的 tokenId 就是 positionId\\r\\n        // 通过 MintParams 里面的 token0 和 token1 以及 index 获取对应的 Pool\\r\\n        // 调用 poolManager 的 getPool 方法获取 Pool 地址\\r\\n        address _pool=poolManager.getPool(params.token0,params.token1,params.index);\\r\\n        IPool pool=IPool(_pool);\\r\\n\\r\\n        // 通过获取 pool 相关信息，结合 params.amount0Desired 和 params.amount1Desired 计算这次要注入的流动性\\r\\n        uint160 sqrtPriceX96=pool.sqrtPriceX96();\\r\\n        uint160 sqrtRatioAX96=TickMath.getSqrtPriceAtTick(pool.tickLower());\\r\\n        uint160 sqrtRatioBX96=TickMath.getSqrtPriceAtTick(pool.tickUpper());\\r\\n        liquidity=LiquidityAmounts.getLiquidityForAmounts(\\r\\n            sqrtPriceX96,\\r\\n            sqrtRatioAX96,\\r\\n            sqrtRatioBX96,\\r\\n            params.amount0Desired,\\r\\n            params.amount1Desired\\r\\n        );\\r\\n        // data 是 mint 后回调 PositionManager 会额外带的数据\\r\\n        // 需要 PoistionManger 实现回调mintCallback，在回调中给 Pool 打钱\\r\\n        bytes memory data=abi.encode(params.token0,params.token1,params.index,msg.sender);\\r\\n        (amount0,amount1)=pool.mint(address(this),liquidity,data);\\r\\n        // 创建 NFT 并发送给LP\\r\\n        _mint(params.recipient,(positionId=_nextId++));\\r\\n        // 更新 PositionInfo 信息\\r\\n        (\\r\\n            ,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            ,\\r\\n\\r\\n        ) = pool.getPosition(address(this));\\r\\n\\r\\n        positions[positionId]=PositionInfo({\\r\\n            id:positionId,\\r\\n            owner:params.recipient,\\r\\n            token0:params.token0,\\r\\n            token1:params.token1,\\r\\n            index:params.index,\\r\\n            fee:pool.fee(),\\r\\n            liquidity:liquidity,\\r\\n            tickLower:pool.tickLower(),\\r\\n            tickUpper:pool.tickUpper(),\\r\\n            tokensOwed0:0,\\r\\n            tokensOwed1:0,\\r\\n            feeGrowthInside0LastX128:feeGrowthInside0LastX128,\\r\\n            feeGrowthInside1LastX128:feeGrowthInside1LastX128\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function burn(uint256 positionId) external override isAuthorizedForToken(positionId) \\r\\n        returns (uint256 amount0, uint256 amount1)\\r\\n    {\\r\\n        PositionInfo storage position=positions[positionId];\\r\\n        // 通过 isAuthorizedForToken 检查 positionId 是否有权限\\r\\n        // 移除流动性，但是 token 还是保留在 pool 中，需要再调用 collect 方法才能取回 token\\r\\n        // 通过 positionId 获取对应 LP 的流动性\\r\\n        uint128 _liquidity=position.liquidity;\\r\\n         // 调用 Pool 的方法给 LP 退流动性\\r\\n        address _pool=poolManager.getPool(position.token0,position.token1,position.index);\\r\\n        IPool pool=IPool(_pool);\\r\\n        (amount0,amount1)=pool.burn(_liquidity);\\r\\n        // 计算这部分流动性产生的手续费\\r\\n        (\\r\\n            ,//_liquidity\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            ,\\r\\n        ) = pool.getPosition(address(this));\\r\\n\\r\\n        position.tokensOwed0+=uint128(amount0)+uint128(FullMath.mulDiv(feeGrowthInside0LastX128-position.feeGrowthInside0LastX128,position.liquidity,FixedPoint128.Q128));\\r\\n        position.tokensOwed1+=uint128(amount1)+uint128(FullMath.mulDiv(feeGrowthInside1LastX128-position.feeGrowthInside1LastX128,position.liquidity,FixedPoint128.Q128));\\r\\n\\r\\n        // 更新 position 的信息\\r\\n        position.feeGrowthInside0LastX128 = feeGrowthInside0LastX128;\\r\\n        position.feeGrowthInside1LastX128 = feeGrowthInside1LastX128;\\r\\n        position.liquidity = 0;\\r\\n    }\\r\\n    \\r\\n    function collect(uint256 positionId,address recipient) external override isAuthorizedForToken(positionId) \\r\\n        returns (uint256 amount0,uint256 amount1)\\r\\n    {\\r\\n        // 通过 isAuthorizedForToken 检查 positionId 是否有权限\\r\\n        // 调用 Pool 的方法给 LP 退流动性\\r\\n        PositionInfo storage position=positions[positionId];\\r\\n        address _pool=poolManager.getPool(position.token0,position.token1,position.index);\\r\\n        IPool pool=IPool(_pool);\\r\\n        (amount0, amount1) = pool.collect(\\r\\n            recipient,\\r\\n            position.tokensOwed0,\\r\\n            position.tokensOwed1\\r\\n        );\\r\\n\\r\\n        // position 已经彻底没用了，销毁\\r\\n        position.tokensOwed0 = 0;\\r\\n        position.tokensOwed1 = 0;\\r\\n        // 销毁 NFT\\r\\n        _burn(positionId);\\r\\n    }\\r\\n\\r\\n    // 获取全部的Position信息\\r\\n    function getAllPositions() external view returns (PositionInfo[] memory positionInfo){\\r\\n        positionInfo = new PositionInfo[](_nextId-1);\\r\\n        for(uint32 i=0;i<_nextId-1;i++){\\r\\n            positionInfo[i] = positions[i+1];\\r\\n        }\\r\\n        return positionInfo;\\r\\n    }\\r\\n\\r\\n    // Pool.mint() 调用了 IMintCallback(msg.sender).mintCallback(amount0, amount1, data)\\r\\n    // 回调方法，PositionManager 给 Pool 打钱\\r\\n    function mintCallback(uint256 amount0, uint256 amount1, bytes calldata data) external override{\\r\\n        //检查callback 的合约地址是否是pool\\r\\n        (address token0,address token1,uint32 index,address payer)=abi.decode(data,(address,address,uint32,address));\\r\\n        address _pool=poolManager.getPool(token0,token1,index);\\r\\n        require(_pool==msg.sender,\\\"Invalid callback caller\\\");\\r\\n\\r\\n        // 在这里给 Pool 打钱，需要用户先 approve 足够的金额，这里才会成功\\r\\n        if(amount0>0){\\r\\n            IERC20(token0).transferFrom(payer,msg.sender,amount0);\\r\\n        }\\r\\n        if(amount1>0){\\r\\n            IERC20(token1).transferFrom(payer,msg.sender,amount1);\\r\\n        }\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/SwapRouter.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"./interfaces/IPoolManager.sol\\\";\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\n\\r\\n//SwapRouter 合约用于将多个交易池 Pool 合约的交易组合为一个交易\\r\\n//每个代币对可能会有多个交易池，因为交易池的流动性、手续费、价格上下限不一样，\\r\\n//所以用户的一次交易需求可能会发生在多个交易池中。\\r\\n//Uniswap 中，还支持跨交易对交易 比如只有 A/B 和 B/C 两个交易对，用户可以通过 A/B 和 B/C 两个交易对完成 A/C 的交易\\r\\n//这里只需要支持同一个交易对的不同交易池的交易\\r\\ncontract SwapRouter is ISwapRouter {\\r\\n     IPoolManager public poolManager;\\r\\n\\r\\n    constructor(address _poolManager) {\\r\\n        poolManager = IPoolManager(_poolManager);\\r\\n    }\\r\\n\\r\\n    /// @dev Parses a revert reason that should contain the numeric quote\\r\\n    function parseRevertReason(\\r\\n        bytes memory reason\\r\\n    ) private pure returns (int256, int256) {\\r\\n        if (reason.length != 64) {\\r\\n            if (reason.length < 68) revert(\\\"Unexpected error\\\");\\r\\n            assembly {\\r\\n                reason := add(reason, 0x04)\\r\\n            }\\r\\n            revert(abi.decode(reason, (string)));\\r\\n        }\\r\\n        return abi.decode(reason, (int256, int256));\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function swapInPool(\\r\\n        IPool pool,\\r\\n        address recipient,\\r\\n        bool zeroForOne,\\r\\n        int256 amountSpecified,\\r\\n        uint160 sqrtPriceLimitX96,\\r\\n        bytes calldata data\\r\\n    ) external returns (int256 amount0, int256 amount1) {\\r\\n        try\\r\\n            pool.swap(\\r\\n                recipient,\\r\\n                zeroForOne,\\r\\n                amountSpecified,\\r\\n                sqrtPriceLimitX96,\\r\\n                data\\r\\n            )\\r\\n        returns (int256 _amount0, int256 _amount1) {\\r\\n            return (_amount0, _amount1);\\r\\n        } catch (bytes memory reason) {\\r\\n            return parseRevertReason(reason);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //exactInput 和 exactOutput 方法，分别用于换入多少 Token 确定的情况和换出多少 Token 的情况的交易\\r\\n    //遍历 indexPath，然后获取到对应的交易池的地址，接着调用交易池的 swap 接口，如果中途交易完成了就提前退出遍历即可\\r\\n    function exactInput(ExactInputParams calldata params) external payable override returns (uint256 amountOut) {\\r\\n        //记录确定的输入token的amount\\r\\n        uint256 amountIn=params.amountIn;\\r\\n        // 根据 tokenIn 和 tokenOut 的大小关系，确定是从 token0 到 token1 还是从 token1 到 token0\\r\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\r\\n        // 遍历指定的每一个 pool\\r\\n        for(uint256 i=0;i<params.indexPath.length;i++){\\r\\n            address poolAddress=poolManager.getPool(params.tokenIn,params.tokenOut,params.indexPath[i]);\\r\\n            require(poolAddress !=address(0),\\\"Pool not found\\\");\\r\\n            // 获取 pool 实例\\r\\n            IPool pool=IPool(poolAddress);\\r\\n            // 构造 swapCallback 函数需要的参数\\r\\n            bytes memory data=abi.encode(\\r\\n                params.tokenIn,\\r\\n                params.tokenOut,\\r\\n                params.indexPath[i],\\r\\n                params.recipient == address(0) ? address(0) : msg.sender\\r\\n             );\\r\\n\\r\\n             // 调用 pool 的 swap 函数，进行交换，并拿到返回的 token0 和 token1 的数量\\r\\n            (int256 amount0,int256 amount1)=this.swapInPool(\\r\\n                pool,\\r\\n                params.recipient,\\r\\n                zeroForOne,\\r\\n                int256(amountIn),\\r\\n                params.sqrtPriceLimitX96,\\r\\n                data\\r\\n            );\\r\\n\\r\\n            // 更新 amountIn 和 amountOut\\r\\n            amountIn -= uint256(zeroForOne ? amount0 : amount1);\\r\\n            amountOut += uint256(zeroForOne ? -amount1 : -amount0);\\r\\n\\r\\n            // 如果 amountIn 为 0，则说明交易已经完成，退出循环\\r\\n            if(amountIn==0){\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        // 如果交换到的 amountOut 小于指定的最少数量 amountOutMinimum，则抛出错误\\r\\n        require(amountOut>=params.amountOutMinimum,\\\"Slippage exceeded\\\");\\r\\n\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            zeroForOne,\\r\\n            params.amountIn,\\r\\n            amountIn,\\r\\n            amountOut\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable override returns (uint256 amountIn){\\r\\n        //记录确定的输出token的amount\\r\\n        uint256 amountOut=params.amountOut;\\r\\n        // 根据 tokenIn 和 tokenOut 的大小关系，确定是从 token0 到 token1 还是从 token1 到 token0\\r\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\r\\n\\r\\n        // 遍历指定的每一个 pool\\r\\n        for (uint256 i = 0; i < params.indexPath.length; i++) {\\r\\n            address poolAddress = poolManager.getPool(\\r\\n                params.tokenIn,\\r\\n                params.tokenOut,\\r\\n                params.indexPath[i]\\r\\n            );\\r\\n\\r\\n            // 如果 pool 不存在，则抛出错误\\r\\n            require(poolAddress != address(0), \\\"Pool not found\\\");\\r\\n\\r\\n            // 获取 pool 实例\\r\\n            IPool pool = IPool(poolAddress);\\r\\n\\r\\n            // 构造 swapCallback 函数需要的参数\\r\\n            bytes memory data = abi.encode(\\r\\n                params.tokenIn,\\r\\n                params.tokenOut,\\r\\n                params.indexPath[i],\\r\\n                params.recipient == address(0) ? address(0) : msg.sender);\\r\\n\\r\\n            // 调用 pool 的 swap 函数，进行交换，并拿到返回的 token0 和 token1 的数量\\r\\n            (int256 amount0, int256 amount1) = this.swapInPool(\\r\\n                pool,\\r\\n                params.recipient,\\r\\n                zeroForOne,\\r\\n                -int256(amountOut),\\r\\n                params.sqrtPriceLimitX96,\\r\\n                data\\r\\n            );\\r\\n\\r\\n            // 更新 amountOut 和 amountIn\\r\\n            amountOut -= uint256(zeroForOne ? -amount1 : -amount0);\\r\\n            amountIn += uint256(zeroForOne ? amount0 : amount1);\\r\\n\\r\\n            // 如果 amountOut 为 0，表示交换完成，跳出循环\\r\\n            if (amountOut == 0) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        // 如果交换到指定数量 tokenOut 消耗的 tokenIn 数量超过指定的最大值，报错\\r\\n        require(amountIn <= params.amountInMaximum, \\\"Slippage exceeded\\\");\\r\\n        // 发射 Swap 事件\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            zeroForOne,\\r\\n            params.amountOut,\\r\\n            amountOut,\\r\\n            amountIn\\r\\n        );\\r\\n\\r\\n        // 返回交换后的 amountIn\\r\\n        return amountIn;\\r\\n    }\\r\\n\\r\\n    //调用 swap 函数时构造了一个 data\\r\\n    //在 Pool 合约回调的时候传回来，我们需要在回调函数中通过相关信息来继续执行交易\\r\\n     function swapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external override {\\r\\n        // transfer token\\r\\n        (address tokenIn, address tokenOut, uint32 index, address payer) = abi\\r\\n            .decode(data, (address, address, uint32, address));\\r\\n        address _pool = poolManager.getPool(tokenIn, tokenOut, index);\\r\\n\\r\\n        // 检查 callback 的合约地址是否是 Pool\\r\\n        require(_pool == msg.sender, \\\"Invalid callback caller\\\");\\r\\n\\r\\n        uint256 amountToPay = amount0Delta > 0\\r\\n            ? uint256(amount0Delta)\\r\\n            : uint256(amount1Delta);\\r\\n        // payer 是 address(0)，这是一个用于预估 token 的请求（quoteExactInput or quoteExactOutput）\\r\\n        // 参考代码 https://github.com/Uniswap/v3-periphery/blob/main/contracts/lens/Quoter.sol#L38\\r\\n        if (payer == address(0)) {\\r\\n            assembly {\\r\\n                let ptr := mload(0x40)\\r\\n                mstore(ptr, amount0Delta)\\r\\n                mstore(add(ptr, 0x20), amount1Delta)\\r\\n                revert(ptr, 64)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // 正常交易，转账给交易池\\r\\n        if (amountToPay > 0) {\\r\\n            IERC20(tokenIn).transferFrom(payer, _pool, amountToPay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    ///@dev 报价接口\\r\\n    //模拟 swap 方法来预估交易需要的 Token，但是因为预估的时候并不会实际产生 Token 的交换，所以会报错。\\r\\n    // 通过主动抛出一个特殊的错误，然后捕获这个错误，从错误信息中解析出需要的信息\\r\\n    // 报价，指定 tokenIn 的数量和 tokenOut 的最小值，返回 tokenOut 的实际数量\\r\\n    // 报价，指定 tokenIn 的数量和 tokenOut 的最小值，返回 tokenOut 的实际数量\\r\\n    function quoteExactInput(\\r\\n        QuoteExactInputParams calldata params\\r\\n    ) external override returns (uint256 amountOut) {\\r\\n        // 因为没有实际 approve，所以这里交易会报错，我们捕获错误信息，解析需要多少 token\\r\\n\\r\\n        return\\r\\n            this.exactInput(\\r\\n                ExactInputParams({\\r\\n                    tokenIn: params.tokenIn,\\r\\n                    tokenOut: params.tokenOut,\\r\\n                    indexPath: params.indexPath,\\r\\n                    recipient: address(0),\\r\\n                    deadline: block.timestamp + 1 hours,\\r\\n                    amountIn: params.amountIn,\\r\\n                    amountOutMinimum: 0,\\r\\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\\r\\n                })\\r\\n            );\\r\\n    }\\r\\n\\r\\n     // 报价，指定 tokenOut 的数量和 tokenIn 的最大值，返回 tokenIn 的实际数量\\r\\n     // 报价，指定 tokenOut 的数量和 tokenIn 的最大值，返回 tokenIn 的实际数量\\r\\n    function quoteExactOutput(\\r\\n        QuoteExactOutputParams calldata params\\r\\n    ) external override returns (uint256 amountIn) {\\r\\n        return\\r\\n            this.exactOutput(\\r\\n                ExactOutputParams({\\r\\n                    tokenIn: params.tokenIn,\\r\\n                    tokenOut: params.tokenOut,\\r\\n                    indexPath: params.indexPath,\\r\\n                    recipient: address(0),\\r\\n                    deadline: block.timestamp + 1 hours,\\r\\n                    amountOut: params.amountOut,\\r\\n                    amountInMaximum: type(uint256).max,\\r\\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\\r\\n                })\\r\\n            );\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\n    },\n    \"contracts/test/TestERC20.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TestERC20\\r\\n * @dev 测试用的ERC20代币合约\\r\\n */\\r\\ncontract TestERC20 is ERC20 {\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 totalSupply\\r\\n    ) ERC20(name, symbol) {\\r\\n        _mint(msg.sender, totalSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 铸造代币 - 仅用于测试\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 销毁代币 - 仅用于测试\\r\\n     */\\r\\n    function burn(uint256 amount) external {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n} \"\n    },\n    \"contracts/test/TestPoolLP.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../interfaces/IPool.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract TestPoolLP is IMintCallback {\\r\\n    function sortToken(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) private pure returns (address, address) {\\r\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address recipient,\\r\\n        uint128 amount,\\r\\n        address pool,\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (uint256 amount0, uint256 amount1) {\\r\\n        (address token0, address token1) = sortToken(tokenA, tokenB);\\r\\n\\r\\n        (amount0, amount1) = IPool(pool).mint(\\r\\n            recipient,\\r\\n            amount,\\r\\n            abi.encode(token0, token1)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function burn(\\r\\n        uint128 amount,\\r\\n        address pool\\r\\n    ) external returns (uint256 amount0, uint256 amount1) {\\r\\n        (amount0, amount1) = IPool(pool).burn(amount);\\r\\n    }\\r\\n\\r\\n    function collect(\\r\\n        address recipient,\\r\\n        address pool\\r\\n    ) external returns (uint256 amount0, uint256 amount1) {\\r\\n        (, , , uint128 tokensOwed0, uint128 tokensOwed1) = IPool(pool)\\r\\n            .getPosition(address(this));\\r\\n        (amount0, amount1) = IPool(pool).collect(\\r\\n            recipient,\\r\\n            tokensOwed0,\\r\\n            tokensOwed1\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function mintCallback(\\r\\n        uint256 amount0Owed,\\r\\n        uint256 amount1Owed,\\r\\n        bytes calldata data\\r\\n    ) external override {\\r\\n        // transfer token\\r\\n        (address token0, address token1) = abi.decode(data, (address, address));\\r\\n        if (amount0Owed > 0) {\\r\\n            IERC20(token0).transfer(msg.sender, amount0Owed);\\r\\n        }\\r\\n        if (amount1Owed > 0) {\\r\\n            IERC20(token1).transfer(msg.sender, amount1Owed);\\r\\n        }\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/test/TestSwap.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"../interfaces/IPool.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract TestSwap is ISwapCallback {\\r\\n    function testSwap(\\r\\n        address recipient,\\r\\n        int256 amount,\\r\\n        uint160 sqrtPriceLimitX96,\\r\\n        address pool,\\r\\n        address token0,\\r\\n        address token1\\r\\n    ) external returns (int256 amount0, int256 amount1) {\\r\\n        (amount0, amount1) = IPool(pool).swap(\\r\\n            recipient,\\r\\n            true,\\r\\n            amount,\\r\\n            sqrtPriceLimitX96,\\r\\n            abi.encode(token0, token1)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function swapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external override {\\r\\n        (address token0, address token1) = abi.decode(data, (address, address));\\r\\n        \\r\\n        // 如果需要支付token0 (amount0Delta > 0)，从合约余额转给Pool\\r\\n        if (amount0Delta > 0) {\\r\\n            IERC20(token0).transfer(msg.sender, uint256(amount0Delta));\\r\\n        }\\r\\n        \\r\\n        // 如果需要支付token1 (amount1Delta > 0)，从合约余额转给Pool\\r\\n        if (amount1Delta > 0) {\\r\\n            IERC20(token1).transfer(msg.sender, uint256(amount1Delta));\\r\\n        }\\r\\n    }\\r\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "2c01495a0b159ef3f3076037eca6f249",
      "transactionHash": "0xa42b3f0ab2e8685d72a95d54a910f7a31424f0acb6ed43ff7ef961398d559cc1",
      "args": [
        "0xb1952789eE2d5e3f909aaAa5456ABFabAB316419"
      ]
    },
    "decoded": {
      "from": "0x523df39cAe18ea125930DA730628213e4b147CDc",
      "gasPrice": "185911684",
      "maxFeePerGas": "185911684",
      "maxPriorityFeePerGas": "20000000",
      "gasLimit": "2674325",
      "to": null,
      "value": "0",
      "nonce": 411,
      "data": "0x608060405260016007553480156200001657600080fd5b5060405162002fb238038062002fb28339810160408190526200003991620000c8565b6040518060400160405280601081526020016f26b2ba30a9bbb0b82837b9b4ba34b7b760811b8152506040518060400160405280600381526020016204d53560ec1b81525081600090816200008f91906200019f565b5060016200009e82826200019f565b5050600680546001600160a01b0319166001600160a01b039390931692909217909155506200026b565b600060208284031215620000db57600080fd5b81516001600160a01b0381168114620000f357600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200012557607f821691505b6020821081036200014657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200019a57600081815260208120601f850160051c81016020861015620001755750805b601f850160051c820191505b81811015620001965782815560010162000181565b5050505b505050565b81516001600160401b03811115620001bb57620001bb620000fa565b620001d381620001cc845462000110565b846200014c565b602080601f8311600181146200020b5760008415620001f25750858301515b600019600386901b1c1916600185901b17855562000196565b600085815260208120601f198616915b828110156200023c578886015182559484019460019091019084016200021b565b50858210156200025b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612d37806200027b6000396000f3fe60806040526004361061012a5760003560e01c80636352211e116100ab5780639f382e9b1161006f5780639f382e9b14610413578063a22cb46514610433578063b88d4fde14610453578063c87b56dd14610473578063dc4c90d314610493578063e985e9c5146104b357600080fd5b80636352211e146102c557806370a08231146102e55780638d3c100a1461031357806395d89b411461033357806399fbab881461034857600080fd5b806323b872dd116100f257806323b872dd146102025780632c6cc6c71461022257806342842e0e1461025d57806342966c681461027d5780635e01eb5a146102b257600080fd5b806301ffc9a71461012f57806306fdde0314610164578063081812fc14610186578063095ea7b3146101be57806318f56a0a146101e0575b600080fd5b34801561013b57600080fd5b5061014f61014a366004612427565b6104d3565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b50610179610525565b60405161015b9190612494565b34801561019257600080fd5b506101a66101a13660046124a7565b6105b7565b6040516001600160a01b03909116815260200161015b565b3480156101ca57600080fd5b506101de6101d93660046124d5565b6105e0565b005b3480156101ec57600080fd5b506101f56105ef565b60405161015b9190612501565b34801561020e57600080fd5b506101de61021d366004612614565b6107f6565b610235610230366004612655565b610886565b604080519485526001600160801b03909316602085015291830152606082015260800161015b565b34801561026957600080fd5b506101de610278366004612614565b61103b565b34801561028957600080fd5b5061029d6102983660046124a7565b61105b565b6040805192835260208301919091520161015b565b3480156102be57600080fd5b50336101a6565b3480156102d157600080fd5b506101a66102e03660046124a7565b611361565b3480156102f157600080fd5b5061030561030036600461266d565b61136c565b60405190815260200161015b565b34801561031f57600080fd5b5061029d61032e36600461268a565b6113b4565b34801561033f57600080fd5b5061017961156d565b34801561035457600080fd5b506103fa6103633660046124a7565b600860205260009081526040902080546001820154600280840154600385015460048601546005870154600688015460079098015496976001600160a01b039687169794871696841695600160a01b850463ffffffff1695600160c01b90950462ffffff16946001600160801b0380861695600160801b808204850b96600160981b90920490940b9482821694909104909116918d565b60405161015b9d9c9b9a999897969594939291906126ba565b34801561041f57600080fd5b506101de61042e366004612763565b61157c565b34801561043f57600080fd5b506101de61044e3660046127f1565b611777565b34801561045f57600080fd5b506101de61046e366004612835565b611782565b34801561047f57600080fd5b5061017961048e3660046124a7565b61179a565b34801561049f57600080fd5b506006546101a6906001600160a01b031681565b3480156104bf57600080fd5b5061014f6104ce366004612915565b61180f565b60006001600160e01b031982166380ac58cd60e01b148061050457506001600160e01b03198216635b5e139f60e01b145b8061051f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053490612943565b80601f016020809104026020016040519081016040528092919081815260200182805461056090612943565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b60006105c28261183d565b506000828152600460205260409020546001600160a01b031661051f565b6105eb828233611876565b5050565b60606001600754610600919061298d565b67ffffffffffffffff8111156106185761061861281f565b6040519080825280602002602001820160405280156106af57816020015b604080516101a08101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282526000199092019101816106365790505b50905060005b60016007546106c4919061298d565b8163ffffffff1610156107f257600860006106e08360016129a0565b63ffffffff9081168252602080830193909352604091820160002082516101a0810184528154815260018201546001600160a01b039081169582019590955260028083015486169482019490945260038201549485166060820152600160a01b850483166080820152600160c01b90940462ffffff1660a085015260048101546001600160801b0380821660c0870152600160801b808304860b60e0880152600160981b90920490940b61010086015260058201548085166101208701520490921661014084015260068201546101608401526007909101546101808301528351849184169081106107d4576107d46129c4565b602002602001018190525080806107ea906129da565b9150506106b5565b5090565b6001600160a01b03821661082557604051633250574960e11b8152600060048201526024015b60405180910390fd5b6000610832838333611883565b9050836001600160a01b0316816001600160a01b031614610880576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161081c565b50505050565b600080808060c0850135428110156108d65760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd858dd1a5bdb881d1bdbc81bdb19606a1b604482015260640161081c565b6006546000906001600160a01b03166371c54fc96108f760208a018a61266d565b61090760408b0160208c0161266d565b61091760608c0160408d01612a11565b6040518463ffffffff1660e01b815260040161093593929190612a2c565b602060405180830381865afa158015610952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109769190612a55565b905060008190506000816001600160a01b0316638db791d26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612a55565b90506000610a4f836001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190612a72565b61197c565b90506000610a94846001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a26573d6000803e3d6000fd5b9050610aab8383838e606001358f60800135611c37565b98506000610abc60208d018d61266d565b610acc60408e0160208f0161266d565b8d6040016020810190610adf9190612a11565b604080516001600160a01b039485166020820152939092169183019190915263ffffffff16606082015233608082015260a00160408051601f19818403018152908290526392f026ad60e01b825291506001600160a01b038616906392f026ad90610b529030908e908690600401612a95565b60408051808303816000875af1158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b949190612ac8565b9099509750610bc8610bac60c08e0160a08f0161266d565b60078054906000610bbc83612aec565b919050559c508c611cfb565b6040516316c1973960e01b815230600482015260009081906001600160a01b038816906316c197399060240160a060405180830381865afa158015610c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c359190612b1c565b50509250925050604051806101a001604052808e81526020018f60a0016020810190610c61919061266d565b6001600160a01b031681526020018f6000016020810190610c82919061266d565b6001600160a01b031681526020018f6020016020810190610ca3919061266d565b6001600160a01b031681526020018f6040016020810190610cc49190612a11565b63ffffffff168152602001886001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190612b73565b62ffffff1681526020018d6001600160801b03168152602001886001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190612a72565b60020b8152602001886001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e169190612a72565b60020b815260200160006001600160801b0316815260200160006001600160801b0316815260200183815260200182815250600860008f81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160030160146101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160186101000a81548162ffffff021916908362ffffff16021790555060c08201518160040160006101000a8154816001600160801b0302191690836001600160801b0316021790555060e08201518160040160106101000a81548162ffffff021916908360020b62ffffff1602179055506101008201518160040160136101000a81548162ffffff021916908360020b62ffffff1602179055506101208201518160050160006101000a8154816001600160801b0302191690836001600160801b031602179055506101408201518160050160106101000a8154816001600160801b0302191690836001600160801b03160217905550610160820151816006015561018082015181600701559050505050505050505050509193509193565b61105683838360405180602001604052806000815250611782565b505050565b60008082600061106a82611361565b9050611077813384611d60565b6110b25760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000858152600860205260408082206004808201546006546002840154600385015495516371c54fc960e01b815294966001600160801b039093169592946001600160a01b03928316946371c54fc9946111229493841693811692600160a01b90910463ffffffff169101612a2c565b602060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612a55565b6040516390bc169360e01b81526001600160801b038416600482015290915081906001600160a01b038216906390bc16939060240160408051808303816000875af11580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190612ac8565b6040516316c1973960e01b8152306004820152919950975060009081906001600160a01b038416906316c197399060240160a060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190612b1c565b5050925092505061127e866006015483611266919061298d565b60048801546001600160801b0316600160801b611dc6565b611288908b612b98565b6005870180546000906112a59084906001600160801b0316612b98565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506112dc866007015482611266919061298d565b6112e6908a612b98565b60058701805460109061130a908490600160801b90046001600160801b0316612b98565b82546001600160801b039182166101009390930a9283029190920219909116179055506006860191909155600785015550505060040180546fffffffffffffffffffffffffffffffff191690555091939092509050565b600061051f8261183d565b60006001600160a01b038216611398576040516322718ad960e21b81526000600482015260240161081c565b506001600160a01b031660009081526003602052604090205490565b6000808360006113c382611361565b90506113d0813384611d60565b61140b5760405162461bcd60e51b815260206004820152600c60248201526b139bdd08185c1c1c9bdd995960a21b604482015260640161081c565b6000868152600860205260408082206006546002820154600383015493516371c54fc960e01b81529294936001600160a01b03928316936371c54fc99361146a9381169290811691600160a01b90910463ffffffff1690600401612a2c565b602060405180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab9190612a55565b60058301546040516360d49d5360e01b81526001600160a01b038a811660048301526001600160801b038084166024840152600160801b90930490921660448201529192508291908216906360d49d539060640160408051808303816000875af115801561151d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115419190612bb8565b600060058601556001600160801b03918216985016955061156189611e68565b50505050509250929050565b60606001805461053490612943565b600080808061158d85870187612beb565b6006546040516371c54fc960e01b815294985092965090945092506000916001600160a01b03909116906371c54fc9906115cf90889088908890600401612a2c565b602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190612a55565b90506001600160a01b038116331461166a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063616c6c6261636b2063616c6c6572000000000000000000604482015260640161081c565b88156116eb576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018b90528616906323b872dd906064016020604051808303816000875af11580156116c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e99190612c45565b505b871561176c576040516323b872dd60e01b81526001600160a01b038381166004830152336024830152604482018a90528516906323b872dd906064016020604051808303816000875af1158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612c45565b505b505050505050505050565b6105eb338383611ea3565b61178d8484846107f6565b6108803385858585611f42565b60606117a58261183d565b5060006117bd60408051602081019091526000815290565b905060008151116117dd5760405180602001604052806000815250611808565b806117e78461206d565b6040516020016117f8929190612c62565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6000818152600260205260408120546001600160a01b03168061051f57604051637e27328960e01b81526004810184905260240161081c565b6110568383836001612100565b6000828152600260205260408120546001600160a01b03908116908316156118b0576118b0818486612206565b6001600160a01b038116156118ee576118cd600085600080612100565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561191d576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b60020b600060ff82901d80830118620d89e88111156119a6576119a66345c3193d60e11b8461226a565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b1860028216156119e2576ffff97272373d413259a46990580e213a0260801c5b6004821615611a01576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611a20576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611a3f576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611a5e576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a7d576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611a9c576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611abc576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611adc576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611afc576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611b1c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611b3c576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611b5c576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b7c576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611b9c576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611bbd576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611bdd576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611bfc576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611c19576b048a170391f7dc42444e8fa20260801c5b6000841315611c2757600019045b63ffffffff0160201c9392505050565b6000836001600160a01b0316856001600160a01b03161115611c57579293925b846001600160a01b0316866001600160a01b031611611c8257611c7b85858561227b565b9050611cf2565b836001600160a01b0316866001600160a01b03161015611ce4576000611ca987868661227b565b90506000611cb88789866122e5565b9050806001600160801b0316826001600160801b031610611cd95780611cdb565b815b92505050611cf2565b611cef8585846122e5565b90505b95945050505050565b6001600160a01b038216611d2557604051633250574960e11b81526000600482015260240161081c565b6000611d3383836000611883565b90506001600160a01b03811615611056576040516339e3563760e11b81526000600482015260240161081c565b60006001600160a01b03831615801590611dbe5750826001600160a01b0316846001600160a01b03161480611d9a5750611d9a848461180f565b80611dbe57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b60008383028160001985870982811083820303915050808411611de857600080fd5b80600003611dfb57508290049050611808565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b6000611e776000836000611883565b90506001600160a01b0381166105eb57604051637e27328960e01b81526004810183905260240161081c565b6001600160a01b038216611ed557604051630b61174360e31b81526001600160a01b038316600482015260240161081c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561206657604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611f84908890889087908790600401612c91565b6020604051808303816000875af1925050508015611fbf575060408051601f3d908101601f19168201909252611fbc91810190612cc4565b60015b612028573d808015611fed576040519150601f19603f3d011682016040523d82523d6000602084013e611ff2565b606091505b50805160000361202057604051633250574960e11b81526001600160a01b038516600482015260240161081c565b805160208201fd5b6001600160e01b03198116630a85bd0160e11b1461206457604051633250574960e11b81526001600160a01b038516600482015260240161081c565b505b5050505050565b6060600061207a8361231b565b600101905060008167ffffffffffffffff81111561209a5761209a61281f565b6040519080825280601f01601f1916602001820160405280156120c4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846120ce57509392505050565b808061211457506001600160a01b03821615155b156121d65760006121248461183d565b90506001600160a01b038316158015906121505750826001600160a01b0316816001600160a01b031614155b80156121635750612161818461180f565b155b1561218c5760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161081c565b81156121d45783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b612211838383611d60565b611056576001600160a01b03831661223f57604051637e27328960e01b81526004810182905260240161081c565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161081c565b816000528060020b60045260246000fd5b6000826001600160a01b0316846001600160a01b0316111561229b579192915b60006122be856001600160a01b0316856001600160a01b0316600160601b611dc6565b9050611cf26122e084836122d28989612ce1565b6001600160a01b0316611dc6565b6123f3565b6000826001600160a01b0316846001600160a01b03161115612305579192915b611dbe6122e083600160601b6122d28888612ce1565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061235a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612386576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106123a457662386f26fc10000830492506010015b6305f5e10083106123bc576305f5e100830492506008015b61271083106123d057612710830492506004015b606483106123e2576064830492506002015b600a831061051f5760010192915050565b806001600160801b038116811461240957600080fd5b919050565b6001600160e01b03198116811461242457600080fd5b50565b60006020828403121561243957600080fd5b81356118088161240e565b60005b8381101561245f578181015183820152602001612447565b50506000910152565b60008151808452612480816020860160208601612444565b601f01601f19169290920160200192915050565b6020815260006118086020830184612468565b6000602082840312156124b957600080fd5b5035919050565b6001600160a01b038116811461242457600080fd5b600080604083850312156124e857600080fd5b82356124f3816124c0565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561260757815180518552868101516001600160a01b0390811688870152868201518116878701526060808301519091169086015260808082015163ffffffff169086015260a08082015162ffffff169086015260c0808201516001600160801b03169086015260e080820151600281900b828801525050610100808201516125ae8288018260020b9052565b5050610120818101516001600160801b038116878301525050610140818101516001600160801b038116878301525050610160818101519086015261018090810151908501526101a0909301929085019060010161251e565b5091979650505050505050565b60008060006060848603121561262957600080fd5b8335612634816124c0565b92506020840135612644816124c0565b929592945050506040919091013590565b600060e0828403121561266757600080fd5b50919050565b60006020828403121561267f57600080fd5b8135611808816124c0565b6000806040838503121561269d57600080fd5b8235915060208301356126af816124c0565b809150509250929050565b8d81526001600160a01b038d811660208301528c811660408301528b16606082015263ffffffff8a16608082015262ffffff891660a08201526001600160801b03881660c08201526101a0810161271660e083018960020b9052565b61272661010083018860020b9052565b6001600160801b0386166101208301526001600160801b03851661014083015261016082019390935261018001529b9a5050505050505050505050565b6000806000806060858703121561277957600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561279f57600080fd5b818701915087601f8301126127b357600080fd5b8135818111156127c257600080fd5b8860208285010111156127d457600080fd5b95989497505060200194505050565b801515811461242457600080fd5b6000806040838503121561280457600080fd5b823561280f816124c0565b915060208301356126af816127e3565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561284b57600080fd5b8435612856816124c0565b93506020850135612866816124c0565b925060408501359150606085013567ffffffffffffffff8082111561288a57600080fd5b818701915087601f83011261289e57600080fd5b8135818111156128b0576128b061281f565b604051601f8201601f19908116603f011681019083821181831017156128d8576128d861281f565b816040528281528a60208487010111156128f157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561292857600080fd5b8235612933816124c0565b915060208301356126af816124c0565b600181811c9082168061295757607f821691505b60208210810361266757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561051f5761051f612977565b63ffffffff8181168382160190808211156129bd576129bd612977565b5092915050565b634e487b7160e01b600052603260045260246000fd5b600063ffffffff8083168181036129f3576129f3612977565b6001019392505050565b803563ffffffff8116811461240957600080fd5b600060208284031215612a2357600080fd5b611808826129fd565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b600060208284031215612a6757600080fd5b8151611808816124c0565b600060208284031215612a8457600080fd5b81518060020b811461180857600080fd5b6001600160a01b03841681526001600160801b0383166020820152606060408201819052600090611cf290830184612468565b60008060408385031215612adb57600080fd5b505080516020909101519092909150565b600060018201612afe57612afe612977565b5060010190565b80516001600160801b038116811461240957600080fd5b600080600080600060a08688031215612b3457600080fd5b612b3d86612b05565b94506020860151935060408601519250612b5960608701612b05565b9150612b6760808701612b05565b90509295509295909350565b600060208284031215612b8557600080fd5b815162ffffff8116811461180857600080fd5b6001600160801b038181168382160190808211156129bd576129bd612977565b60008060408385031215612bcb57600080fd5b612bd483612b05565b9150612be260208401612b05565b90509250929050565b60008060008060808587031215612c0157600080fd5b8435612c0c816124c0565b93506020850135612c1c816124c0565b9250612c2a604086016129fd565b91506060850135612c3a816124c0565b939692955090935050565b600060208284031215612c5757600080fd5b8151611808816127e3565b60008351612c74818460208801612444565b835190830190612c88818360208801612444565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611cef90830184612468565b600060208284031215612cd657600080fd5b81516118088161240e565b6001600160a01b038281168282160390808211156129bd576129bd61297756fea2646970667358221220b5eac0bd7cc28c221f5137ec5579c149f2b0d5171170f604039921740181229d64736f6c63430008140033000000000000000000000000b1952789ee2d5e3f909aaaa5456abfabab316419",
      "r": "0xb805d1d0168c2e608d186b51e484ce85080095af2f6b4b0f44ee0f18431ba33e",
      "s": "0x193ba677601177742ba9f8177abc6d72379f6590915e715335c4236df7450b06",
      "v": 1,
      "chainId": 11155111
    }
  }
}