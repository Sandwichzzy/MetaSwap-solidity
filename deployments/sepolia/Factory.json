{
  "address": "0x7762bbe2A009aB3B9201E46e8a56d8c7c070E3d9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bf53375931842ee3a4d022598e117613f9c4d1320b5b0ce6d0add3fb76df0ad",
  "receipt": {
    "to": null,
    "from": "0x523df39cAe18ea125930DA730628213e4b147CDc",
    "contractAddress": "0x7762bbe2A009aB3B9201E46e8a56d8c7c070E3d9",
    "transactionIndex": 133,
    "gasUsed": "3094814",
    "logsBloom": "0x
    "blockHash": "0x668cedead5b2e8c8a912679f330686ac09f3346484159d39e4c405db673f001d",
    "transactionHash": "0x1bf53375931842ee3a4d022598e117613f9c4d1320b5b0ce6d0add3fb76df0ad",
    "logs": [],
    "blockNumber": 9157672,
    "cumulativeGasUsed": "13819803",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ab6acfed7a141d3f2e40f0331761601c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/IFactory.sol\\\";\\r\\nimport \\\"./Pool.sol\\\";\\r\\n\\r\\ncontract Factory is IFactory {\\r\\n\\r\\n    Parameters public override parameters;\\r\\n\\r\\n    mapping(address => mapping(address => address[])) public  pools;\\r\\n\\r\\n    function sortToken(address tokenA,address tokenB) private pure returns (address,address){\\r\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n    }\\r\\n\\r\\n    function createPool(address tokenA, address tokenB, int24 tickLower, int24 tickUpper, uint24 fee) \\r\\n        external returns (address pool){\\r\\n        require(tokenA != tokenB, \\\"TokenA and TokenB cannot be the same\\\");\\r\\n\\r\\n        address token0;\\r\\n        address token1;\\r\\n        // sort token, avoid the mistake of the order \\u5c06tokenA\\u548ctokenB\\u6309\\u5927\\u5c0f\\u6392\\u5e8f\\r\\n        (token0,token1) = sortToken(tokenA, tokenB);\\r\\n\\r\\n        //get current all pools\\r\\n        address[] memory existingPools  = pools[token0][token1];\\r\\n        // check if the pool already exists \\r\\n        // \\u6709\\u70b9\\u8017gas\\uff0c\\u53ef\\u4ee5\\u4f18\\u5316\\r\\n        for(uint i = 0; i < existingPools.length; i++){\\r\\n            IPool currentPool =IPool(existingPools[i]);\\r\\n            if (currentPool.tickLower() == tickLower && \\r\\n                currentPool.tickUpper() == tickUpper && \\r\\n                currentPool.fee() == fee){\\r\\n                // if the pool already exists, return the pool\\r\\n                return existingPools[i];\\r\\n            }\\r\\n        }\\r\\n        //save the pool info\\r\\n        parameters = Parameters(address(this), tokenA, tokenB, tickLower, tickUpper, fee);\\r\\n        // generate create2 salt\\r\\n        bytes32 salt = keccak256(abi.encode(token0, token1, tickLower, tickUpper, fee));\\r\\n        // create pool\\r\\n        // salt \\u6765\\u4f7f\\u7528 CREATE2 \\u7684\\u65b9\\u5f0f\\u6765\\u521b\\u5efa\\u5408\\u7ea6\\uff0c\\u8fd9\\u6837\\u7684\\u597d\\u5904\\u662f\\u521b\\u5efa\\u51fa\\u6765\\u7684\\u5408\\u7ea6\\u5730\\u5740\\u662f\\u53ef\\u9884\\u6d4b\\u7684\\uff0c\\r\\n        // \\u5730\\u5740\\u751f\\u6210\\u7684\\u903b\\u8f91\\u662f \\u65b0\\u5730\\u5740 = hash(\\\"0xFF\\\",\\u521b\\u5efa\\u8005\\u5730\\u5740, salt, initcode)\\r\\n        pool=address(new Pool{salt:salt}());\\r\\n        // save created pool\\r\\n        pools[token0][token1].push(pool);\\r\\n        // delete pool info\\r\\n        delete parameters;\\r\\n        //emit PoolCreated event\\r\\n        emit PoolCreated(token0, token1, uint32(existingPools.length), tickLower, tickUpper, fee, pool);\\r\\n    }\\r\\n\\r\\n    function getPool(address tokenA, address tokenB, uint32 index) external view override returns (address pool){\\r\\n        require(tokenA != tokenB, \\\"TokenA and TokenB cannot be the same\\\");\\r\\n        require(tokenA != address(0) && tokenB != address(0), \\\"ZERO_ADDRESS\\\");\\r\\n\\r\\n        address token0;\\r\\n        address token1;\\r\\n\\r\\n        (token0,token1) = sortToken(tokenA, tokenB);\\r\\n\\r\\n        pool = pools[token0][token1][index];\\r\\n\\r\\n        require(pool != address(0), \\\"POOL_NOT_EXISTS\\\");\\r\\n\\r\\n        return pool;\\r\\n    }\\r\\n\\r\\n    \\r\\n}\",\"keccak256\":\"0xdc605b08d880ce14c550fc1f3d0d26140f74f77bbae2305d123de8fffbb3aadb\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./libraries/SqrtPriceMath.sol\\\";\\nimport \\\"./libraries/TickMath.sol\\\";\\nimport \\\"./libraries/LiquidityMath.sol\\\";\\nimport \\\"./libraries/LowGasSafeMath.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./libraries/FullMath.sol\\\";\\nimport \\\"./libraries/FixedPoint128.sol\\\";\\nimport \\\"./libraries/SwapMath.sol\\\";\\n\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\n//MetaSwap\\u6bcf\\u4e2a\\u4ee3\\u5e01\\u5bf9\\u53ef\\u80fd\\u6709\\u591a\\u4e2a Pool \\u5408\\u7ea6\\uff0c\\u6bcf\\u4e2a Pool \\u5408\\u7ea6\\u5c31\\u662f\\u4e00\\u4e2a\\u4ea4\\u6613\\u6c60\\uff0c\\u6bcf\\u4e2a\\u4ea4\\u6613\\u6c60\\u90fd\\u6709\\u81ea\\u5df1\\u7684\\u4ef7\\u683c\\u4e0a\\u4e0b\\u9650\\u548c\\u624b\\u7eed\\u8d39\\n//Uniswap \\u7684\\u4ea4\\u6613\\u6c60\\u53ea\\u6709\\u4ea4\\u6613\\u5bf9+\\u624b\\u7eed\\u8d39\\u5c5e\\u6027\\uff0c\\u800c\\u6211\\u4eec\\u7684\\u4ea4\\u6613\\u6c60\\u8fd8\\u6709\\u4ef7\\u683c\\u4e0a\\u4e0b\\u9650\\u5c5e\\u6027\\u3002\\n//\\u5728 Uniswap V3 \\u4e2d\\uff0c\\u4f60\\u9700\\u8981\\u5728\\u4e00\\u4e2a\\u4ea4\\u6613\\u6c60\\u91cc\\u9762\\u53bb\\u7ba1\\u7406\\u5728\\u4e0d\\u540c\\u4ef7\\u683c\\u533a\\u95f4\\u5185\\u7684\\u6d41\\u52a8\\u6027\\n//\\u8fd9\\u91cc\\u7b80\\u5316\\u4e86 \\u53ea\\u9700\\u8981\\u8003\\u8651\\u8fd9\\u4e2a\\u56fa\\u5b9a\\u8303\\u56f4\\u5185\\u7684\\u6d41\\u52a8\\u6027\\u7ba1\\u7406\\u548c\\u4ea4\\u6613\\u5373\\u53ef\\uff0c\\ncontract Pool is IPool {\\n    using SafeCast for uint256;\\n    using LowGasSafeMath for int256;\\n    using LowGasSafeMath for uint256;\\n\\n    // ============ \\u4e0d\\u53ef\\u53d8\\u72b6\\u6001\\u53d8\\u91cf ============\\n    \\n    address public immutable override factory;\\n\\n    address public immutable override token0;\\n\\n    address public immutable override token1;\\n\\n    uint24 public immutable override fee;\\n\\n    int24 public immutable override tickLower;\\n\\n    int24 public immutable override tickUpper;\\n\\n    // ============ \\u53ef\\u53d8\\u72b6\\u6001\\u53d8\\u91cf ============\\n    \\n    uint160 public override sqrtPriceX96;\\n\\n    int24 public override tick;\\n\\n    uint128 public override liquidity;\\n\\n    uint256 public override feeGrowthGlobal0X128;\\n\\n    uint256 public override feeGrowthGlobal1X128;\\n\\n\\n    /**\\n     * @notice \\u6d41\\u52a8\\u6027\\u4f4d\\u7f6e\\u7ed3\\u6784\\u4f53\\n     * @dev \\u5b58\\u50a8\\u6bcf\\u4e2a\\u5730\\u5740\\u7684\\u6d41\\u52a8\\u6027\\u4f4d\\u7f6e\\u4fe1\\u606f\\n     */\\n    struct Position{\\n        uint128 liquidity;// \\u8be5 Position \\u62e5\\u6709\\u7684\\u6d41\\u52a8\\u6027\\n        uint128 tokensOwed0;// \\u53ef\\u63d0\\u53d6\\u7684 token0 \\u6570\\u91cf\\n        uint128 tokensOwed1;// \\u53ef\\u63d0\\u53d6\\u7684 token1 \\u6570\\u91cf\\n        uint256 feeGrowthInside0LastX128;// \\u4e0a\\u6b21\\u63d0\\u53d6\\u624b\\u7eed\\u8d39\\u65f6\\u7684 feeGrowthGlobal0X128\\n        uint256 feeGrowthInside1LastX128;// \\u4e0a\\u6b21\\u63d0\\u53d6\\u624b\\u7eed\\u8d39\\u662f\\u7684 feeGrowthGlobal1X128\\n    }\\n    // \\u7528\\u4e00\\u4e2a mapping \\u6765\\u5b58\\u653e\\u6240\\u6709 Position \\u7684\\u4fe1\\u606f\\uff0ckey \\u662f\\u5730\\u5740\\uff0cvalue \\u662f Position \\u7ed3\\u6784\\u4f53\\n    mapping(address => Position) public positions;\\n    \\n    /**\\n     * @notice \\u6784\\u9020\\u51fd\\u6570 - \\u4eceFactory\\u8bfb\\u53d6\\u6c60\\u53c2\\u6570\\n     * @dev \\u4f7f\\u7528CREATE2\\u90e8\\u7f72\\uff0c\\u53c2\\u6570\\u901a\\u8fc7Factory\\u7684parameters\\u53d8\\u91cf\\u4f20\\u9012\\n     */\\n    constructor(){\\n        // Factory \\u521b\\u5efa Pool \\u65f6\\u4f1a\\u901a new Pool{salt: salt}() \\u7684\\u65b9\\u5f0f\\u521b\\u5efa Pool \\u5408\\u7ea6\\uff0c\\n        // \\u901a\\u8fc7 salt \\u6307\\u5b9a Pool \\u7684\\u5730\\u5740\\uff0c\\u8fd9\\u6837\\u5176\\u4ed6\\u5730\\u65b9\\u4e5f\\u53ef\\u4ee5\\u63a8\\u7b97\\u51fa Pool \\u7684\\u5730\\u5740\\n        // \\u53c2\\u6570\\u901a\\u8fc7\\u8bfb\\u53d6 Factory \\u5408\\u7ea6\\u7684 parameters \\u83b7\\u53d6\\n        // \\u4e0d\\u901a\\u8fc7\\u6784\\u9020\\u51fd\\u6570\\u4f20\\u5165\\uff0c\\u56e0\\u4e3a CREATE2 \\u4f1a\\u6839\\u636e \\n        // initcode \\u8ba1\\u7b97\\u51fa\\u65b0\\u5730\\u5740\\uff08new_address = hash(0xFF, sender, salt, bytecode)\\uff09\\uff0c\\u5e26\\u4e0a\\u53c2\\u6570\\u5c31\\u4e0d\\u80fd\\u8ba1\\u7b97\\u51fa\\u7a33\\u5b9a\\u7684\\u5730\\u5740\\u4e86\\n        (factory, token0, token1, tickLower, tickUpper,fee) = IFactory(msg.sender).parameters();\\n    }\\n\\n    /**\\n     * @notice \\u521d\\u59cb\\u5316\\u6c60\\u7684\\u4ef7\\u683c\\n     * @param _sqrtPriceX96 \\u521d\\u59cb\\u4ef7\\u683c\\u7684\\u5e73\\u65b9\\u6839\\uff08X96\\u683c\\u5f0f\\uff09\\n     * @dev \\u53ea\\u80fd\\u521d\\u59cb\\u5316\\u4e00\\u6b21\\uff0c\\u4ef7\\u683c\\u5fc5\\u987b\\u5728tick\\u8303\\u56f4\\u5185\\n    */\\n    function initialize(uint160 _sqrtPriceX96) external override {\\n        require(sqrtPriceX96 == 0, \\\"Already initialized\\\");\\n         // \\u901a\\u8fc7\\u4ef7\\u683c\\u83b7\\u53d6 tick\\uff0c\\u5224\\u65ad tick \\u662f\\u5426\\u5728 tickLower \\u548c tickUpper \\u4e4b\\u95f4\\n        tick=TickMath.getTickAtSqrtPrice(_sqrtPriceX96);\\n        require(tick >= tickLower && tick <= tickUpper, \\\"sqrtPriceX96 should be within the range of [tickLower, tickUpper)\\\");\\n        // \\u521d\\u59cb\\u5316 Pool \\u7684 sqrtPriceX96\\n        sqrtPriceX96 = _sqrtPriceX96;\\n    }\\n\\n    \\n    struct ModifyPositionParams {\\n         // the address that owns the position\\n        address owner;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n\\n    // \\u6dfb\\u52a0\\u6d41\\u52a8\\u6027\\n    // \\u6dfb\\u52a0\\u6d41\\u52a8\\u6027\\u65f6\\uff0c\\u9700\\u8981\\u4f20\\u5165 amount \\u548c data\\uff0camount \\u662f\\u6dfb\\u52a0\\u7684\\u6d41\\u52a8\\u6027\\u6570\\u91cf\\uff0cdata \\u662f\\u56de\\u8c03\\u6570\\u636e\\n    // recipient \\u6d41\\u52a8\\u6027\\u7684\\u6743\\u76ca\\u8d4b\\u4e88\\u8c01\\n    // return amount0 \\u548c amount1 \\u662f\\u6dfb\\u52a0\\u6d41\\u52a8\\u6027\\u540e\\u9700\\u8981\\u591a\\u5c11 amount0 \\u548c amount1\\n    // \\u6dfb\\u52a0\\u6d41\\u52a8\\u6027\\u540e\\uff0c\\u9700\\u8981\\u56de\\u8c03 mintCallback \\u65b9\\u6cd5\\uff0c\\u8fd9\\u4e2a\\u65b9\\u6cd5\\u9700\\u8981\\u4f20\\u5165 amount0 \\u548c amount1\\uff0c\\n    function mint(address recipent,uint128 amount,bytes calldata data) \\n        external override returns (uint256 amount0,uint256 amount1){\\n            require(amount > 0, \\\"Amount must be greater than 0\\\");\\n            // \\u57fa\\u4e8e amount \\u8ba1\\u7b97\\u51fa\\u5f53\\u524d\\u9700\\u8981\\u591a\\u5c11 amount0 \\u548c amount1\\n            (int256 amount0Int,int256 amount1Int) = _modifyPosition(ModifyPositionParams({owner: recipent, liquidityDelta: int128(amount)})\\n            );\\n            amount0=uint256(amount0Int);\\n            amount1=uint256(amount1Int);\\n            uint256 balance0Before;\\n            uint256 balance1Before;\\n            if (amount0 > 0) balance0Before=_balance0();\\n            if (amount1 > 0) balance1Before=_balance1();\\n            // \\u56de\\u8c03 mintCallback \\u8c03\\u7528 `mint` \\u65b9\\u6cd5\\u7684\\u5408\\u7ea6\\u9700\\u8981\\u5b9e\\u73b0 `IMintCallback` \\u63a5\\u53e3\\u5b8c\\u6210\\u4ee3\\u5e01\\u7684\\u8f6c\\u5165\\u64cd\\u4f5c\\uff1a\\n            IMintCallback(msg.sender).mintCallback(amount0, amount1, data);\\n            //\\u56de\\u8c03\\u5b8c\\u6210\\u540e\\u4f1a\\u68c0\\u67e5\\u4ea4\\u6613\\u6c60\\u5408\\u7ea6\\u7684\\u5bf9\\u5e94\\u4f59\\u989d\\u662f\\u5426\\u53d1\\u751f\\u53d8\\u5316\\uff0c\\u5e76\\u4e14\\u589e\\u91cf\\u5e94\\u8be5\\u5927\\u4e8e amount0 \\u548c amount1\\uff1a\\u8fd9\\u610f\\u5473\\u7740\\u8c03\\u7528\\u65b9\\u786e\\u5b9e\\u8f6c\\u5165\\u4e86\\u6240\\u9700\\u7684\\u8d44\\u4ea7\\u3002\\n            if (amount0 > 0) {\\n                require(balance0Before.add(amount0)<=_balance0(), \\\"M0\\\");\\n            }\\n            if (amount1 > 0) {\\n                require(balance1Before.add(amount1)<=_balance1(), \\\"M1\\\");\\n            }\\n            // \\u89e6\\u53d1 Mint \\u4e8b\\u4ef6\\n            emit Mint(msg.sender, recipent, amount, amount0, amount1);\\n    }\\n\\n\\n    //Uniswap V3 \\u4e2d\\uff0c\\u8ba1\\u7b97\\u6d41\\u52a8\\u6027\\u65f6\\u7684\\u4e0a\\u4e0b\\u9650\\u662f\\u53c2\\u6570\\u52a8\\u6001\\u4f20\\u5165\\u7684 params.tickLower \\u548c params.tickUpper\\n    //MetaSwap \\u4ea4\\u6613\\u6c60\\u90fd\\u56fa\\u5b9a\\u5728\\u4e00\\u4e2a\\u4ef7\\u683c\\u533a\\u95f4\\u5185\\uff0cmint \\u4e5f\\u53ea\\u80fd\\u5728\\u8fd9\\u4e2a\\u4ef7\\u683c\\u533a\\u95f4\\u5185 mint\\uff0c\\u6240\\u4ee5 tickLower \\u548c tickUpper \\u662f\\u56fa\\u5b9a\\u7684\\n    function _modifyPosition(ModifyPositionParams memory params) private returns(int256 amount0,int256 amount1){\\n        // \\u901a\\u8fc7\\u65b0\\u589e\\u7684\\u6d41\\u52a8\\u6027\\u8ba1\\u7b97 amount0 \\u548c amount1\\n        // \\u53c2\\u8003 UniswapV3 \\u7684\\u4ee3\\u7801\\n        // \\u7528\\u5230 SqrtPriceMath \\u5e93\\uff0c\\u8fd9\\u4e2a\\u5e93\\u662f Uniswap V3 \\u4e2d\\u7684\\u4e00\\u4e2a\\u5de5\\u5177\\u5e93\\n        // FullMath.sol \\u548c TickMath.sol \\u56e0\\u4e3a\\u4f9d\\u8d56\\u4e8e solidity <0.8.0;\\u8fd9\\u91cc\\u7528\\u7684\\u662f 0.8.0+\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u4f7f\\u7528 Uniswap V4 \\u7684\\u4ee3\\u7801\\n        // \\u5f53\\u524d\\u4ef7\\u683c\\u5728\\u4e00\\u5b9a\\u5728tick\\u533a\\u95f4\\u5185\\uff0c\\u6240\\u4ee5\\u4e0d\\u9700\\u8981\\u8003\\u8651\\u4ef7\\u683c\\u8d85\\u51fa\\u533a\\u95f4\\u7684\\u60c5\\u51b5\\n        amount0=SqrtPriceMath.getAmount0Delta(sqrtPriceX96,TickMath.getSqrtPriceAtTick(tickUpper),params.liquidityDelta);\\n        amount1=SqrtPriceMath.getAmount1Delta(sqrtPriceX96,TickMath.getSqrtPriceAtTick(tickLower),params.liquidityDelta);\\n\\n        // \\u83b7\\u53d6\\u5f53\\u524d\\u7528\\u6237\\u7684 position\\uff0crecipient \\u5e94\\u8be5\\u6539\\u4e3a msg.sender\\n        Position storage position = positions[params.owner];\\n\\n        //\\u5173\\u952e\\u6b65\\u9aa4\\uff1a\\u7ed3\\u7b97\\u672a\\u9886\\u53d6\\u7684\\u8d39\\u7528\\n        //\\u5c06\\u8d39\\u7528\\u589e\\u957f\\u56e0\\u5b50\\u5dee\\u503c\\u4e58\\u4ee5\\u5934\\u5bf8\\u539f\\u6709\\u7684\\u6d41\\u52a8\\u6027\\u6570\\u91cf\\uff0c\\u518d\\u9664\\u4ee5 Q128\\uff08\\u4e00\\u4e2a\\u56fa\\u5b9a\\u70b9\\u6570\\u7cbe\\u5ea6\\u5e38\\u91cf\\uff09\\uff0c\\u5f97\\u5230\\u5e94\\u7d2f\\u52a0\\u7684\\u8d39\\u7528\\u4ee3\\u5e01\\u6570\\u91cf\\u3002\\n        uint128 tokensOwed0 = uint128(\\n            FullMath.mulDiv(\\n                feeGrowthGlobal0X128 - position.feeGrowthInside0LastX128,\\n                position.liquidity,\\n                FixedPoint128.Q128\\n            )\\n        );\\n        uint128 tokensOwed1 = uint128(\\n            FullMath.mulDiv(\\n                feeGrowthGlobal1X128 - position.feeGrowthInside1LastX128,\\n                position.liquidity,\\n                FixedPoint128.Q128\\n            )\\n        );\\n\\n         // \\u66f4\\u65b0\\u63d0\\u53d6\\u624b\\u7eed\\u8d39\\u7684\\u8bb0\\u5f55\\uff0c\\u540c\\u6b65\\u5230\\u5f53\\u524d\\u6700\\u65b0\\u7684 feeGrowthGlobal0X128\\uff0c\\u4ee3\\u8868\\u90fd\\u63d0\\u53d6\\u5b8c\\u4e86\\n        position.feeGrowthInside0LastX128 = feeGrowthGlobal0X128;\\n        position.feeGrowthInside1LastX128 = feeGrowthGlobal1X128;\\n        // \\u628a\\u53ef\\u4ee5\\u63d0\\u53d6\\u7684\\u624b\\u7eed\\u8d39\\u8bb0\\u5f55\\u5230 tokensOwed0 \\u548c tokensOwed1 \\u4e2d\\n        // LP \\u53ef\\u4ee5\\u901a\\u8fc7 collect \\u6765\\u6700\\u7ec8\\u63d0\\u53d6\\u5230\\u7528\\u6237\\u81ea\\u5df1\\u8d26\\u6237\\u4e0a\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            position.tokensOwed0 += tokensOwed0;\\n            position.tokensOwed1 += tokensOwed1;\\n        }\\n        // \\u4fee\\u6539\\u6c60\\u5b50 liquidity \\u548c\\u5934\\u5bf8 position.liquidity\\n        liquidity=LiquidityMath.addDelta(liquidity,params.liquidityDelta);\\n        position.liquidity=LiquidityMath.addDelta(position.liquidity,params.liquidityDelta);\\n    }\\n\\n\\n    //\\u5b83\\u4e0d\\u9700\\u8981\\u6709\\u56de\\u8c03\\uff0c\\u53e6\\u5916\\u63d0\\u53d6\\u4ee3\\u5e01\\u662f\\u653e\\u5230 collect \\u4e2d\\u64cd\\u4f5c\\u7684\\u3002\\n    //\\u5728 burn \\u65b9\\u6cd5\\u4e2d\\uff0c\\u6211\\u4eec\\u53ea\\u662f\\u628a\\u6d41\\u52a8\\u6027\\u79fb\\u9664\\uff0c\\u5e76\\u8ba1\\u7b97\\u51fa\\u8981\\u9000\\u56de\\u7ed9 LP \\u7684 amount0 \\u548c amount1\\uff0c\\u8bb0\\u5f55\\u5728\\u5408\\u7ea6\\u72b6\\u6001\\u4e2d\\n    function burn(uint128 amount) external override returns (uint256 amount0,uint256 amount1){\\n        require(amount > 0, \\\"Burn Amount must be greater than 0\\\");\\n        require(amount <=positions[msg.sender].liquidity,\\\"Burn amount exceeds liquidity\\\");\\n        // \\u4fee\\u6539 positions \\u4e2d\\u7684\\u4fe1\\u606f\\n        (int256 amount0Int, int256 amount1Int) = _modifyPosition(\\n            ModifyPositionParams({\\n                owner: msg.sender,\\n                liquidityDelta: -int128(amount)\\n            })\\n        );\\n        // \\u83b7\\u53d6\\u71c3\\u70e7\\u540e\\u7684\\u9000\\u6362\\u7684 amount0 \\u548c amount1\\n        amount0=uint256(-amount0Int);\\n        amount1=uint256(-amount1Int);\\n\\n        if (amount0 > 0 || amount1 > 0) {\\n            (\\n                positions[msg.sender].tokensOwed0,\\n                positions[msg.sender].tokensOwed1\\n            ) = (\\n                positions[msg.sender].tokensOwed0 + uint128(amount0),\\n                positions[msg.sender].tokensOwed1 + uint128(amount1)\\n            );\\n        }\\n\\n        emit Burn(msg.sender, amount, amount0, amount1);\\n    }\\n\\n    //Position \\u4e2d\\u5b9a\\u4e49\\u4e86 tokensOwed0 \\u548c tokensOwed1\\uff0c\\n    //\\u7528\\u6765\\u8bb0\\u5f55 LP \\u53ef\\u4ee5\\u63d0\\u53d6\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff0c\\u8fd9\\u4e2a\\u4ee3\\u5e01\\u6570\\u91cf\\u662f\\u5728 collect \\u4e2d\\u63d0\\u53d6\\u7684\\n     function collect(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external override returns (uint128 amount0, uint128 amount1) {\\n        // \\u83b7\\u53d6\\u5f53\\u524d\\u7528\\u6237\\u7684 position\\n        Position storage position = positions[msg.sender];\\n        // \\u628a\\u94b1\\u9000\\u7ed9\\u7528\\u6237 recipient\\n        amount0 = amount0Requested > position.tokensOwed0\\n            ? position.tokensOwed0\\n            : amount0Requested;\\n        amount1 = amount1Requested > position.tokensOwed1\\n            ? position.tokensOwed1\\n            : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            position.tokensOwed0 -= amount0;\\n            TransferHelper.safeTransfer(token0, recipient, amount0);\\n        }\\n        if (amount1 > 0) {\\n            position.tokensOwed1 -= amount1;\\n            TransferHelper.safeTransfer(token1, recipient, amount1);\\n        }\\n        // \\u89e6\\u53d1 Collect \\u4e8b\\u4ef6\\n        emit Collect(msg.sender, recipient, amount0, amount1);\\n    }\\n\\n    // \\u4ea4\\u6613\\u4e2d\\u9700\\u8981\\u4e34\\u65f6\\u5b58\\u50a8\\u7684\\u53d8\\u91cf\\n    struct SwapParams {\\n        // \\u5269\\u4f59\\u9700\\u8981\\u4ea4\\u6362\\u7684\\u6570\\u91cf\\n        int256 amountSpecifiedRemaining;\\n        // \\u5df2\\u8ba1\\u7b97\\u51fa\\u7684\\u6570\\u91cf\\n        int256 amountCalculated;\\n        // \\u5f53\\u524d\\u4ef7\\u683c\\n        uint160 sqrtPriceX96;\\n         // \\u5168\\u5c40\\u8d39\\u7528\\u589e\\u957f\\uff0c\\u6839\\u636e\\u65b9\\u5411\\u9009\\u62e9 token0 \\u6216token1 \\u7684\\u8d39\\u7528\\u589e\\u957f\\u3002\\n        uint256 feeGrowthGlobalX128;\\n        // \\u8be5\\u4ea4\\u6613\\u4e2d\\u7528\\u6237\\u8f6c\\u5165\\u7684 token \\u7684\\u6570\\u91cf\\n        uint256 amountIn;\\n         // \\u8be5\\u4ea4\\u6613\\u4e2d\\u7528\\u6237\\u8f6c\\u51fa\\u7684 token \\u7684\\u6570\\u91cf\\n        uint256 amountOut;\\n        // \\u8be5\\u4ea4\\u6613\\u4e2d\\u9700\\u8981\\u652f\\u4ed8\\u7684\\u624b\\u7eed\\u8d39 \\u5982\\u679c zeroForOne \\u662f ture\\uff0c\\u5219\\u662f\\u7528\\u6237\\u8f6c\\u5165 token0\\uff0c\\u5355\\u4f4d\\u662f token0 \\u7684\\u6570\\u91cf\\uff0c\\u53cd\\u6b63\\u662f token1 \\u7684\\u6570\\u91cf\\n        uint256 feeAmount;\\n    }\\n\\n\\n    //amountSpecified:\\u6307\\u5b9a\\u7684\\u4ee3\\u5e01\\u6570\\u91cf\\uff0c\\u6307\\u5b9a\\u8f93\\u5165\\u7684\\u4ee3\\u5e01\\u6570\\u91cf(\\u8981\\u652f\\u4ed8\\u7684 token0 \\u7684\\u6570\\u91cf)\\u5219\\u4e3a\\u6b63\\u6570\\uff0c\\u6307\\u5b9a\\u8f93\\u51fa\\u7684\\u4ee3\\u5e01(\\u8981\\u83b7\\u53d6\\u7684 token1)\\u6570\\u91cf\\u5219\\u4e3a\\u8d1f\\u6570\\n    //sqrtPriceLimitX96: \\u4ef7\\u683c\\u9650\\u5236\\uff0c\\u5982\\u679c\\u4ece token0 \\u4ea4\\u6362 token1 \\u5219\\u9650\\u5b9a\\u4ef7\\u683c\\u4e0b\\u9650\\uff0c\\u4ece token1 \\u4ea4\\u6362 token0 \\u5219\\u9650\\u5b9a\\u4ef7\\u683c\\u4e0a\\u9650\\n    //\\u5982\\u679c\\u4ece token0 \\u4ea4\\u6362 token1 \\u5219\\u9650\\u5b9a\\u4ef7\\u683c\\u4e0b\\u9650\\uff0c\\u4ece token1 \\u4ea4\\u6362 token0 \\u5219\\u9650\\u5b9a\\u4ef7\\u683c\\u4e0a\\u9650\\n    //data: \\u56de\\u8c03\\u6570\\u636e\\n    function swap(\\n        address recipient, \\n        bool zeroForOne, \\n        int256 amountSpecified,  \\n        uint160 sqrtPriceLimitX96, \\n        bytes calldata data) external override returns (int256 amount0, int256 amount1)\\n        {\\n        // \\u68c0\\u67e5 amountSpecified \\u662f\\u5426\\u4e3a 0\\n        require(amountSpecified != 0, \\\"AS\\\");\\n        // \\u5bf9\\u4e8e zeroForOne \\u65b9\\u5411\\uff0ctoken0 \\u6362 token1,\\u4ea4\\u6613\\u4f1a\\u5bfc\\u81f4\\u6c60\\u5b50\\u7684 token0 \\u53d8\\u591a\\uff0c\\n        // \\u4ef7\\u683c\\u4e0b\\u8dcc\\uff0c\\u6211\\u4eec\\u9700\\u8981\\u9a8c\\u8bc1 sqrtPriceLimitX96 \\u5fc5\\u987b\\u5c0f\\u4e8e\\u5f53\\u524d\\u7684\\u4ef7\\u683c\\uff0c\\n        // \\u5bf9\\u4e8e !zeroForOne \\u65b9\\u5411\\uff0c\\u4ef7\\u683c\\u9650\\u5236\\u5fc5\\u987b\\u9ad8\\u4e8e\\u5f53\\u524d\\u4ef7\\u683c\\u4f46\\u4f4e\\u4e8e\\u6700\\u5927\\u4ef7\\u683c\\n        require(\\n            zeroForOne \\n             ? sqrtPriceLimitX96 < sqrtPriceX96 && sqrtPriceLimitX96 > TickMath.MIN_SQRT_PRICE\\n             : sqrtPriceLimitX96 > sqrtPriceX96 && sqrtPriceLimitX96 < TickMath.MAX_SQRT_PRICE,\\n            \\\"SPL\\\"\\n        );\\n\\n        bool exactInput=amountSpecified>0; //\\u5224\\u65ad\\u662f\\u8f93\\u5165\\u8fd8\\u662f\\u8f93\\u51fa\\u6a21\\u5f0f\\n        SwapParams memory state = SwapParams({\\n            amountSpecifiedRemaining: amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: sqrtPriceX96,\\n            feeGrowthGlobalX128: zeroForOne\\n                ? feeGrowthGlobal0X128\\n                : feeGrowthGlobal1X128,\\n            amountIn: 0,\\n            amountOut: 0,\\n            feeAmount: 0\\n        });\\n        // \\u8ba1\\u7b97\\u4ea4\\u6613\\u7684\\u4e0a\\u4e0b\\u9650\\uff0c\\u57fa\\u4e8e tick \\u8ba1\\u7b97\\u4ef7\\u683c\\n        uint160 sqrtPriceX96Lower =TickMath.getSqrtPriceAtTick(tickLower);\\n        uint160 sqrtPriceX96Upper =TickMath.getSqrtPriceAtTick(tickUpper);\\n        // \\u8ba1\\u7b97\\u7528\\u6237\\u4ea4\\u6613\\u4ef7\\u683c\\u7684\\u9650\\u5236\\uff0c\\u5982\\u679c\\u662f zeroForOne \\u662f true\\uff0c\\u8bf4\\u660e\\u7528\\u6237\\u4f1a\\u6362\\u5165 token0\\uff0c\\n        // \\u4f1a\\u538b\\u4f4e token0 \\u7684\\u4ef7\\u683c\\uff08\\u4e5f\\u5c31\\u662f\\u6c60\\u5b50\\u7684\\u4ef7\\u683c\\uff09\\uff0c\\u6240\\u4ee5\\u8981\\u9650\\u5236\\u6700\\u4f4e\\u4ef7\\u683c\\u4e0d\\u80fd\\u8d85\\u8fc7 sqrtPriceX96Lower\\n        uint160 sqrtPriceX96PoolLimit = zeroForOne\\n            ? sqrtPriceX96Lower\\n            : sqrtPriceX96Upper;\\n        //  SwapMath.computeSwapStep \\u8ba1\\u7b97\\u5f53\\u524d\\u6b65\\u9aa4\\u7684\\u8f93\\u5165\\u91cf\\u3001\\u8f93\\u51fa\\u91cf\\u3001\\u8d39\\u7528\\u548c\\u65b0\\u4ef7\\u683c\\u3002\\n        (state.sqrtPriceX96,state.amountIn,state.amountOut,state.feeAmount)=SwapMath.computeSwapStep(sqrtPriceX96,\\n            (zeroForOne ? sqrtPriceX96PoolLimit < sqrtPriceLimitX96 : sqrtPriceX96PoolLimit > sqrtPriceLimitX96)\\n            ?sqrtPriceLimitX96:sqrtPriceX96PoolLimit,\\n            liquidity,\\n            amountSpecified, // \\u7b2c\\u4e00\\u6b21\\u5269\\u4f59\\u9700\\u8981\\u4ea4\\u6362\\u7684\\u6570\\u91cf=\\u6307\\u5b9a\\u8f93\\u5165\\u7684\\u4ee3\\u5e01\\u6570\\u91cf(\\u8981\\u652f\\u4ed8\\u7684 token0 \\u7684\\u6570\\u91cf)\\n            fee\\n        );\\n\\n        //\\u66f4\\u65b0\\u540e\\u7684\\u4ef7\\u683c\\n        sqrtPriceX96=state.sqrtPriceX96;\\n        tick=TickMath.getTickAtSqrtPrice(sqrtPriceX96);\\n\\n        //\\u8ba1\\u7b97\\u624b\\u7eed\\u8d39\\n        //\\u624b\\u7eed\\u8d39\\u4e58\\u4ee5 FixedPoint128.Q128\\uff082 \\u7684 96 \\u6b21\\u65b9\\uff09\\uff0c\\u7136\\u540e\\u9664\\u4ee5\\u6d41\\u52a8\\u6027\\u6570\\u91cf\\u5f97\\u5230\\u7684 \\uff08\\u6c60\\u5b50\\u5355\\u4e2a\\u6d41\\u52a8\\u6027\\u5355\\u4f4d\\u624b\\u7eed\\u8d39\\uff09\\n        state.feeGrowthGlobalX128 += FullMath.mulDiv(\\n            state.feeAmount,\\n            FixedPoint128.Q128,\\n            liquidity\\n        );\\n        if(zeroForOne){\\n            feeGrowthGlobal0X128=state.feeGrowthGlobalX128;\\n        }else{\\n            feeGrowthGlobal1X128=state.feeGrowthGlobalX128;\\n        }\\n\\n        //\\u8ba1\\u7b97\\u4ea4\\u6613\\u540e\\u7528\\u6237\\u624b\\u91cc\\u7684token0\\u548ctoken1\\u7684\\u6570\\u91cf\\n        //\\u6839\\u636e\\u7cbe\\u786e\\u8f93\\u5165\\u6216\\u7cbe\\u786e\\u8f93\\u51fa\\u6a21\\u5f0f\\uff0c\\u66f4\\u65b0\\u5269\\u4f59\\u4ea4\\u6362\\u91cf\\u548c\\u8ba1\\u7b97\\u91cf\\u3002\\n        if(exactInput){\\n            //\\u7cbe\\u786e\\u8f93\\u5165: amountSpecifiedRemaining \\u51cf\\u5c11\\uff08\\u8f93\\u5165\\u91cf + \\u8d39\\u7528\\uff09\\uff0camountCalculated \\u51cf\\u5c11\\u8f93\\u51fa\\u91cf\\uff08\\u56e0\\u4e3a\\u8f93\\u51fa\\u4e3a\\u8d1f\\uff09\\n            state.amountSpecifiedRemaining -= int256(state.amountIn + state.feeAmount);\\n            state.amountCalculated = state.amountCalculated.sub(int256(state.amountOut));\\n        }else{\\n            //\\u7cbe\\u786e\\u8f93\\u51fa: amountSpecifiedRemaining \\u589e\\u52a0\\u8f93\\u51fa\\u91cf\\uff08\\u56e0\\u4e3a\\u8f93\\u51fa\\u4e3a\\u8d1f\\uff09\\uff0camountCalculated \\u589e\\u52a0\\uff08\\u8f93\\u5165\\u91cf + \\u8d39\\u7528\\uff09\\u3002\\n            state.amountSpecifiedRemaining += int256(state.amountOut);\\n            state.amountCalculated = state.amountCalculated.add(int256(state.amountIn + state.feeAmount));\\n        }\\n        // \\u8ba1\\u7b97\\u6700\\u7ec8\\u4ee3\\u5e01\\u53d8\\u5316\\u91cf\\n        (amount0,amount1)= zeroForOne == exactInput\\n            ? (amountSpecified - state.amountSpecifiedRemaining, state.amountCalculated)\\n            : (state.amountCalculated, amountSpecified - state.amountSpecifiedRemaining);\\n\\n\\n        // \\u6267\\u884c\\u4ee3\\u5e01\\u8f6c\\u8d26\\u548c\\u56de\\u8c03\\n        if (zeroForOne){\\n            // \\u8bb0\\u5f55\\u5f53\\u524d\\u4f59\\u989d\\uff0c\\u7528\\u4e8e\\u540e\\u7eed\\u68c0\\u67e5\\n            uint256 balance0Before=_balance0();\\n            // \\u8c03\\u7528\\u56de\\u8c03\\u51fd\\u6570\\uff0c\\u8981\\u6c42\\u8c03\\u7528\\u8005\\u652f\\u4ed8token0 \\u7ed9 Pool \\u8f6c\\u5165 token0\\n            ISwapCallback(msg.sender).swapCallback(amount0, amount1, data);\\n            // \\u68c0\\u67e5\\u4f59\\u989d\\u53d8\\u5316\\uff0c\\u786e\\u4fdd\\u8c03\\u7528\\u8005\\u652f\\u4ed8\\u4e86\\u8db3\\u591f\\u7684token0\\n            require(balance0Before.add(uint256(amount0))<=_balance0(), \\\"IIA\\\");\\n            // \\u5982\\u679c\\u662ftoken0 \\u2192 token1\\uff0c\\u5c06token1\\u8f6c\\u8d26\\u7ed9\\u63a5\\u6536\\u8005\\n            if(amount1 <0)\\n                TransferHelper.safeTransfer(token1, recipient, uint256(-amount1));\\n            }\\n        else{\\n           // callback \\u4e2d\\u9700\\u8981\\u7ed9 Pool \\u8f6c\\u5165 token\\n            uint256 balance1Before = _balance1();\\n            ISwapCallback(msg.sender).swapCallback(amount0, amount1, data);\\n            require(balance1Before.add(uint256(amount1))<=_balance1(), \\\"IIA\\\");\\n             // \\u8f6c Token \\u7ed9\\u7528\\u6237\\n             if(amount0 <0){\\n                TransferHelper.safeTransfer(token0, recipient, uint256(-amount0));\\n             }\\n        }\\n        emit Swap(msg.sender, recipient, amount0, amount1, sqrtPriceX96, liquidity,tick);\\n    }\\n    /// @dev Get the pool's balance of token0\\n    function _balance0() private view returns (uint256){\\n        (bool success,bytes memory data)=token0.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)));\\n        require(success&&data.length>=32,\\\"Failed to get balance of token0\\\");\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    function _balance1() private view returns (uint256){\\n        (bool success,bytes memory data)=token1.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)));\\n        require(success&&data.length>=32,\\\"Failed to get balance of token1\\\");\\n        return abi.decode(data, (uint256));\\n    }\\n\\n\\n    /**\\n     * @notice \\u83b7\\u53d6\\u6307\\u5b9a\\u5730\\u5740\\u7684\\u6d41\\u52a8\\u6027\\u4f4d\\u7f6e\\u4fe1\\u606f\\n     * @param owner \\u4f4d\\u7f6e\\u6240\\u6709\\u8005\\u5730\\u5740\\n     */\\n     function getPosition(address owner) external view override returns (uint128 _liquidity,uint256 feeGrowthInside0LastX128,uint256 feeGrowthInside1LastX128,uint128 tokensOwed0,uint128 tokensOwed1)\\n        {\\n            return (\\n                positions[owner].liquidity,\\n                positions[owner].feeGrowthInside0LastX128,\\n                positions[owner].feeGrowthInside1LastX128,\\n                positions[owner].tokensOwed0,\\n                positions[owner].tokensOwed1\\n            );\\n        }\\n}\\n\",\"keccak256\":\"0x3753e9816a47c9c96e2a596d917a8519c197985021263e187eca7125743ccde3\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFactory {\\r\\n    struct Parameters {\\r\\n        address factory;\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint24 fee;\\r\\n    }\\r\\n\\r\\n    function parameters() external view returns (        \\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint24 fee\\r\\n    );\\r\\n\\r\\n\\r\\n\\r\\n    event PoolCreated(address token0, address token1,uint32 index, int24 tickLower, int24 tickUpper, uint24 fee,address pool);\\r\\n\\r\\n    function getPool(address tokenA, address tokenB, uint32 index) external view returns (address pool);\\r\\n\\r\\n    function createPool(address tokenA, address tokenB, int24 tickLower, int24 tickUpper, uint24 fee) external returns (address pool);\\r\\n}\",\"keccak256\":\"0x14c33686965f51ba1080b158b0c15729827ea97e1399a8358213c7fd28abcabb\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMintCallback {\\r\\n    function mintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface ISwapCallback {\\r\\n    function swapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IPool {\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function fee() external view returns (uint24);\\r\\n    function tickLower() external view returns (int24);\\r\\n    function tickUpper() external view returns (int24);\\r\\n    function sqrtPriceX96() external view returns (uint160);\\r\\n    function tick() external view returns (int24);\\r\\n    function liquidity() external view returns (uint128);\\r\\n\\r\\n    function initialize(uint160 sqrtPriceX96) external;\\r\\n   /// feeGrowthGlobal0X128 \\u8bb0\\u5f55\\u4ece\\u521b\\u5efa\\u5230\\u73b0\\u5728\\uff0c\\u6bcf\\u4e2a\\u6d41\\u52a8\\u6027\\u7d2f\\u8ba1\\u4ea7\\u751f\\u7684 token0 \\u7684\\u624b\\u7eed\\u8d39\\r\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\r\\n\\r\\n     /// feeGrowthGlobal1X128 \\u8bb0\\u5f55\\u4ece\\u521b\\u5efa\\u5230\\u73b0\\u5728\\uff0c\\u6bcf\\u4e2a\\u6d41\\u52a8\\u6027\\u7d2f\\u8ba1\\u4ea7\\u751f\\u7684 token1 \\u7684\\u624b\\u7eed\\u8d39\\r\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\r\\n   \\r\\n    function getPosition(address owner) \\r\\n        external \\r\\n        view \\r\\n        returns(\\r\\n            uint128 _liquidity,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            uint128 tokensOwed0,\\r\\n            uint128 tokensOwed1\\r\\n        );\\r\\n\\r\\n    event Mint(\\r\\n        address sender, \\r\\n        address indexed owner, \\r\\n        uint128 amount,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function mint(address recipent, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    event Collect(\\r\\n        address indexed owner, \\r\\n        address recipient,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function collect(\\r\\n        address recipient,\\r\\n        uint128 amount0Requested,\\r\\n        uint128 amount1Requested\\r\\n    ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n    event Burn(\\r\\n        address indexed owner, \\r\\n        uint128 amount,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function burn(uint128 amount) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    event Swap(\\r\\n        address indexed sender, \\r\\n        address indexed recipient,\\r\\n        int256 amount0, \\r\\n        int256 amount1, \\r\\n        uint160 sqrtPriceX96,\\r\\n        uint128 liquidity,\\r\\n        int24 tick);\\r\\n\\r\\n    function swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data)\\r\\n    external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n   \\r\\n}\",\"keccak256\":\"0x91f0fea042b16b0df8292ba7339f45e9809f009ce9d13a925f535319e8c24659\",\"license\":\"MIT\"},\"contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\n/// @author Solady (https://github.com/Vectorized/solady/blob/8200a70e8dc2a77ecb074fc2e99a2a0d36547522/src/utils/LibBit.sol)\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(\\n                        0x1f,\\n                        shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)\\n                    ),\\n                    0x0706060506020500060203020504000106050205030304010505030400000000\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Isolate the least significant bit.\\n            x := and(x, sub(0, x))\\n            // For the upper 3 bits of the result, use a De Bruijn-like lookup.\\n            // Credit to adhusson: https://blog.adhusson.com/cheap-find-first-set-evm/\\n            // forgefmt: disable-next-item\\n            r := shl(\\n                5,\\n                shr(\\n                    252,\\n                    shl(\\n                        shl(\\n                            2,\\n                            shr(\\n                                250,\\n                                mul(\\n                                    x,\\n                                    0xb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff\\n                                )\\n                            )\\n                        ),\\n                        0x8040405543005266443200005020610674053026020000107506200176117077\\n                    )\\n                )\\n            )\\n            // For the lower 5 bits of the result, use a De Bruijn lookup.\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(div(0xd76453e0, shr(r, x)), 0x1f),\\n                    0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x834f1c376abeeef84a21f9dc40897c61ecee062000df6eb52be00da7a92cbc6d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CustomRevert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library for reverting with custom errors efficiently\\n/// @notice Contains functions for reverting with custom errors with different argument types efficiently\\n/// @dev To use this library, declare `using CustomRevert for bytes4;` and replace `revert CustomError()` with\\n/// `CustomError.selector.revertWith()`\\n/// @dev The functions may tamper with the free memory pointer but it is fine since the call context is exited immediately\\nlibrary CustomRevert {\\n    /// @dev Reverts with the selector of a custom error in the scratch space\\n    function revertWith(bytes4 selector) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            revert(0, 0x04)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an address argument in the scratch space\\n    function revertWith(bytes4 selector, address addr) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(addr, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an int24 argument in the scratch space\\n    function revertWith(bytes4 selector, int24 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, signextend(2, value))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with a uint160 argument in the scratch space\\n    function revertWith(bytes4 selector, uint160 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two int24 arguments\\n    function revertWith(\\n        bytes4 selector,\\n        int24 value1,\\n        int24 value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), signextend(2, value1))\\n            mstore(add(fmp, 0x24), signextend(2, value2))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two uint160 arguments\\n    function revertWith(\\n        bytes4 selector,\\n        uint160 value1,\\n        uint160 value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(\\n                add(fmp, 0x04),\\n                and(value1, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(fmp, 0x24),\\n                and(value2, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two address arguments\\n    function revertWith(\\n        bytes4 selector,\\n        address value1,\\n        address value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(\\n                add(fmp, 0x04),\\n                and(value1, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(fmp, 0x24),\\n                and(value2, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @notice bubble up the revert message returned by a call and revert with the selector provided\\n    /// @dev this function should only be used with custom errors of the type `CustomError(address target, bytes revertReason)`\\n    function bubbleUpAndRevertWith(\\n        bytes4 selector,\\n        address addr\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let size := returndatasize()\\n            let fmp := mload(0x40)\\n\\n            // Encode selector, address, offset, size, data\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), addr)\\n            mstore(add(fmp, 0x24), 0x40)\\n            mstore(add(fmp, 0x44), size)\\n            returndatacopy(add(fmp, 0x64), 0, size)\\n\\n            // Ensure the size is a multiple of 32 bytes\\n            let encodedSize := add(0x64, mul(div(add(size, 31), 32), 32))\\n            revert(fmp, encodedSize)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf305488235157fc365b6d64b15b3526d803a9673c503b5cf40059cc0a006f340\",\"license\":\"MIT\"},\"contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0 = a * b; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly (\\\"memory-safe\\\") {\\n                let mm := mulmod(a, b, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                assembly (\\\"memory-safe\\\") {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly (\\\"memory-safe\\\") {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly (\\\"memory-safe\\\") {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly (\\\"memory-safe\\\") {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly (\\\"memory-safe\\\") {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the preconditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(++result > 0);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97f12e3b616807076c16b3ecc8cd932bb320d40e4f1cab92b99065302a0d7f5a\",\"license\":\"MIT\"},\"contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2 ** 255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./LowGasSafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return\\n                        uint160(\\n                            FullMath.mulDivRoundingUp(\\n                                numerator1,\\n                                sqrtPX96,\\n                                denominator\\n                            )\\n                        );\\n            }\\n\\n            return\\n                uint160(\\n                    UnsafeMath.divRoundingUp(\\n                        numerator1,\\n                        (numerator1 / sqrtPX96).add(amount)\\n                    )\\n                );\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require(\\n                (product = amount * sqrtPX96) / amount == sqrtPX96 &&\\n                    numerator1 > product\\n            );\\n            uint256 denominator = numerator1 - product;\\n            return\\n                FullMath\\n                    .mulDivRoundingUp(numerator1, sqrtPX96, denominator)\\n                    .toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? UnsafeMath.divRoundingUp(\\n                        amount << FixedPoint96.RESOLUTION,\\n                        liquidity\\n                    )\\n                    : FullMath.mulDivRoundingUp(\\n                        amount,\\n                        FixedPoint96.Q96,\\n                        liquidity\\n                    )\\n            );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountIn,\\n                    true\\n                )\\n                : getNextSqrtPriceFromAmount1RoundingDown(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountIn,\\n                    true\\n                );\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountOut,\\n                    false\\n                )\\n                : getNextSqrtPriceFromAmount0RoundingUp(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountOut,\\n                    false\\n                );\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(\\n                        numerator1,\\n                        numerator2,\\n                        sqrtRatioBX96\\n                    ),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) /\\n                    sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(\\n                    liquidity,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    FixedPoint96.Q96\\n                )\\n                : FullMath.mulDiv(\\n                    liquidity,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    FixedPoint96.Q96\\n                );\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(-liquidity),\\n                    false\\n                ).toInt256()\\n                : getAmount0Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(liquidity),\\n                    true\\n                ).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(-liquidity),\\n                    false\\n                ).toInt256()\\n                : getAmount1Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(liquidity),\\n                    true\\n                ).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x031d30445170307f23827ca6b1e8eb1bc7031fde50f4ef038dd976b98987c7b2\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./SqrtPriceMath.sol\\\";\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(\\n                uint256(amountRemaining),\\n                1e6 - feePips,\\n                1e6\\n            );\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioTargetX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    true\\n                )\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioTargetX96,\\n                    liquidity,\\n                    true\\n                );\\n            if (amountRemainingLessFee >= amountIn)\\n                sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioTargetX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    false\\n                )\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioTargetX96,\\n                    liquidity,\\n                    false\\n                );\\n            if (uint256(-amountRemaining) >= amountOut)\\n                sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioNextX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    true\\n                );\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioNextX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    false\\n                );\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioNextX96,\\n                    liquidity,\\n                    true\\n                );\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioNextX96,\\n                    liquidity,\\n                    false\\n                );\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(\\n                amountIn,\\n                feePips,\\n                1e6 - feePips\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ae21794cd9bd0f742a3f88ddcdbf22605466d6fbc1eb23cadf5a1feaa573b38\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Thrown when the tick passed to #getSqrtPriceAtTick is not between MIN_TICK and MAX_TICK\\n    error InvalidTick(int24 tick);\\n    /// @notice Thrown when the price passed to #getTickAtSqrtPrice does not correspond to a price between MIN_TICK and MAX_TICK\\n    error InvalidSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**-128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MAX_TICK = 887272;\\n\\n    /// @dev The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range [1, 32767]\\n    int24 internal constant MIN_TICK_SPACING = 1;\\n    /// @dev The maximum tick spacing value drawn from the range of type int16, i.e. max from the range [1, 32767]\\n    int24 internal constant MAX_TICK_SPACING = type(int16).max;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_PRICE =\\n        1461446703485210103287273052203988822378723970342;\\n    /// @dev A threshold used for optimized bounds check, equals `MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1`\\n    uint160 internal constant MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE =\\n        1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\\n\\n    /// @notice Given a tickSpacing, compute the maximum usable tick\\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MAX_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Given a tickSpacing, compute the minimum usable tick\\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MIN_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the price of the two assets (currency1/currency0)\\n    /// at the given tick\\n    function getSqrtPriceAtTick(\\n        int24 tick\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick;\\n            assembly (\\\"memory-safe\\\") {\\n                tick := signextend(2, tick)\\n                // mask = 0 if tick >= 0 else -1 (all 1s)\\n                let mask := sar(255, tick)\\n                // if tick >= 0, |tick| = tick = 0 ^ tick\\n                // if tick < 0, |tick| = ~~|tick| = ~(-|tick| - 1) = ~(tick - 1) = (-1) ^ (tick - 1)\\n                // either way, |tick| = mask ^ (tick + mask)\\n                absTick := xor(mask, add(mask, tick))\\n            }\\n\\n            if (absTick > uint256(int256(MAX_TICK)))\\n                InvalidTick.selector.revertWith(tick);\\n\\n            // The tick is decomposed into bits, and for each bit with index i that is set, the product of 1/sqrt(1.0001^(2^i))\\n            // is calculated (using Q128.128). The constants used for this calculation are rounded to the nearest integer\\n\\n            // Equivalent to:\\n            //     price = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            //     or price = int(2**128 / sqrt(1.0001)) if (absTick & 0x1) else 1 << 128\\n            uint256 price;\\n            assembly (\\\"memory-safe\\\") {\\n                price := xor(\\n                    shl(128, 1),\\n                    mul(\\n                        xor(shl(128, 1), 0xfffcb933bd6fad37aa2d162d1a594001),\\n                        and(absTick, 0x1)\\n                    )\\n                )\\n            }\\n            if (absTick & 0x2 != 0)\\n                price = (price * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0)\\n                price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0)\\n                price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0)\\n                price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0)\\n                price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0)\\n                price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0)\\n                price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0)\\n                price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0)\\n                price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0)\\n                price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0)\\n                price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0)\\n                price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0)\\n                price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0)\\n                price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0)\\n                price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0)\\n                price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0)\\n                price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0)\\n                price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0)\\n                price = (price * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                // if (tick > 0) price = type(uint256).max / price;\\n                if sgt(tick, 0) {\\n                    price := div(not(0), price)\\n                }\\n\\n                // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n                // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n                // we round up in the division so getTickAtSqrtPrice of the output price is always consistent\\n                // `sub(shl(32, 1), 1)` is `type(uint32).max`\\n                // `price + type(uint32).max` will not overflow because `price` fits in 192 bits\\n                sqrtPriceX96 := shr(32, add(price, sub(shl(32, 1), 1)))\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getSqrtPriceAtTick(tick) <= sqrtPriceX96\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_PRICE, as MIN_SQRT_PRICE is the lowest value getSqrtPriceAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt price for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the getSqrtPriceAtTick(tick) is less than or equal to the input sqrtPriceX96\\n    function getTickAtSqrtPrice(\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (int24 tick) {\\n        unchecked {\\n            // Equivalent: if (sqrtPriceX96 < MIN_SQRT_PRICE || sqrtPriceX96 >= MAX_SQRT_PRICE) revert InvalidSqrtPrice();\\n            // second inequality must be >= because the price can never reach the price at the max tick\\n            // if sqrtPriceX96 < MIN_SQRT_PRICE, the `sub` underflows and `gt` is true\\n            // if sqrtPriceX96 >= MAX_SQRT_PRICE, sqrtPriceX96 - MIN_SQRT_PRICE > MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1\\n            if (\\n                (sqrtPriceX96 - MIN_SQRT_PRICE) >\\n                MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE\\n            ) {\\n                InvalidSqrtPrice.selector.revertWith(sqrtPriceX96);\\n            }\\n\\n            uint256 price = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = price;\\n            uint256 msb = BitMath.mostSignificantBit(r);\\n\\n            if (msb >= 128) r = price >> (msb - 127);\\n            else r = price << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // Q22.128 number\\n\\n            // Magic number represents the ceiling of the maximum value of the error when approximating log_sqrt10001(x)\\n            int24 tickLow = int24(\\n                (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n            );\\n\\n            // Magic number represents the minimum value of the error when approximating log_sqrt10001(x), when\\n            // sqrtPrice is from the range (2^-64, 2^64). This is safe as MIN_SQRT_PRICE is more than 2^-64. If MIN_SQRT_PRICE\\n            // is changed, this may need to be changed too\\n            int24 tickHi = int24(\\n                (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n            );\\n\\n            tick = tickLow == tickHi\\n                ? tickLow\\n                : getSqrtPriceAtTick(tickHi) <= sqrtPriceX96\\n                ? tickHi\\n                : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88c11c5f3e6266a6d9433e76279615a8c1fc199d9e3d13b9c0b559f9b0b82097\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title TransferHelper\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TF\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xad06ee7e0514d77555783582bdec3a3d2d0b9c899b2e35b882d795fca38b878c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061372a806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630c2d4e4e14610051578063169c4cef1461008157806371c54fc91461009457806389035730146100a7575b600080fd5b61006461005f36600461088a565b610133565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f3660046108f7565b61068a565b6100646100a2366004610933565b6106cf565b600054600154600280546100eb936001600160a01b039081169381169290821691600160a01b8104820b91600160b81b8204900b90600160d01b900462ffffff1686565b604080516001600160a01b03978816815295871660208701529390951692840192909252600290810b60608401520b608082015262ffffff90911660a082015260c001610078565b6000846001600160a01b0316866001600160a01b03160361016f5760405162461bcd60e51b815260040161016690610983565b60405180910390fd5b60008061017c888861080d565b6001600160a01b038083166000908152600360209081526040808320938516835292815282822080548451818402810184019095528085529597509395509093919291908301828280156101f957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101db575b5050505050905060005b81518110156103ba576000828281518110610220576102206109c7565b602002602001015190508860020b816001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa15801561026c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029091906109dd565b60020b14801561030657508760020b816001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030191906109dd565b60020b145b801561037c57508662ffffff16816001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103759190610a01565b62ffffff16145b156103a757828281518110610393576103936109c7565b602002602001015195505050505050610681565b50806103b281610a1e565b915050610203565b506040518060c00160405280306001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b031681526020018860020b81526020018760020b81526020018662ffffff168152506000808201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548162ffffff021916908360020b62ffffff16021790555060808201518160020160176101000a81548162ffffff021916908360020b62ffffff16021790555060a082015181600201601a6101000a81548162ffffff021916908362ffffff1602179055509050506000838389898960405160200161055e9594939291906001600160a01b039586168152939094166020840152600291820b6040840152900b606082015262ffffff91909116608082015260a00190565b604051602081830303815290604052805190602001209050806040516105839061083e565b8190604051809103906000f59050801580156105a3573d6000803e3d6000fd5b506001600160a01b0385811660008181526003602090815260408083208986168085529083528184208054600180820183559186528486200180549789166001600160a01b03199889168117909155855488169095558054909616909555600280546001600160e81b0319168155885182519586529285019590955263ffffffff909116838201528c840b6060840152928b900b608083015262ffffff8a1660a083015260c082015290519196507fe026b1b60fa8f2d35cd0844432a7b513a5a112d8cfe2b30bc62c1c4b81373c75919081900360e00190a1505050505b95945050505050565b600360205282600052604060002060205281600052604060002081815481106106b257600080fd5b6000918252602090912001546001600160a01b0316925083915050565b6000826001600160a01b0316846001600160a01b0316036107025760405162461bcd60e51b815260040161016690610983565b6001600160a01b0384161580159061072257506001600160a01b03831615155b61075d5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606401610166565b60008061076a868661080d565b6001600160a01b03808316600090815260036020908152604080832093851683529290522080549294509092509063ffffffff86169081106107ae576107ae6109c7565b6000918252602090912001546001600160a01b03169250826108045760405162461bcd60e51b815260206004820152600f60248201526e504f4f4c5f4e4f545f45584953545360881b6044820152606401610166565b50509392505050565b600080826001600160a01b0316846001600160a01b031610610830578284610833565b83835b915091509250929050565b612caf80610a4683390190565b80356001600160a01b038116811461086257600080fd5b919050565b8060020b811461087657600080fd5b50565b62ffffff8116811461087657600080fd5b600080600080600060a086880312156108a257600080fd5b6108ab8661084b565b94506108b96020870161084b565b935060408601356108c981610867565b925060608601356108d981610867565b915060808601356108e981610879565b809150509295509295909350565b60008060006060848603121561090c57600080fd5b6109158461084b565b92506109236020850161084b565b9150604084013590509250925092565b60008060006060848603121561094857600080fd5b6109518461084b565b925061095f6020850161084b565b9150604084013563ffffffff8116811461097857600080fd5b809150509250925092565b60208082526024908201527f546f6b656e4120616e6420546f6b656e422063616e6e6f74206265207468652060408201526373616d6560e01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156109ef57600080fd5b81516109fa81610867565b9392505050565b600060208284031215610a1357600080fd5b81516109fa81610879565b600060018201610a3e57634e487b7160e01b600052601160045260246000fd5b506001019056fe6101406040523480156200001257600080fd5b50336001600160a01b031663890357306040518163ffffffff1660e01b815260040160c060405180830381865afa15801562000052573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000789190620000dc565b62ffffff1660e052600290810b610120520b610100526001600160a01b0390811660c05290811660a0521660805262000168565b80516001600160a01b0381168114620000c457600080fd5b919050565b8051600281900b8114620000c457600080fd5b60008060008060008060c08789031215620000f657600080fd5b6200010187620000ac565b95506200011160208801620000ac565b94506200012160408801620000ac565b93506200013160608801620000c9565b92506200014160808801620000c9565b915060a087015162ffffff811681146200015a57600080fd5b809150509295509295509295565b60805160a05160c05160e0516101005161012051612a9c6200021360003960008181610280015281816105cf015281816111270152611dc301526000818161032c015281816105a2015281816110ef0152611e0901526000818161040d01526106670152600081816103e6015281816108bb01528181610bb60152611cd8015260008181610120015281816109ab01528181610b2f0152611a8b015260006103bf0152612a9c6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806360d49d53116100a2578063c45a015511610071578063c45a0155146103ba578063d21220a7146103e1578063ddca3f4314610408578063f305839914610443578063f637731d1461044c57600080fd5b806360d49d531461034e5780638db791d21461038157806390bc16931461039457806392f026ad146103a757600080fd5b80633eaf5d9f116100e95780633eaf5d9f1461023d578063461413191461026457806355b812a81461027b57806355f57510146102a257806359c4f9051461032757600080fd5b80630dfe16811461011b578063128acb081461015f57806316c19739146101875780631a68650214610212575b600080fd5b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017261016d366004612691565b610461565b60408051928352602083019190915201610156565b6101dc610195366004612716565b6001600160a01b031660009081526004602052604090208054600282015460038301546001909301546001600160801b0380841695929493600160801b9004811692911690565b604080516001600160801b039687168152602081019590955284019290925283166060830152909116608082015260a001610156565b600154610225906001600160801b031681565b6040516001600160801b039091168152602001610156565b60005461025190600160a01b900460020b81565b60405160029190910b8152602001610156565b61026d60035481565b604051908152602001610156565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6102ee6102b0366004612716565b60046020526000908152604090208054600182015460028301546003909301546001600160801b0380841694600160801b9094048116939216919085565b604080516001600160801b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610156565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b61036161035c36600461274a565b610a5a565b604080516001600160801b03938416815292909116602083015201610156565b600054610142906001600160a01b031681565b6101726103a236600461278f565b610c43565b6101726103b53660046127aa565b610e60565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b61042f7f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff9091168152602001610156565b61026d60025481565b61045f61045a366004612716565b611074565b005b6000808560000361049e5760405162461bcd60e51b8152602060048201526002602482015261415360f01b60448201526064015b60405180910390fd5b866104e2576000546001600160a01b039081169086161180156104dd575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038616105b61050d565b6000546001600160a01b0390811690861610801561050d57506401000276a36001600160a01b038616115b61053f5760405162461bcd60e51b815260206004820152600360248201526214d41360ea1b6044820152606401610495565b6040805160e08101825287815260006020820181905280546001600160a01b0316928201929092528188139190606081018a61057d57600354610581565b6002545b815260200160008152602001600081526020016000815250905060006105c67f00000000000000000000000000000000000000000000000000000000000000006111f6565b905060006105f37f00000000000000000000000000000000000000000000000000000000000000006111f6565b905060008b6106025781610604565b825b60005490915061068b906001600160a01b03168d610636578b6001600160a01b0316836001600160a01b03161161064c565b8b6001600160a01b0316836001600160a01b0316105b6106565782610658565b8b5b6001546001600160801b03168e7f00000000000000000000000000000000000000000000000000000000000000006114b1565b60c088015260a087015260808601526001600160a01b031660408501819052600080546001600160a01b031916821790556106c5906116cc565b6000805462ffffff92909216600160a01b0262ffffff60a01b1990921691909117905560c08401516001546107099190600160801b906001600160801b031661195e565b8460600181815161071a9190612823565b9052508b15610730576060840151600255610739565b60608401516003555b8415610782578360c0015184608001516107539190612823565b84518590610762908390612836565b90525060a0840151602085015161077891611a01565b60208501526107c1565b60a08401518451859061079690839061285d565b90525060c084015160808501516107bb916107b091612823565b602086015190611a27565b60208501525b8415158c1515146107e257602084015184516107dd908d612836565b6107f4565b83516107ee908c612836565b84602001515b90975095508b156108ef576000610809611a47565b604051637d241f3960e11b8152909150339063fa483e7290610835908b908b908f908f906004016128ae565b600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b5050505061086f611a47565b610879828a611b79565b11156108ad5760405162461bcd60e51b815260206004820152600360248201526249494160e81b6044820152606401610495565b60008712156108e9576108e97f00000000000000000000000000000000000000000000000000000000000000008f6108e48a6128d8565b611b94565b506109d6565b60006108f9611c94565b604051637d241f3960e11b8152909150339063fa483e7290610925908b908b908f908f906004016128ae565b600060405180830381600087803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b5050505061095f611c94565b6109698289611b79565b111561099d5760405162461bcd60e51b815260206004820152600360248201526249494160e81b6044820152606401610495565b60008812156109d4576109d47f00000000000000000000000000000000000000000000000000000000000000008f6108e48b6128d8565b505b600054600154604080518a8152602081018a90526001600160a01b03808516828401526001600160801b039093166060820152600160a01b90930460020b608084015251908f169133917fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca679181900360a00190a35050505050965096945050505050565b33600090815260046020526040812080548291906001600160801b03600160801b909104811690861611610a8e5784610aa1565b8054600160801b90046001600160801b03165b60018201549093506001600160801b0390811690851611610ac25783610ad1565b60018101546001600160801b03165b91506001600160801b03831615610b5e57805483908290601090610b06908490600160801b90046001600160801b03166128f4565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610b5e7f000000000000000000000000000000000000000000000000000000000000000087856001600160801b0316611b94565b6001600160801b03821615610be557600181018054839190600090610b8d9084906001600160801b03166128f4565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610be57f000000000000000000000000000000000000000000000000000000000000000087846001600160801b0316611b94565b604080516001600160a01b03881681526001600160801b038581166020830152841681830152905133917fd180a977ce9f029a7ec05d2c280a2eea13167dd64eeae88a1758af2f586d7cc4919081900360600190a250935093915050565b6000806000836001600160801b031611610caa5760405162461bcd60e51b815260206004820152602260248201527f4275726e20416d6f756e74206d7573742062652067726561746572207468616e604482015261020360f41b6064820152608401610495565b336000908152600460205260409020546001600160801b039081169084161115610d165760405162461bcd60e51b815260206004820152601d60248201527f4275726e20616d6f756e742065786365656473206c69717569646974790000006044820152606401610495565b600080610d4a6040518060400160405280336001600160a01b0316815260200187610d4090612914565b600f0b9052611dab565b9150915081610d58906128d8565b9350610d63816128d8565b92506000841180610d745750600083115b15610e0d5733600090815260046020526040902054610da4908590600160801b90046001600160801b0316612943565b33600090815260046020526040902060010154610dcb9085906001600160801b0316612943565b3360009081526004602052604090206001810180546001600160801b0319166001600160801b0393841617905580548216600160801b93909216929092021790555b604080516001600160801b03871681526020810186905290810184905233907fd4885a46e0c2f00ffdf2adb97a3909fd129dc1acccead462f7e29e6f18e54ec19060600160405180910390a25050915091565b6000806000856001600160801b031611610ebc5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610495565b600080610ee860405180604001604052808a6001600160a01b0316815260200189600f0b815250611dab565b90945092508391508290506000808315610f0757610f04611a47565b91505b8415610f1857610f15611c94565b90505b604051639f382e9b60e01b81523390639f382e9b90610f4190899089908d908d906004016128ae565b600060405180830381600087803b158015610f5b57600080fd5b505af1158015610f6f573d6000803e3d6000fd5b505050506000861115610fc157610f84611a47565b610f8e8388611b79565b1115610fc15760405162461bcd60e51b815260206004820152600260248201526104d360f41b6044820152606401610495565b841561100c57610fcf611c94565b610fd98287611b79565b111561100c5760405162461bcd60e51b81526020600482015260026024820152614d3160f01b6044820152606401610495565b604080513381526001600160801b038b166020820152908101879052606081018690526001600160a01b038b16907f011d4be6213866bff035f68967364cf69c5c01ff5bc23ff0a275f08a04381e6a9060800160405180910390a25050505094509492505050565b6000546001600160a01b0316156110c35760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610495565b6110cc816116cc565b6000805462ffffff60a01b1916600160a01b62ffffff93909316830217908190557f0000000000000000000000000000000000000000000000000000000000000000600290810b92909104900b1280159061115857506000547f0000000000000000000000000000000000000000000000000000000000000000600290810b600160a01b909204900b13155b6111d45760405162461bcd60e51b815260206004820152604160248201527f7371727450726963655839362073686f756c642062652077697468696e20746860448201527f652072616e6765206f66205b7469636b4c6f7765722c207469636b55707065726064820152602960f81b608482015260a401610495565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60020b600060ff82901d80830118620d89e8811115611220576112206345c3193d60e11b84611fe9565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b18600282161561125c576ffff97272373d413259a46990580e213a0260801c5b600482161561127b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561129a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156112b9576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156112d8576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156112f7576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611316576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611336576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611356576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611376576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611396576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156113b6576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156113d6576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156113f6576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611416576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611437576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611457576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611476576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611493576b048a170391f7dc42444e8fa20260801c5b60008413156114a157600019045b63ffffffff0160201c9392505050565b60008080806001600160a01b03808916908a16101581871280159061153d5760006114f1896114e38a620f4240612963565b62ffffff16620f424061195e565b90508261150a576115058c8c8c6001611ffa565b611517565b6115178b8d8c6001612083565b9550858110611528578a9650611537565b6115348c8b838661214a565b96505b50611591565b816115545761154f8b8b8b6000612083565b611561565b6115618a8c8b6000611ffa565b93508361156d896128d8565b1061157a57899550611591565b61158e8b8a6115888b6128d8565b85612196565b95505b6001600160a01b038a81169087161482156115f4578080156115b05750815b6115c6576115c1878d8c6001612083565b6115c8565b855b95508080156115d5575081155b6115eb576115e6878d8c6000611ffa565b6115ed565b845b945061163e565b8080156115fe5750815b6116145761160f8c888c6001611ffa565b611616565b855b9550808015611623575081155b611639576116348c888c6000612083565b61163b565b845b94505b811580156116535750611650896128d8565b85115b1561166457611661896128d8565b94505b81801561168357508a6001600160a01b0316876001600160a01b031614155b1561169957611692868a61297f565b93506116bd565b6116ba8662ffffff8a166116b08b620f4240612963565b62ffffff166121e2565b93505b50505095509550955095915050565b600073fffd8963efd1fc6a506488495d951d51639616826401000276a21983016001600160a01b0316111561170c5761170c6318521d4960e21b83612214565b640100000000600160c01b03602083901b1680600061172a8261222b565b60ff1690506080811061174557607f810383901c915061174f565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461194f57886001600160a01b0316611934826111f6565b6001600160a01b031611156119495781611951565b80611951565b815b9998505050505050505050565b6000838302816000198587098281108382030391505080841161198057600080fd5b80600003611993575082900490506119fa565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008082121583611a128482612836565b925082131514611a2157600080fd5b92915050565b60008082121583611a38848261285d565b925082121514611a2157600080fd5b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b1790529051600091829182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691611abe9190612992565b600060405180830381855afa9150503d8060008114611af9576040519150601f19603f3d011682016040523d82523d6000602084013e611afe565b606091505b5091509150818015611b1257506020815110155b611b5e5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f206765742062616c616e6365206f6620746f6b656e30006044820152606401610495565b80806020019051810190611b7291906129c1565b9250505090565b600082611b868382612823565b9150811015611a2157600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611bf09190612992565b6000604051808303816000865af19150503d8060008114611c2d576040519150601f19603f3d011682016040523d82523d6000602084013e611c32565b606091505b5091509150818015611c5c575080511580611c5c575080806020019051810190611c5c91906129da565b611c8d5760405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606401610495565b5050505050565b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b1790529051600091829182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691611d0b9190612992565b600060405180830381855afa9150503d8060008114611d46576040519150601f19603f3d011682016040523d82523d6000602084013e611d4b565b606091505b5091509150818015611d5f57506020815110155b611b5e5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f206765742062616c616e6365206f6620746f6b656e31006044820152606401610495565b600080548190611df1906001600160a01b0316611de77f00000000000000000000000000000000000000000000000000000000000000006111f6565b85602001516122b8565b600054909250611e37906001600160a01b0316611e2d7f00000000000000000000000000000000000000000000000000000000000000006111f6565b85602001516122ff565b83516001600160a01b0316600090815260046020526040812060028082015490549394509092611e7f91611e6a9161297f565b83546001600160801b0316600160801b61195e565b90506000611ead8360030154600354611e98919061297f565b84546001600160801b0316600160801b61195e565b6002805490850155600380549085015590506001600160801b038216151580611edf57506000816001600160801b0316115b15611f7757825482908490601090611f08908490600160801b90046001600160801b0316612943565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550808360010160008282829054906101000a90046001600160801b0316611f529190612943565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6001546020870151611f92916001600160801b031690612333565b600180546001600160801b0319166001600160801b0392831617905583546020880151611fc3929190911690612333565b83546001600160801b0319166001600160801b0391909116179092555091939092509050565b816000528060020b60045260246000fd5b6000836001600160a01b0316856001600160a01b0316111561201a579293925b8161204e576120496001600160801b03841661203687876129f7565b6001600160a01b0316600160601b61195e565b612078565b6120786001600160801b03841661206587876129f7565b6001600160a01b0316600160601b6121e2565b90505b949350505050565b6000836001600160a01b0316856001600160a01b031611156120a3579293925b600160601b600160e01b03606084901b1660006120c087876129f7565b6001600160a01b031690506000876001600160a01b0316116120e157600080fd5b8361211357866001600160a01b03166121048383896001600160a01b031661195e565b61210e9190612a2d565b61213f565b61213f61212a8383896001600160a01b03166121e2565b886001600160a01b0316808204910615150190565b979650505050505050565b600080856001600160a01b03161161216157600080fd5b6000846001600160801b03161161217757600080fd5b816121895761204985858560016123f3565b61207885858560016124da565b600080856001600160a01b0316116121ad57600080fd5b6000846001600160801b0316116121c357600080fd5b816121d55761204985858560006124da565b61207885858560006123f3565b60006121ef84848461195e565b905081806121ff576121ff612a17565b838509156119fa57600101806119fa57600080fd5b816000526001600160a01b03811660045260246000fd5b600080821161223957600080fd5b507f0706060506020500060203020504000106050205030304010505030400000000601f6f8421084210842108cc6318c6db6d54be6001600160801b03841160071b84811c67ffffffffffffffff1060061b1784811c63ffffffff1060051b1784811c61ffff1060041b1784811c60ff1060031b1793841c1c161a1790565b60008082600f0b126122de576122d96122d48585856001612083565b6125f1565b61207b565b6122f66122d485856122ef86612914565b6000612083565b61207b906128d8565b60008082600f0b1261231b576122d96122d48585856001611ffa565b6122f66122d4858561232c86612914565b6000611ffa565b60008082600f0b12156123a0576001600160801b03831661235383612914565b61235d90856128f4565b9150816001600160801b03161061239b5760405162461bcd60e51b81526020600482015260026024820152614c5360f01b6044820152606401610495565b611a21565b6001600160801b0383166123b48385612943565b9150816001600160801b03161015611a215760405162461bcd60e51b81526020600482015260026024820152614c4160f01b6044820152606401610495565b600081156124655760006001600160a01b038411156124295761242484600160601b876001600160801b031661195e565b612440565b6124406001600160801b038616606086901b612a2d565b905061245d6124586001600160a01b03881683611b79565b612607565b91505061207b565b60006001600160a01b038411156124935761248e84600160601b876001600160801b03166121e2565b6124b0565b6124b0606085901b6001600160801b038716808204910615150190565b905080866001600160a01b0316116124c757600080fd5b61245d816001600160a01b03881661297f565b6000826000036124eb57508361207b565b600160601b600160e01b03606085901b1682156125945760006001600160a01b038716856125198282612a4f565b92506125259083612a2d565b0361255f5760006125368284612823565b905082811061255d5761255383896001600160a01b0316836121e2565b935050505061207b565b505b61258b826125808761257a6001600160a01b038c1684612a2d565b90611b79565b808204910615150190565b9250505061207b565b60006001600160a01b038716856125ab8282612a4f565b92506125b79083612a2d565b1480156125c357508082115b6125cc57600080fd5b60006125d8828461297f565b9050612553612458848a6001600160a01b0316846121e2565b6000600160ff1b821061260357600080fd5b5090565b806001600160a01b038116811461261d57600080fd5b919050565b6001600160a01b038116811461263757600080fd5b50565b801515811461263757600080fd5b60008083601f84011261265a57600080fd5b50813567ffffffffffffffff81111561267257600080fd5b60208301915083602082850101111561268a57600080fd5b9250929050565b60008060008060008060a087890312156126aa57600080fd5b86356126b581612622565b955060208701356126c58161263a565b94506040870135935060608701356126dc81612622565b9250608087013567ffffffffffffffff8111156126f857600080fd5b61270489828a01612648565b979a9699509497509295939492505050565b60006020828403121561272857600080fd5b81356119fa81612622565b80356001600160801b038116811461261d57600080fd5b60008060006060848603121561275f57600080fd5b833561276a81612622565b925061277860208501612733565b915061278660408501612733565b90509250925092565b6000602082840312156127a157600080fd5b6119fa82612733565b600080600080606085870312156127c057600080fd5b84356127cb81612622565b93506127d960208601612733565b9250604085013567ffffffffffffffff8111156127f557600080fd5b61280187828801612648565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611a2157611a2161280d565b81810360008312801583831316838312821617156128565761285661280d565b5092915050565b808201828112600083128015821682158216171561287d5761287d61280d565b505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8481528360208201526060604082015260006128ce606083018486612885565b9695505050505050565b6000600160ff1b82016128ed576128ed61280d565b5060000390565b6001600160801b038281168282160390808211156128565761285661280d565b600081600f0b6f7fffffffffffffffffffffffffffffff19810361293a5761293a61280d565b60000392915050565b6001600160801b038181168382160190808211156128565761285661280d565b62ffffff8281168282160390808211156128565761285661280d565b81810381811115611a2157611a2161280d565b6000825160005b818110156129b35760208186018101518583015201612999565b506000920191825250919050565b6000602082840312156129d357600080fd5b5051919050565b6000602082840312156129ec57600080fd5b81516119fa8161263a565b6001600160a01b038281168282160390808211156128565761285661280d565b634e487b7160e01b600052601260045260246000fd5b600082612a4a57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417611a2157611a2161280d56fea26469706673582212209b9ab2d795749868e65a399a4acf0b38e486e03788509ee65bfe05b58efcaf9964736f6c63430008140033a26469706673582212203fd741378747b57ecee9b310953233ceebe2c46095370008d74d85c5e98818e764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630c2d4e4e14610051578063169c4cef1461008157806371c54fc91461009457806389035730146100a7575b600080fd5b61006461005f36600461088a565b610133565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f3660046108f7565b61068a565b6100646100a2366004610933565b6106cf565b600054600154600280546100eb936001600160a01b039081169381169290821691600160a01b8104820b91600160b81b8204900b90600160d01b900462ffffff1686565b604080516001600160a01b03978816815295871660208701529390951692840192909252600290810b60608401520b608082015262ffffff90911660a082015260c001610078565b6000846001600160a01b0316866001600160a01b03160361016f5760405162461bcd60e51b815260040161016690610983565b60405180910390fd5b60008061017c888861080d565b6001600160a01b038083166000908152600360209081526040808320938516835292815282822080548451818402810184019095528085529597509395509093919291908301828280156101f957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101db575b5050505050905060005b81518110156103ba576000828281518110610220576102206109c7565b602002602001015190508860020b816001600160a01b03166359c4f9056040518163ffffffff1660e01b8152600401602060405180830381865afa15801561026c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029091906109dd565b60020b14801561030657508760020b816001600160a01b03166355b812a86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030191906109dd565b60020b145b801561037c57508662ffffff16816001600160a01b031663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103759190610a01565b62ffffff16145b156103a757828281518110610393576103936109c7565b602002602001015195505050505050610681565b50806103b281610a1e565b915050610203565b506040518060c00160405280306001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b031681526020018860020b81526020018760020b81526020018662ffffff168152506000808201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160020160146101000a81548162ffffff021916908360020b62ffffff16021790555060808201518160020160176101000a81548162ffffff021916908360020b62ffffff16021790555060a082015181600201601a6101000a81548162ffffff021916908362ffffff1602179055509050506000838389898960405160200161055e9594939291906001600160a01b039586168152939094166020840152600291820b6040840152900b606082015262ffffff91909116608082015260a00190565b604051602081830303815290604052805190602001209050806040516105839061083e565b8190604051809103906000f59050801580156105a3573d6000803e3d6000fd5b506001600160a01b0385811660008181526003602090815260408083208986168085529083528184208054600180820183559186528486200180549789166001600160a01b03199889168117909155855488169095558054909616909555600280546001600160e81b0319168155885182519586529285019590955263ffffffff909116838201528c840b6060840152928b900b608083015262ffffff8a1660a083015260c082015290519196507fe026b1b60fa8f2d35cd0844432a7b513a5a112d8cfe2b30bc62c1c4b81373c75919081900360e00190a1505050505b95945050505050565b600360205282600052604060002060205281600052604060002081815481106106b257600080fd5b6000918252602090912001546001600160a01b0316925083915050565b6000826001600160a01b0316846001600160a01b0316036107025760405162461bcd60e51b815260040161016690610983565b6001600160a01b0384161580159061072257506001600160a01b03831615155b61075d5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606401610166565b60008061076a868661080d565b6001600160a01b03808316600090815260036020908152604080832093851683529290522080549294509092509063ffffffff86169081106107ae576107ae6109c7565b6000918252602090912001546001600160a01b03169250826108045760405162461bcd60e51b815260206004820152600f60248201526e504f4f4c5f4e4f545f45584953545360881b6044820152606401610166565b50509392505050565b600080826001600160a01b0316846001600160a01b031610610830578284610833565b83835b915091509250929050565b612caf80610a4683390190565b80356001600160a01b038116811461086257600080fd5b919050565b8060020b811461087657600080fd5b50565b62ffffff8116811461087657600080fd5b600080600080600060a086880312156108a257600080fd5b6108ab8661084b565b94506108b96020870161084b565b935060408601356108c981610867565b925060608601356108d981610867565b915060808601356108e981610879565b809150509295509295909350565b60008060006060848603121561090c57600080fd5b6109158461084b565b92506109236020850161084b565b9150604084013590509250925092565b60008060006060848603121561094857600080fd5b6109518461084b565b925061095f6020850161084b565b9150604084013563ffffffff8116811461097857600080fd5b809150509250925092565b60208082526024908201527f546f6b656e4120616e6420546f6b656e422063616e6e6f74206265207468652060408201526373616d6560e01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156109ef57600080fd5b81516109fa81610867565b9392505050565b600060208284031215610a1357600080fd5b81516109fa81610879565b600060018201610a3e57634e487b7160e01b600052601160045260246000fd5b506001019056fe6101406040523480156200001257600080fd5b50336001600160a01b031663890357306040518163ffffffff1660e01b815260040160c060405180830381865afa15801562000052573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000789190620000dc565b62ffffff1660e052600290810b610120520b610100526001600160a01b0390811660c05290811660a0521660805262000168565b80516001600160a01b0381168114620000c457600080fd5b919050565b8051600281900b8114620000c457600080fd5b60008060008060008060c08789031215620000f657600080fd5b6200010187620000ac565b95506200011160208801620000ac565b94506200012160408801620000ac565b93506200013160608801620000c9565b92506200014160808801620000c9565b915060a087015162ffffff811681146200015a57600080fd5b809150509295509295509295565b60805160a05160c05160e0516101005161012051612a9c6200021360003960008181610280015281816105cf015281816111270152611dc301526000818161032c015281816105a2015281816110ef0152611e0901526000818161040d01526106670152600081816103e6015281816108bb01528181610bb60152611cd8015260008181610120015281816109ab01528181610b2f0152611a8b015260006103bf0152612a9c6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806360d49d53116100a2578063c45a015511610071578063c45a0155146103ba578063d21220a7146103e1578063ddca3f4314610408578063f305839914610443578063f637731d1461044c57600080fd5b806360d49d531461034e5780638db791d21461038157806390bc16931461039457806392f026ad146103a757600080fd5b80633eaf5d9f116100e95780633eaf5d9f1461023d578063461413191461026457806355b812a81461027b57806355f57510146102a257806359c4f9051461032757600080fd5b80630dfe16811461011b578063128acb081461015f57806316c19739146101875780631a68650214610212575b600080fd5b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017261016d366004612691565b610461565b60408051928352602083019190915201610156565b6101dc610195366004612716565b6001600160a01b031660009081526004602052604090208054600282015460038301546001909301546001600160801b0380841695929493600160801b9004811692911690565b604080516001600160801b039687168152602081019590955284019290925283166060830152909116608082015260a001610156565b600154610225906001600160801b031681565b6040516001600160801b039091168152602001610156565b60005461025190600160a01b900460020b81565b60405160029190910b8152602001610156565b61026d60035481565b604051908152602001610156565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6102ee6102b0366004612716565b60046020526000908152604090208054600182015460028301546003909301546001600160801b0380841694600160801b9094048116939216919085565b604080516001600160801b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610156565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b61036161035c36600461274a565b610a5a565b604080516001600160801b03938416815292909116602083015201610156565b600054610142906001600160a01b031681565b6101726103a236600461278f565b610c43565b6101726103b53660046127aa565b610e60565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b61042f7f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff9091168152602001610156565b61026d60025481565b61045f61045a366004612716565b611074565b005b6000808560000361049e5760405162461bcd60e51b8152602060048201526002602482015261415360f01b60448201526064015b60405180910390fd5b866104e2576000546001600160a01b039081169086161180156104dd575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038616105b61050d565b6000546001600160a01b0390811690861610801561050d57506401000276a36001600160a01b038616115b61053f5760405162461bcd60e51b815260206004820152600360248201526214d41360ea1b6044820152606401610495565b6040805160e08101825287815260006020820181905280546001600160a01b0316928201929092528188139190606081018a61057d57600354610581565b6002545b815260200160008152602001600081526020016000815250905060006105c67f00000000000000000000000000000000000000000000000000000000000000006111f6565b905060006105f37f00000000000000000000000000000000000000000000000000000000000000006111f6565b905060008b6106025781610604565b825b60005490915061068b906001600160a01b03168d610636578b6001600160a01b0316836001600160a01b03161161064c565b8b6001600160a01b0316836001600160a01b0316105b6106565782610658565b8b5b6001546001600160801b03168e7f00000000000000000000000000000000000000000000000000000000000000006114b1565b60c088015260a087015260808601526001600160a01b031660408501819052600080546001600160a01b031916821790556106c5906116cc565b6000805462ffffff92909216600160a01b0262ffffff60a01b1990921691909117905560c08401516001546107099190600160801b906001600160801b031661195e565b8460600181815161071a9190612823565b9052508b15610730576060840151600255610739565b60608401516003555b8415610782578360c0015184608001516107539190612823565b84518590610762908390612836565b90525060a0840151602085015161077891611a01565b60208501526107c1565b60a08401518451859061079690839061285d565b90525060c084015160808501516107bb916107b091612823565b602086015190611a27565b60208501525b8415158c1515146107e257602084015184516107dd908d612836565b6107f4565b83516107ee908c612836565b84602001515b90975095508b156108ef576000610809611a47565b604051637d241f3960e11b8152909150339063fa483e7290610835908b908b908f908f906004016128ae565b600060405180830381600087803b15801561084f57600080fd5b505af1158015610863573d6000803e3d6000fd5b5050505061086f611a47565b610879828a611b79565b11156108ad5760405162461bcd60e51b815260206004820152600360248201526249494160e81b6044820152606401610495565b60008712156108e9576108e97f00000000000000000000000000000000000000000000000000000000000000008f6108e48a6128d8565b611b94565b506109d6565b60006108f9611c94565b604051637d241f3960e11b8152909150339063fa483e7290610925908b908b908f908f906004016128ae565b600060405180830381600087803b15801561093f57600080fd5b505af1158015610953573d6000803e3d6000fd5b5050505061095f611c94565b6109698289611b79565b111561099d5760405162461bcd60e51b815260206004820152600360248201526249494160e81b6044820152606401610495565b60008812156109d4576109d47f00000000000000000000000000000000000000000000000000000000000000008f6108e48b6128d8565b505b600054600154604080518a8152602081018a90526001600160a01b03808516828401526001600160801b039093166060820152600160a01b90930460020b608084015251908f169133917fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca679181900360a00190a35050505050965096945050505050565b33600090815260046020526040812080548291906001600160801b03600160801b909104811690861611610a8e5784610aa1565b8054600160801b90046001600160801b03165b60018201549093506001600160801b0390811690851611610ac25783610ad1565b60018101546001600160801b03165b91506001600160801b03831615610b5e57805483908290601090610b06908490600160801b90046001600160801b03166128f4565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610b5e7f000000000000000000000000000000000000000000000000000000000000000087856001600160801b0316611b94565b6001600160801b03821615610be557600181018054839190600090610b8d9084906001600160801b03166128f4565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610be57f000000000000000000000000000000000000000000000000000000000000000087846001600160801b0316611b94565b604080516001600160a01b03881681526001600160801b038581166020830152841681830152905133917fd180a977ce9f029a7ec05d2c280a2eea13167dd64eeae88a1758af2f586d7cc4919081900360600190a250935093915050565b6000806000836001600160801b031611610caa5760405162461bcd60e51b815260206004820152602260248201527f4275726e20416d6f756e74206d7573742062652067726561746572207468616e604482015261020360f41b6064820152608401610495565b336000908152600460205260409020546001600160801b039081169084161115610d165760405162461bcd60e51b815260206004820152601d60248201527f4275726e20616d6f756e742065786365656473206c69717569646974790000006044820152606401610495565b600080610d4a6040518060400160405280336001600160a01b0316815260200187610d4090612914565b600f0b9052611dab565b9150915081610d58906128d8565b9350610d63816128d8565b92506000841180610d745750600083115b15610e0d5733600090815260046020526040902054610da4908590600160801b90046001600160801b0316612943565b33600090815260046020526040902060010154610dcb9085906001600160801b0316612943565b3360009081526004602052604090206001810180546001600160801b0319166001600160801b0393841617905580548216600160801b93909216929092021790555b604080516001600160801b03871681526020810186905290810184905233907fd4885a46e0c2f00ffdf2adb97a3909fd129dc1acccead462f7e29e6f18e54ec19060600160405180910390a25050915091565b6000806000856001600160801b031611610ebc5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610495565b600080610ee860405180604001604052808a6001600160a01b0316815260200189600f0b815250611dab565b90945092508391508290506000808315610f0757610f04611a47565b91505b8415610f1857610f15611c94565b90505b604051639f382e9b60e01b81523390639f382e9b90610f4190899089908d908d906004016128ae565b600060405180830381600087803b158015610f5b57600080fd5b505af1158015610f6f573d6000803e3d6000fd5b505050506000861115610fc157610f84611a47565b610f8e8388611b79565b1115610fc15760405162461bcd60e51b815260206004820152600260248201526104d360f41b6044820152606401610495565b841561100c57610fcf611c94565b610fd98287611b79565b111561100c5760405162461bcd60e51b81526020600482015260026024820152614d3160f01b6044820152606401610495565b604080513381526001600160801b038b166020820152908101879052606081018690526001600160a01b038b16907f011d4be6213866bff035f68967364cf69c5c01ff5bc23ff0a275f08a04381e6a9060800160405180910390a25050505094509492505050565b6000546001600160a01b0316156110c35760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610495565b6110cc816116cc565b6000805462ffffff60a01b1916600160a01b62ffffff93909316830217908190557f0000000000000000000000000000000000000000000000000000000000000000600290810b92909104900b1280159061115857506000547f0000000000000000000000000000000000000000000000000000000000000000600290810b600160a01b909204900b13155b6111d45760405162461bcd60e51b815260206004820152604160248201527f7371727450726963655839362073686f756c642062652077697468696e20746860448201527f652072616e6765206f66205b7469636b4c6f7765722c207469636b55707065726064820152602960f81b608482015260a401610495565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60020b600060ff82901d80830118620d89e8811115611220576112206345c3193d60e11b84611fe9565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b18600282161561125c576ffff97272373d413259a46990580e213a0260801c5b600482161561127b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561129a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156112b9576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156112d8576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156112f7576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611316576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611336576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611356576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611376576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611396576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156113b6576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156113d6576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156113f6576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611416576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611437576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611457576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611476576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611493576b048a170391f7dc42444e8fa20260801c5b60008413156114a157600019045b63ffffffff0160201c9392505050565b60008080806001600160a01b03808916908a16101581871280159061153d5760006114f1896114e38a620f4240612963565b62ffffff16620f424061195e565b90508261150a576115058c8c8c6001611ffa565b611517565b6115178b8d8c6001612083565b9550858110611528578a9650611537565b6115348c8b838661214a565b96505b50611591565b816115545761154f8b8b8b6000612083565b611561565b6115618a8c8b6000611ffa565b93508361156d896128d8565b1061157a57899550611591565b61158e8b8a6115888b6128d8565b85612196565b95505b6001600160a01b038a81169087161482156115f4578080156115b05750815b6115c6576115c1878d8c6001612083565b6115c8565b855b95508080156115d5575081155b6115eb576115e6878d8c6000611ffa565b6115ed565b845b945061163e565b8080156115fe5750815b6116145761160f8c888c6001611ffa565b611616565b855b9550808015611623575081155b611639576116348c888c6000612083565b61163b565b845b94505b811580156116535750611650896128d8565b85115b1561166457611661896128d8565b94505b81801561168357508a6001600160a01b0316876001600160a01b031614155b1561169957611692868a61297f565b93506116bd565b6116ba8662ffffff8a166116b08b620f4240612963565b62ffffff166121e2565b93505b50505095509550955095915050565b600073fffd8963efd1fc6a506488495d951d51639616826401000276a21983016001600160a01b0316111561170c5761170c6318521d4960e21b83612214565b640100000000600160c01b03602083901b1680600061172a8261222b565b60ff1690506080811061174557607f810383901c915061174f565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461194f57886001600160a01b0316611934826111f6565b6001600160a01b031611156119495781611951565b80611951565b815b9998505050505050505050565b6000838302816000198587098281108382030391505080841161198057600080fd5b80600003611993575082900490506119fa565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b60008082121583611a128482612836565b925082131514611a2157600080fd5b92915050565b60008082121583611a38848261285d565b925082121514611a2157600080fd5b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b1790529051600091829182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691611abe9190612992565b600060405180830381855afa9150503d8060008114611af9576040519150601f19603f3d011682016040523d82523d6000602084013e611afe565b606091505b5091509150818015611b1257506020815110155b611b5e5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f206765742062616c616e6365206f6620746f6b656e30006044820152606401610495565b80806020019051810190611b7291906129c1565b9250505090565b600082611b868382612823565b9150811015611a2157600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611bf09190612992565b6000604051808303816000865af19150503d8060008114611c2d576040519150601f19603f3d011682016040523d82523d6000602084013e611c32565b606091505b5091509150818015611c5c575080511580611c5c575080806020019051810190611c5c91906129da565b611c8d5760405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606401610495565b5050505050565b604080513060248083019190915282518083039091018152604490910182526020810180516001600160e01b03166370a0823160e01b1790529051600091829182917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691611d0b9190612992565b600060405180830381855afa9150503d8060008114611d46576040519150601f19603f3d011682016040523d82523d6000602084013e611d4b565b606091505b5091509150818015611d5f57506020815110155b611b5e5760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f206765742062616c616e6365206f6620746f6b656e31006044820152606401610495565b600080548190611df1906001600160a01b0316611de77f00000000000000000000000000000000000000000000000000000000000000006111f6565b85602001516122b8565b600054909250611e37906001600160a01b0316611e2d7f00000000000000000000000000000000000000000000000000000000000000006111f6565b85602001516122ff565b83516001600160a01b0316600090815260046020526040812060028082015490549394509092611e7f91611e6a9161297f565b83546001600160801b0316600160801b61195e565b90506000611ead8360030154600354611e98919061297f565b84546001600160801b0316600160801b61195e565b6002805490850155600380549085015590506001600160801b038216151580611edf57506000816001600160801b0316115b15611f7757825482908490601090611f08908490600160801b90046001600160801b0316612943565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550808360010160008282829054906101000a90046001600160801b0316611f529190612943565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6001546020870151611f92916001600160801b031690612333565b600180546001600160801b0319166001600160801b0392831617905583546020880151611fc3929190911690612333565b83546001600160801b0319166001600160801b0391909116179092555091939092509050565b816000528060020b60045260246000fd5b6000836001600160a01b0316856001600160a01b0316111561201a579293925b8161204e576120496001600160801b03841661203687876129f7565b6001600160a01b0316600160601b61195e565b612078565b6120786001600160801b03841661206587876129f7565b6001600160a01b0316600160601b6121e2565b90505b949350505050565b6000836001600160a01b0316856001600160a01b031611156120a3579293925b600160601b600160e01b03606084901b1660006120c087876129f7565b6001600160a01b031690506000876001600160a01b0316116120e157600080fd5b8361211357866001600160a01b03166121048383896001600160a01b031661195e565b61210e9190612a2d565b61213f565b61213f61212a8383896001600160a01b03166121e2565b886001600160a01b0316808204910615150190565b979650505050505050565b600080856001600160a01b03161161216157600080fd5b6000846001600160801b03161161217757600080fd5b816121895761204985858560016123f3565b61207885858560016124da565b600080856001600160a01b0316116121ad57600080fd5b6000846001600160801b0316116121c357600080fd5b816121d55761204985858560006124da565b61207885858560006123f3565b60006121ef84848461195e565b905081806121ff576121ff612a17565b838509156119fa57600101806119fa57600080fd5b816000526001600160a01b03811660045260246000fd5b600080821161223957600080fd5b507f0706060506020500060203020504000106050205030304010505030400000000601f6f8421084210842108cc6318c6db6d54be6001600160801b03841160071b84811c67ffffffffffffffff1060061b1784811c63ffffffff1060051b1784811c61ffff1060041b1784811c60ff1060031b1793841c1c161a1790565b60008082600f0b126122de576122d96122d48585856001612083565b6125f1565b61207b565b6122f66122d485856122ef86612914565b6000612083565b61207b906128d8565b60008082600f0b1261231b576122d96122d48585856001611ffa565b6122f66122d4858561232c86612914565b6000611ffa565b60008082600f0b12156123a0576001600160801b03831661235383612914565b61235d90856128f4565b9150816001600160801b03161061239b5760405162461bcd60e51b81526020600482015260026024820152614c5360f01b6044820152606401610495565b611a21565b6001600160801b0383166123b48385612943565b9150816001600160801b03161015611a215760405162461bcd60e51b81526020600482015260026024820152614c4160f01b6044820152606401610495565b600081156124655760006001600160a01b038411156124295761242484600160601b876001600160801b031661195e565b612440565b6124406001600160801b038616606086901b612a2d565b905061245d6124586001600160a01b03881683611b79565b612607565b91505061207b565b60006001600160a01b038411156124935761248e84600160601b876001600160801b03166121e2565b6124b0565b6124b0606085901b6001600160801b038716808204910615150190565b905080866001600160a01b0316116124c757600080fd5b61245d816001600160a01b03881661297f565b6000826000036124eb57508361207b565b600160601b600160e01b03606085901b1682156125945760006001600160a01b038716856125198282612a4f565b92506125259083612a2d565b0361255f5760006125368284612823565b905082811061255d5761255383896001600160a01b0316836121e2565b935050505061207b565b505b61258b826125808761257a6001600160a01b038c1684612a2d565b90611b79565b808204910615150190565b9250505061207b565b60006001600160a01b038716856125ab8282612a4f565b92506125b79083612a2d565b1480156125c357508082115b6125cc57600080fd5b60006125d8828461297f565b9050612553612458848a6001600160a01b0316846121e2565b6000600160ff1b821061260357600080fd5b5090565b806001600160a01b038116811461261d57600080fd5b919050565b6001600160a01b038116811461263757600080fd5b50565b801515811461263757600080fd5b60008083601f84011261265a57600080fd5b50813567ffffffffffffffff81111561267257600080fd5b60208301915083602082850101111561268a57600080fd5b9250929050565b60008060008060008060a087890312156126aa57600080fd5b86356126b581612622565b955060208701356126c58161263a565b94506040870135935060608701356126dc81612622565b9250608087013567ffffffffffffffff8111156126f857600080fd5b61270489828a01612648565b979a9699509497509295939492505050565b60006020828403121561272857600080fd5b81356119fa81612622565b80356001600160801b038116811461261d57600080fd5b60008060006060848603121561275f57600080fd5b833561276a81612622565b925061277860208501612733565b915061278660408501612733565b90509250925092565b6000602082840312156127a157600080fd5b6119fa82612733565b600080600080606085870312156127c057600080fd5b84356127cb81612622565b93506127d960208601612733565b9250604085013567ffffffffffffffff8111156127f557600080fd5b61280187828801612648565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611a2157611a2161280d565b81810360008312801583831316838312821617156128565761285661280d565b5092915050565b808201828112600083128015821682158216171561287d5761287d61280d565b505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8481528360208201526060604082015260006128ce606083018486612885565b9695505050505050565b6000600160ff1b82016128ed576128ed61280d565b5060000390565b6001600160801b038281168282160390808211156128565761285661280d565b600081600f0b6f7fffffffffffffffffffffffffffffff19810361293a5761293a61280d565b60000392915050565b6001600160801b038181168382160190808211156128565761285661280d565b62ffffff8281168282160390808211156128565761285661280d565b81810381811115611a2157611a2161280d565b6000825160005b818110156129b35760208186018101518583015201612999565b506000920191825250919050565b6000602082840312156129d357600080fd5b5051919050565b6000602082840312156129ec57600080fd5b81516119fa8161263a565b6001600160a01b038281168282160390808211156128565761285661280d565b634e487b7160e01b600052601260045260246000fd5b600082612a4a57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417611a2157611a2161280d56fea26469706673582212209b9ab2d795749868e65a399a4acf0b38e486e03788509ee65bfe05b58efcaf9964736f6c63430008140033a26469706673582212203fd741378747b57ecee9b310953233ceebe2c46095370008d74d85c5e98818e764736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 87,
        "contract": "contracts/Factory.sol:Factory",
        "label": "parameters",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Parameters)1715_storage"
      },
      {
        "astId": 94,
        "contract": "contracts/Factory.sol:Factory",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_struct(Parameters)1715_storage": {
        "encoding": "inplace",
        "label": "struct IFactory.Parameters",
        "members": [
          {
            "astId": 1704,
            "contract": "contracts/Factory.sol:Factory",
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1706,
            "contract": "contracts/Factory.sol:Factory",
            "label": "tokenA",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1708,
            "contract": "contracts/Factory.sol:Factory",
            "label": "tokenB",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1710,
            "contract": "contracts/Factory.sol:Factory",
            "label": "tickLower",
            "offset": 20,
            "slot": "2",
            "type": "t_int24"
          },
          {
            "astId": 1712,
            "contract": "contracts/Factory.sol:Factory",
            "label": "tickUpper",
            "offset": 23,
            "slot": "2",
            "type": "t_int24"
          },
          {
            "astId": 1714,
            "contract": "contracts/Factory.sol:Factory",
            "label": "fee",
            "offset": 26,
            "slot": "2",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}