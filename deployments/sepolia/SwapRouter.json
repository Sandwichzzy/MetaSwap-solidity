{
  "address": "0x5a960fA99c25EB2bbe17f6E12A77Dc4f5f32991a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "indexPath",
              "type": "uint32[]"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "indexPath",
              "type": "uint32[]"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.ExactOutputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "indexPath",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.QuoteExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quoteExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "indexPath",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.QuoteExactOutputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quoteExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "amountSpecified",
          "type": "int256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapInPool",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x09e131729367e87c6736d784f658c88f4428f3ef25c5b7607cc92bf38dca42f0",
  "receipt": {
    "to": null,
    "from": "0x523df39cAe18ea125930DA730628213e4b147CDc",
    "contractAddress": "0x5a960fA99c25EB2bbe17f6E12A77Dc4f5f32991a",
    "transactionIndex": 119,
    "gasUsed": "1229350",
    "logsBloom": "0x
    "blockHash": "0x5665c8b45bcdf2a3b53284a925261efee90e985f0f4ac668cd7f427c1472ee4d",
    "transactionHash": "0x09e131729367e87c6736d784f658c88f4428f3ef25c5b7607cc92bf38dca42f0",
    "logs": [],
    "blockNumber": 9165559,
    "cumulativeGasUsed": "23020978",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb1952789eE2d5e3f909aaAa5456ABFabAB316419"
  ],
  "numDeployments": 2,
  "solcInputHash": "2c01495a0b159ef3f3076037eca6f249",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"indexPath\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"indexPath\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"indexPath\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.QuoteExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"indexPath\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.QuoteExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapInPool\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"quoteExactInput((address,address,uint32[],uint256,uint160))\":{\"details\":\"\\u62a5\\u4ef7\\u63a5\\u53e3\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter.sol\":\"SwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"contracts/SwapRouter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"./interfaces/IPoolManager.sol\\\";\\r\\nimport \\\"./interfaces/IPool.sol\\\";\\r\\n\\r\\n//SwapRouter \\u5408\\u7ea6\\u7528\\u4e8e\\u5c06\\u591a\\u4e2a\\u4ea4\\u6613\\u6c60 Pool \\u5408\\u7ea6\\u7684\\u4ea4\\u6613\\u7ec4\\u5408\\u4e3a\\u4e00\\u4e2a\\u4ea4\\u6613\\r\\n//\\u6bcf\\u4e2a\\u4ee3\\u5e01\\u5bf9\\u53ef\\u80fd\\u4f1a\\u6709\\u591a\\u4e2a\\u4ea4\\u6613\\u6c60\\uff0c\\u56e0\\u4e3a\\u4ea4\\u6613\\u6c60\\u7684\\u6d41\\u52a8\\u6027\\u3001\\u624b\\u7eed\\u8d39\\u3001\\u4ef7\\u683c\\u4e0a\\u4e0b\\u9650\\u4e0d\\u4e00\\u6837\\uff0c\\r\\n//\\u6240\\u4ee5\\u7528\\u6237\\u7684\\u4e00\\u6b21\\u4ea4\\u6613\\u9700\\u6c42\\u53ef\\u80fd\\u4f1a\\u53d1\\u751f\\u5728\\u591a\\u4e2a\\u4ea4\\u6613\\u6c60\\u4e2d\\u3002\\r\\n//Uniswap \\u4e2d\\uff0c\\u8fd8\\u652f\\u6301\\u8de8\\u4ea4\\u6613\\u5bf9\\u4ea4\\u6613 \\u6bd4\\u5982\\u53ea\\u6709 A/B \\u548c B/C \\u4e24\\u4e2a\\u4ea4\\u6613\\u5bf9\\uff0c\\u7528\\u6237\\u53ef\\u4ee5\\u901a\\u8fc7 A/B \\u548c B/C \\u4e24\\u4e2a\\u4ea4\\u6613\\u5bf9\\u5b8c\\u6210 A/C \\u7684\\u4ea4\\u6613\\r\\n//\\u8fd9\\u91cc\\u53ea\\u9700\\u8981\\u652f\\u6301\\u540c\\u4e00\\u4e2a\\u4ea4\\u6613\\u5bf9\\u7684\\u4e0d\\u540c\\u4ea4\\u6613\\u6c60\\u7684\\u4ea4\\u6613\\r\\ncontract SwapRouter is ISwapRouter {\\r\\n     IPoolManager public poolManager;\\r\\n\\r\\n    constructor(address _poolManager) {\\r\\n        poolManager = IPoolManager(_poolManager);\\r\\n    }\\r\\n\\r\\n    /// @dev Parses a revert reason that should contain the numeric quote\\r\\n    function parseRevertReason(\\r\\n        bytes memory reason\\r\\n    ) private pure returns (int256, int256) {\\r\\n        if (reason.length != 64) {\\r\\n            if (reason.length < 68) revert(\\\"Unexpected error\\\");\\r\\n            assembly {\\r\\n                reason := add(reason, 0x04)\\r\\n            }\\r\\n            revert(abi.decode(reason, (string)));\\r\\n        }\\r\\n        return abi.decode(reason, (int256, int256));\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function swapInPool(\\r\\n        IPool pool,\\r\\n        address recipient,\\r\\n        bool zeroForOne,\\r\\n        int256 amountSpecified,\\r\\n        uint160 sqrtPriceLimitX96,\\r\\n        bytes calldata data\\r\\n    ) external returns (int256 amount0, int256 amount1) {\\r\\n        try\\r\\n            pool.swap(\\r\\n                recipient,\\r\\n                zeroForOne,\\r\\n                amountSpecified,\\r\\n                sqrtPriceLimitX96,\\r\\n                data\\r\\n            )\\r\\n        returns (int256 _amount0, int256 _amount1) {\\r\\n            return (_amount0, _amount1);\\r\\n        } catch (bytes memory reason) {\\r\\n            return parseRevertReason(reason);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //exactInput \\u548c exactOutput \\u65b9\\u6cd5\\uff0c\\u5206\\u522b\\u7528\\u4e8e\\u6362\\u5165\\u591a\\u5c11 Token \\u786e\\u5b9a\\u7684\\u60c5\\u51b5\\u548c\\u6362\\u51fa\\u591a\\u5c11 Token \\u7684\\u60c5\\u51b5\\u7684\\u4ea4\\u6613\\r\\n    //\\u904d\\u5386 indexPath\\uff0c\\u7136\\u540e\\u83b7\\u53d6\\u5230\\u5bf9\\u5e94\\u7684\\u4ea4\\u6613\\u6c60\\u7684\\u5730\\u5740\\uff0c\\u63a5\\u7740\\u8c03\\u7528\\u4ea4\\u6613\\u6c60\\u7684 swap \\u63a5\\u53e3\\uff0c\\u5982\\u679c\\u4e2d\\u9014\\u4ea4\\u6613\\u5b8c\\u6210\\u4e86\\u5c31\\u63d0\\u524d\\u9000\\u51fa\\u904d\\u5386\\u5373\\u53ef\\r\\n    function exactInput(ExactInputParams calldata params) external payable override returns (uint256 amountOut) {\\r\\n        //\\u8bb0\\u5f55\\u786e\\u5b9a\\u7684\\u8f93\\u5165token\\u7684amount\\r\\n        uint256 amountIn=params.amountIn;\\r\\n        // \\u6839\\u636e tokenIn \\u548c tokenOut \\u7684\\u5927\\u5c0f\\u5173\\u7cfb\\uff0c\\u786e\\u5b9a\\u662f\\u4ece token0 \\u5230 token1 \\u8fd8\\u662f\\u4ece token1 \\u5230 token0\\r\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\r\\n        // \\u904d\\u5386\\u6307\\u5b9a\\u7684\\u6bcf\\u4e00\\u4e2a pool\\r\\n        for(uint256 i=0;i<params.indexPath.length;i++){\\r\\n            address poolAddress=poolManager.getPool(params.tokenIn,params.tokenOut,params.indexPath[i]);\\r\\n            require(poolAddress !=address(0),\\\"Pool not found\\\");\\r\\n            // \\u83b7\\u53d6 pool \\u5b9e\\u4f8b\\r\\n            IPool pool=IPool(poolAddress);\\r\\n            // \\u6784\\u9020 swapCallback \\u51fd\\u6570\\u9700\\u8981\\u7684\\u53c2\\u6570\\r\\n            bytes memory data=abi.encode(\\r\\n                params.tokenIn,\\r\\n                params.tokenOut,\\r\\n                params.indexPath[i],\\r\\n                params.recipient == address(0) ? address(0) : msg.sender\\r\\n             );\\r\\n\\r\\n             // \\u8c03\\u7528 pool \\u7684 swap \\u51fd\\u6570\\uff0c\\u8fdb\\u884c\\u4ea4\\u6362\\uff0c\\u5e76\\u62ff\\u5230\\u8fd4\\u56de\\u7684 token0 \\u548c token1 \\u7684\\u6570\\u91cf\\r\\n            (int256 amount0,int256 amount1)=this.swapInPool(\\r\\n                pool,\\r\\n                params.recipient,\\r\\n                zeroForOne,\\r\\n                int256(amountIn),\\r\\n                params.sqrtPriceLimitX96,\\r\\n                data\\r\\n            );\\r\\n\\r\\n            // \\u66f4\\u65b0 amountIn \\u548c amountOut\\r\\n            amountIn -= uint256(zeroForOne ? amount0 : amount1);\\r\\n            amountOut += uint256(zeroForOne ? -amount1 : -amount0);\\r\\n\\r\\n            // \\u5982\\u679c amountIn \\u4e3a 0\\uff0c\\u5219\\u8bf4\\u660e\\u4ea4\\u6613\\u5df2\\u7ecf\\u5b8c\\u6210\\uff0c\\u9000\\u51fa\\u5faa\\u73af\\r\\n            if(amountIn==0){\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        // \\u5982\\u679c\\u4ea4\\u6362\\u5230\\u7684 amountOut \\u5c0f\\u4e8e\\u6307\\u5b9a\\u7684\\u6700\\u5c11\\u6570\\u91cf amountOutMinimum\\uff0c\\u5219\\u629b\\u51fa\\u9519\\u8bef\\r\\n        require(amountOut>=params.amountOutMinimum,\\\"Slippage exceeded\\\");\\r\\n\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            zeroForOne,\\r\\n            params.amountIn,\\r\\n            amountIn,\\r\\n            amountOut\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable override returns (uint256 amountIn){\\r\\n        //\\u8bb0\\u5f55\\u786e\\u5b9a\\u7684\\u8f93\\u51fatoken\\u7684amount\\r\\n        uint256 amountOut=params.amountOut;\\r\\n        // \\u6839\\u636e tokenIn \\u548c tokenOut \\u7684\\u5927\\u5c0f\\u5173\\u7cfb\\uff0c\\u786e\\u5b9a\\u662f\\u4ece token0 \\u5230 token1 \\u8fd8\\u662f\\u4ece token1 \\u5230 token0\\r\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\r\\n\\r\\n        // \\u904d\\u5386\\u6307\\u5b9a\\u7684\\u6bcf\\u4e00\\u4e2a pool\\r\\n        for (uint256 i = 0; i < params.indexPath.length; i++) {\\r\\n            address poolAddress = poolManager.getPool(\\r\\n                params.tokenIn,\\r\\n                params.tokenOut,\\r\\n                params.indexPath[i]\\r\\n            );\\r\\n\\r\\n            // \\u5982\\u679c pool \\u4e0d\\u5b58\\u5728\\uff0c\\u5219\\u629b\\u51fa\\u9519\\u8bef\\r\\n            require(poolAddress != address(0), \\\"Pool not found\\\");\\r\\n\\r\\n            // \\u83b7\\u53d6 pool \\u5b9e\\u4f8b\\r\\n            IPool pool = IPool(poolAddress);\\r\\n\\r\\n            // \\u6784\\u9020 swapCallback \\u51fd\\u6570\\u9700\\u8981\\u7684\\u53c2\\u6570\\r\\n            bytes memory data = abi.encode(\\r\\n                params.tokenIn,\\r\\n                params.tokenOut,\\r\\n                params.indexPath[i],\\r\\n                params.recipient == address(0) ? address(0) : msg.sender);\\r\\n\\r\\n            // \\u8c03\\u7528 pool \\u7684 swap \\u51fd\\u6570\\uff0c\\u8fdb\\u884c\\u4ea4\\u6362\\uff0c\\u5e76\\u62ff\\u5230\\u8fd4\\u56de\\u7684 token0 \\u548c token1 \\u7684\\u6570\\u91cf\\r\\n            (int256 amount0, int256 amount1) = this.swapInPool(\\r\\n                pool,\\r\\n                params.recipient,\\r\\n                zeroForOne,\\r\\n                -int256(amountOut),\\r\\n                params.sqrtPriceLimitX96,\\r\\n                data\\r\\n            );\\r\\n\\r\\n            // \\u66f4\\u65b0 amountOut \\u548c amountIn\\r\\n            amountOut -= uint256(zeroForOne ? -amount1 : -amount0);\\r\\n            amountIn += uint256(zeroForOne ? amount0 : amount1);\\r\\n\\r\\n            // \\u5982\\u679c amountOut \\u4e3a 0\\uff0c\\u8868\\u793a\\u4ea4\\u6362\\u5b8c\\u6210\\uff0c\\u8df3\\u51fa\\u5faa\\u73af\\r\\n            if (amountOut == 0) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        // \\u5982\\u679c\\u4ea4\\u6362\\u5230\\u6307\\u5b9a\\u6570\\u91cf tokenOut \\u6d88\\u8017\\u7684 tokenIn \\u6570\\u91cf\\u8d85\\u8fc7\\u6307\\u5b9a\\u7684\\u6700\\u5927\\u503c\\uff0c\\u62a5\\u9519\\r\\n        require(amountIn <= params.amountInMaximum, \\\"Slippage exceeded\\\");\\r\\n        // \\u53d1\\u5c04 Swap \\u4e8b\\u4ef6\\r\\n        emit Swap(\\r\\n            msg.sender,\\r\\n            zeroForOne,\\r\\n            params.amountOut,\\r\\n            amountOut,\\r\\n            amountIn\\r\\n        );\\r\\n\\r\\n        // \\u8fd4\\u56de\\u4ea4\\u6362\\u540e\\u7684 amountIn\\r\\n        return amountIn;\\r\\n    }\\r\\n\\r\\n    //\\u8c03\\u7528 swap \\u51fd\\u6570\\u65f6\\u6784\\u9020\\u4e86\\u4e00\\u4e2a data\\r\\n    //\\u5728 Pool \\u5408\\u7ea6\\u56de\\u8c03\\u7684\\u65f6\\u5019\\u4f20\\u56de\\u6765\\uff0c\\u6211\\u4eec\\u9700\\u8981\\u5728\\u56de\\u8c03\\u51fd\\u6570\\u4e2d\\u901a\\u8fc7\\u76f8\\u5173\\u4fe1\\u606f\\u6765\\u7ee7\\u7eed\\u6267\\u884c\\u4ea4\\u6613\\r\\n     function swapCallback(\\r\\n        int256 amount0Delta,\\r\\n        int256 amount1Delta,\\r\\n        bytes calldata data\\r\\n    ) external override {\\r\\n        // transfer token\\r\\n        (address tokenIn, address tokenOut, uint32 index, address payer) = abi\\r\\n            .decode(data, (address, address, uint32, address));\\r\\n        address _pool = poolManager.getPool(tokenIn, tokenOut, index);\\r\\n\\r\\n        // \\u68c0\\u67e5 callback \\u7684\\u5408\\u7ea6\\u5730\\u5740\\u662f\\u5426\\u662f Pool\\r\\n        require(_pool == msg.sender, \\\"Invalid callback caller\\\");\\r\\n\\r\\n        uint256 amountToPay = amount0Delta > 0\\r\\n            ? uint256(amount0Delta)\\r\\n            : uint256(amount1Delta);\\r\\n        // payer \\u662f address(0)\\uff0c\\u8fd9\\u662f\\u4e00\\u4e2a\\u7528\\u4e8e\\u9884\\u4f30 token \\u7684\\u8bf7\\u6c42\\uff08quoteExactInput or quoteExactOutput\\uff09\\r\\n        // \\u53c2\\u8003\\u4ee3\\u7801 https://github.com/Uniswap/v3-periphery/blob/main/contracts/lens/Quoter.sol#L38\\r\\n        if (payer == address(0)) {\\r\\n            assembly {\\r\\n                let ptr := mload(0x40)\\r\\n                mstore(ptr, amount0Delta)\\r\\n                mstore(add(ptr, 0x20), amount1Delta)\\r\\n                revert(ptr, 64)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // \\u6b63\\u5e38\\u4ea4\\u6613\\uff0c\\u8f6c\\u8d26\\u7ed9\\u4ea4\\u6613\\u6c60\\r\\n        if (amountToPay > 0) {\\r\\n            IERC20(tokenIn).transferFrom(payer, _pool, amountToPay);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    ///@dev \\u62a5\\u4ef7\\u63a5\\u53e3\\r\\n    //\\u6a21\\u62df swap \\u65b9\\u6cd5\\u6765\\u9884\\u4f30\\u4ea4\\u6613\\u9700\\u8981\\u7684 Token\\uff0c\\u4f46\\u662f\\u56e0\\u4e3a\\u9884\\u4f30\\u7684\\u65f6\\u5019\\u5e76\\u4e0d\\u4f1a\\u5b9e\\u9645\\u4ea7\\u751f Token \\u7684\\u4ea4\\u6362\\uff0c\\u6240\\u4ee5\\u4f1a\\u62a5\\u9519\\u3002\\r\\n    // \\u901a\\u8fc7\\u4e3b\\u52a8\\u629b\\u51fa\\u4e00\\u4e2a\\u7279\\u6b8a\\u7684\\u9519\\u8bef\\uff0c\\u7136\\u540e\\u6355\\u83b7\\u8fd9\\u4e2a\\u9519\\u8bef\\uff0c\\u4ece\\u9519\\u8bef\\u4fe1\\u606f\\u4e2d\\u89e3\\u6790\\u51fa\\u9700\\u8981\\u7684\\u4fe1\\u606f\\r\\n    // \\u62a5\\u4ef7\\uff0c\\u6307\\u5b9a tokenIn \\u7684\\u6570\\u91cf\\u548c tokenOut \\u7684\\u6700\\u5c0f\\u503c\\uff0c\\u8fd4\\u56de tokenOut \\u7684\\u5b9e\\u9645\\u6570\\u91cf\\r\\n    // \\u62a5\\u4ef7\\uff0c\\u6307\\u5b9a tokenIn \\u7684\\u6570\\u91cf\\u548c tokenOut \\u7684\\u6700\\u5c0f\\u503c\\uff0c\\u8fd4\\u56de tokenOut \\u7684\\u5b9e\\u9645\\u6570\\u91cf\\r\\n    function quoteExactInput(\\r\\n        QuoteExactInputParams calldata params\\r\\n    ) external override returns (uint256 amountOut) {\\r\\n        // \\u56e0\\u4e3a\\u6ca1\\u6709\\u5b9e\\u9645 approve\\uff0c\\u6240\\u4ee5\\u8fd9\\u91cc\\u4ea4\\u6613\\u4f1a\\u62a5\\u9519\\uff0c\\u6211\\u4eec\\u6355\\u83b7\\u9519\\u8bef\\u4fe1\\u606f\\uff0c\\u89e3\\u6790\\u9700\\u8981\\u591a\\u5c11 token\\r\\n\\r\\n        return\\r\\n            this.exactInput(\\r\\n                ExactInputParams({\\r\\n                    tokenIn: params.tokenIn,\\r\\n                    tokenOut: params.tokenOut,\\r\\n                    indexPath: params.indexPath,\\r\\n                    recipient: address(0),\\r\\n                    deadline: block.timestamp + 1 hours,\\r\\n                    amountIn: params.amountIn,\\r\\n                    amountOutMinimum: 0,\\r\\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\\r\\n                })\\r\\n            );\\r\\n    }\\r\\n\\r\\n     // \\u62a5\\u4ef7\\uff0c\\u6307\\u5b9a tokenOut \\u7684\\u6570\\u91cf\\u548c tokenIn \\u7684\\u6700\\u5927\\u503c\\uff0c\\u8fd4\\u56de tokenIn \\u7684\\u5b9e\\u9645\\u6570\\u91cf\\r\\n     // \\u62a5\\u4ef7\\uff0c\\u6307\\u5b9a tokenOut \\u7684\\u6570\\u91cf\\u548c tokenIn \\u7684\\u6700\\u5927\\u503c\\uff0c\\u8fd4\\u56de tokenIn \\u7684\\u5b9e\\u9645\\u6570\\u91cf\\r\\n    function quoteExactOutput(\\r\\n        QuoteExactOutputParams calldata params\\r\\n    ) external override returns (uint256 amountIn) {\\r\\n        return\\r\\n            this.exactOutput(\\r\\n                ExactOutputParams({\\r\\n                    tokenIn: params.tokenIn,\\r\\n                    tokenOut: params.tokenOut,\\r\\n                    indexPath: params.indexPath,\\r\\n                    recipient: address(0),\\r\\n                    deadline: block.timestamp + 1 hours,\\r\\n                    amountOut: params.amountOut,\\r\\n                    amountInMaximum: type(uint256).max,\\r\\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\\r\\n                })\\r\\n            );\\r\\n    }\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0x0bc79049b22729bd2d5bb9a4734ef77885fab52d5c8a58f029e8a9d74b250f57\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IFactory {\\r\\n    struct Parameters {\\r\\n        address factory;\\r\\n        address tokenA;\\r\\n        address tokenB;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint24 fee;\\r\\n    }\\r\\n\\r\\n    function parameters() external view returns (        \\r\\n        address factory,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint24 fee\\r\\n    );\\r\\n\\r\\n\\r\\n\\r\\n    event PoolCreated(address token0, address token1,uint32 index, int24 tickLower, int24 tickUpper, uint24 fee,address pool);\\r\\n\\r\\n    function getPool(address tokenA, address tokenB, uint32 index) external view returns (address pool);\\r\\n\\r\\n    function createPool(address tokenA, address tokenB, int24 tickLower, int24 tickUpper, uint24 fee) external returns (address pool);\\r\\n}\",\"keccak256\":\"0x14c33686965f51ba1080b158b0c15729827ea97e1399a8358213c7fd28abcabb\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IMintCallback {\\r\\n    function mintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface ISwapCallback {\\r\\n    function swapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\r\\n}\\r\\n\\r\\ninterface IPool {\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function fee() external view returns (uint24);\\r\\n    function tickLower() external view returns (int24);\\r\\n    function tickUpper() external view returns (int24);\\r\\n    function sqrtPriceX96() external view returns (uint160);\\r\\n    function tick() external view returns (int24);\\r\\n    function liquidity() external view returns (uint128);\\r\\n\\r\\n    function initialize(uint160 sqrtPriceX96) external;\\r\\n   /// feeGrowthGlobal0X128 \\u8bb0\\u5f55\\u4ece\\u521b\\u5efa\\u5230\\u73b0\\u5728\\uff0c\\u6bcf\\u4e2a\\u6d41\\u52a8\\u6027\\u7d2f\\u8ba1\\u4ea7\\u751f\\u7684 token0 \\u7684\\u624b\\u7eed\\u8d39\\r\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\r\\n\\r\\n     /// feeGrowthGlobal1X128 \\u8bb0\\u5f55\\u4ece\\u521b\\u5efa\\u5230\\u73b0\\u5728\\uff0c\\u6bcf\\u4e2a\\u6d41\\u52a8\\u6027\\u7d2f\\u8ba1\\u4ea7\\u751f\\u7684 token1 \\u7684\\u624b\\u7eed\\u8d39\\r\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n    /// @dev This value can overflow the uint256\\r\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\r\\n   \\r\\n    function getPosition(address owner) \\r\\n        external \\r\\n        view \\r\\n        returns(\\r\\n            uint128 _liquidity,\\r\\n            uint256 feeGrowthInside0LastX128,\\r\\n            uint256 feeGrowthInside1LastX128,\\r\\n            uint128 tokensOwed0,\\r\\n            uint128 tokensOwed1\\r\\n        );\\r\\n\\r\\n    event Mint(\\r\\n        address sender, \\r\\n        address indexed owner, \\r\\n        uint128 amount,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function mint(address recipent, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    event Collect(\\r\\n        address indexed owner, \\r\\n        address recipient,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function collect(\\r\\n        address recipient,\\r\\n        uint128 amount0Requested,\\r\\n        uint128 amount1Requested\\r\\n    ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n    event Burn(\\r\\n        address indexed owner, \\r\\n        uint128 amount,\\r\\n        uint256 amount0, \\r\\n        uint256 amount1);\\r\\n\\r\\n    function burn(uint128 amount) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    event Swap(\\r\\n        address indexed sender, \\r\\n        address indexed recipient,\\r\\n        int256 amount0, \\r\\n        int256 amount1, \\r\\n        uint160 sqrtPriceX96,\\r\\n        uint128 liquidity,\\r\\n        int24 tick);\\r\\n\\r\\n    function swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes calldata data)\\r\\n    external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n   \\r\\n}\",\"keccak256\":\"0x91f0fea042b16b0df8292ba7339f45e9809f009ce9d13a925f535319e8c24659\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IFactory.sol\\\";\\r\\n\\r\\ninterface IPoolManager is IFactory {\\r\\n    struct PoolInfo {\\r\\n        address pool;\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint32 index;\\r\\n        uint24 fee;\\r\\n        uint8 feeProtocol;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        int24 tick;\\r\\n        uint160 sqrtPriceX96;\\r\\n        uint128 liquidity;\\r\\n    }\\r\\n\\r\\n    struct Pair{\\r\\n        address token0;\\r\\n        address token1;\\r\\n    }\\r\\n\\r\\n    function getPairs() external view returns (Pair[] memory);\\r\\n\\r\\n    function getAllPools() external view returns (PoolInfo[] memory poolsInfo);\\r\\n\\r\\n    struct CreateAndInitializeParams{\\r\\n        address token0;\\r\\n        address token1;\\r\\n        uint24 fee;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        uint160 sqrtPriceX96;\\r\\n    }\\r\\n\\r\\n    function createAndInitializePoolIfNecessary(CreateAndInitializeParams calldata params) external payable \\r\\n        returns (address pool);\\r\\n}\",\"keccak256\":\"0xf1b64ca71c457626341fdc3d18962b5ddd609a156dbcc081b346667423a9d011\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\ninterface ISwapRouter is ISwapCallback{\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        bool zeroForOne,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountInRemaining,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    struct ExactInputParams {\\r\\n        address tokenIn;           // \\u8f93\\u5165\\u4ee3\\u5e01\\r\\n        address tokenOut;          // \\u8f93\\u51fa\\u4ee3\\u5e01\\r\\n        uint32[] indexPath;        // \\u4ea4\\u6613\\u8def\\u5f84\\r\\n        address recipient;         // \\u63a5\\u6536\\u8005\\r\\n        uint256 deadline;          // \\u622a\\u6b62\\u65f6\\u95f4\\r\\n        uint256 amountIn;          // \\u6307\\u5b9a\\u8f93\\u5165\\u6570\\u91cf\\uff08\\u7528\\u6237\\u786e\\u5b9a\\uff09\\r\\n        uint256 amountOutMinimum;  // \\u6700\\u5c11\\u8f93\\u51fa\\u6570\\u91cf\\uff08\\u6ed1\\u70b9\\u4fdd\\u62a4\\uff09\\r\\n        uint160 sqrtPriceLimitX96; // \\u4ef7\\u683c\\u9650\\u5236\\r\\n    }\\r\\n\\r\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\r\\n    \\r\\n    struct ExactOutputParams {\\r\\n        address tokenIn;           // \\u8f93\\u5165\\u4ee3\\u5e01\\r\\n        address tokenOut;          // \\u8f93\\u51fa\\u4ee3\\u5e01\\r\\n        uint32[] indexPath;        // \\u4ea4\\u6613\\u8def\\u5f84\\r\\n        address recipient;         // \\u63a5\\u6536\\u8005\\r\\n        uint256 deadline;          // \\u622a\\u6b62\\u65f6\\u95f4\\r\\n        uint256 amountOut;         // \\u6307\\u5b9a\\u8f93\\u51fa\\u6570\\u91cf\\uff08\\u7528\\u6237\\u786e\\u5b9a\\uff09\\r\\n        uint256 amountInMaximum;   // \\u6700\\u591a\\u8f93\\u5165\\u6570\\u91cf\\uff08\\u6ed1\\u70b9\\u4fdd\\u62a4\\uff09\\r\\n        uint160 sqrtPriceLimitX96; // \\u4ef7\\u683c\\u9650\\u5236\\r\\n    }\\r\\n\\r\\n     function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    struct QuoteExactInputParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint32[] indexPath;\\r\\n        uint256 amountIn;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    function quoteExactInput(\\r\\n        QuoteExactInputParams calldata params\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n     struct QuoteExactOutputParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint32[] indexPath;\\r\\n        uint256 amountOut;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n\\r\\n    function quoteExactOutput(\\r\\n        QuoteExactOutputParams calldata params\\r\\n    ) external returns (uint256 amountIn);\\r\\n}\",\"keccak256\":\"0x85a6cbe1d3c484b73af53696ce8e3d444e3e7e9b25e6962387025698627237e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161156838038061156883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6114d5806100936000396000f3fe6080604052600436106100705760003560e01c8063a8a590fd1161004e578063a8a590fd146100f0578063ae5ab5e114610103578063dc4c90d314610123578063fa483e721461015b57600080fd5b80633439aade14610075578063393dd1da146100a85780636c207ad0146100dd575b600080fd5b34801561008157600080fd5b50610095610090366004610def565b61017d565b6040519081526020015b60405180910390f35b3480156100b457600080fd5b506100c86100c3366004610e9b565b6102bb565b6040805192835260208301919091520161009f565b6100956100eb366004610f46565b610387565b6100956100fe366004610f46565b61074a565b34801561010f57600080fd5b5061009561011e366004610def565b610aba565b34801561012f57600080fd5b50600054610143906001600160a01b031681565b6040516001600160a01b03909116815260200161009f565b34801561016757600080fd5b5061017b610176366004610f7b565b610b88565b005b6040805161010081019091526000903090636c207ad090806101a26020870187610fce565b6001600160a01b031681526020018560200160208101906101c39190610fce565b6001600160a01b031681526020016101de6040870187610ff2565b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082015260400161022542610e10611052565b81526060808701356020830152600060408301520161024a60a0870160808801610fce565b6001600160a01b03168152506040518263ffffffff1660e01b8152600401610272919061112e565b6020604051808303816000875af1158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190611141565b92915050565b600080886001600160a01b031663128acb088989898989896040518763ffffffff1660e01b81526004016102f49695949392919061115a565b60408051808303816000875af192505050801561032e575060408051601f3d908101601f1916820190925261032b918101906111b7565b60015b610375573d80801561035c576040519150601f19603f3d011682016040523d82523d6000602084013e610361565b606091505b5061036b81610d36565b925092505061037b565b90925090505b97509795505050505050565b600060a08201358161039f6040850160208601610fce565b6001600160a01b03166103b56020860186610fce565b6001600160a01b031610905060005b6103d16040860186610ff2565b90508110156106ab57600080546001600160a01b03166371c54fc96103f96020890189610fce565b61040960408a0160208b01610fce565b61041660408b018b610ff2565b87818110610426576104266111db565b905060200201602081019061043b919061120a565b6040518463ffffffff1660e01b815260040161045993929190611225565b602060405180830381865afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a919061124e565b90506001600160a01b0381166104e85760405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b60448201526064015b60405180910390fd5b8060006104f86020890189610fce565b61050860408a0160208b01610fce565b61051560408b018b610ff2565b87818110610525576105256111db565b905060200201602081019061053a919061120a565b600061054c60808d0160608e01610fce565b6001600160a01b0316146105605733610563565b60005b604080516001600160a01b0395861660208201529385169084015263ffffffff909116606083015291909116608082015260a00160408051601f1981840301815291905290506000803063393dd1da856105c360808e0160608f01610fce565b8a8c8f60e00160208101906105d89190610fce565b896040518763ffffffff1660e01b81526004016105fa969594939291906112bb565b60408051808303816000875af1158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c91906111b7565b915091508661064b578061064d565b815b610657908961130a565b97508661066c576106678261131d565b610675565b6106758161131d565b61067f908a611052565b9850876000036106935750505050506106ab565b505050505080806106a390611339565b9150506103c4565b508360c001358310156106f45760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b60448201526064016104df565b60408051821515815260a086013560208201529081018390526060810184905233907f176648f1f11cda284c124490086be42a926ddf0ae887ebe7b1d6b337d89427569060800160405180910390a25050919050565b600060a0820135816107626040850160208601610fce565b6001600160a01b03166107786020860186610fce565b6001600160a01b031610905060005b6107946040860186610ff2565b9050811015610a7157600080546001600160a01b03166371c54fc96107bc6020890189610fce565b6107cc60408a0160208b01610fce565b6107d960408b018b610ff2565b878181106107e9576107e96111db565b90506020020160208101906107fe919061120a565b6040518463ffffffff1660e01b815260040161081c93929190611225565b602060405180830381865afa158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d919061124e565b90506001600160a01b0381166108a65760405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b60448201526064016104df565b8060006108b66020890189610fce565b6108c660408a0160208b01610fce565b6108d360408b018b610ff2565b878181106108e3576108e36111db565b90506020020160208101906108f8919061120a565b600061090a60808d0160608e01610fce565b6001600160a01b03161461091e5733610921565b60005b604080516001600160a01b0395861660208201529385169084015263ffffffff909116606083015291909116608082015260a00160408051601f1981840301815291905290506000803063393dd1da8561098160808e0160608f01610fce565b8a61098b8d61131d565b8f60e001602081019061099e9190610fce565b896040518763ffffffff1660e01b81526004016109c0969594939291906112bb565b60408051808303816000875af11580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0291906111b7565b9150915086610a1957610a148261131d565b610a22565b610a228161131d565b610a2c908961130a565b975086610a395780610a3b565b815b610a45908a611052565b985087600003610a59575050505050610a71565b50505050508080610a6990611339565b915050610787565b508360c001358311156106f45760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b60448201526064016104df565b604080516101008101909152600090309063a8a590fd9080610adf6020870187610fce565b6001600160a01b03168152602001856020016020810190610b009190610fce565b6001600160a01b03168152602001610b1b6040870187610ff2565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509385525050506020820152604001610b6242610e10611052565b8152606080870135602083015260001960408301520161024a60a0870160808801610fce565b6000808080610b9985870187611352565b600080546040516371c54fc960e01b81529599509397509195509350916001600160a01b03909116906371c54fc990610bda90889088908890600401611225565b602060405180830381865afa158015610bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1b919061124e565b90506001600160a01b0381163314610c755760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063616c6c6261636b2063616c6c657200000000000000000060448201526064016104df565b6000808a13610c845788610c86565b895b90506001600160a01b038316610ca7576040518a8152896020820152604081fd5b8015610d2a576040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528716906323b872dd906064016020604051808303816000875af1158015610d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2891906113ac565b505b50505050505050505050565b6000808251604014610dba57604483511015610d875760405162461bcd60e51b815260206004820152601060248201526f2ab732bc3832b1ba32b21032b93937b960811b60448201526064016104df565b60048301925082806020019051810190610da191906113df565b60405162461bcd60e51b81526004016104df919061148c565b82806020019051810190610dce91906111b7565b91509150915091565b600060a08284031215610de957600080fd5b50919050565b600060208284031215610e0157600080fd5b813567ffffffffffffffff811115610e1857600080fd5b610e2484828501610dd7565b949350505050565b6001600160a01b0381168114610e4157600080fd5b50565b8015158114610e4157600080fd5b60008083601f840112610e6457600080fd5b50813567ffffffffffffffff811115610e7c57600080fd5b602083019150836020828501011115610e9457600080fd5b9250929050565b600080600080600080600060c0888a031215610eb657600080fd5b8735610ec181610e2c565b96506020880135610ed181610e2c565b95506040880135610ee181610e44565b9450606088013593506080880135610ef881610e2c565b925060a088013567ffffffffffffffff811115610f1457600080fd5b610f208a828b01610e52565b989b979a50959850939692959293505050565b60006101008284031215610de957600080fd5b600060208284031215610f5857600080fd5b813567ffffffffffffffff811115610f6f57600080fd5b610e2484828501610f33565b60008060008060608587031215610f9157600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610fb657600080fd5b610fc287828801610e52565b95989497509550505050565b600060208284031215610fe057600080fd5b8135610feb81610e2c565b9392505050565b6000808335601e1984360301811261100957600080fd5b83018035915067ffffffffffffffff82111561102457600080fd5b6020019150600581901b3603821315610e9457600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156102b5576102b561103c565b80516001600160a01b039081168352602080830151909116818401526040808301516101009185018290528051918501829052600092610120860192918101918491905b808310156110cf57835163ffffffff1685529381019392810192600192909201916110a9565b5050505060608301516110ed60608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c083015160c085015260e083015161112660e08601826001600160a01b03169052565b509392505050565b602081526000610feb6020830184611065565b60006020828403121561115357600080fd5b5051919050565b6001600160a01b0387811682528615156020830152604082018690528416606082015260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b600080604083850312156111ca57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff8116811461120557600080fd5b919050565b60006020828403121561121c57600080fd5b610feb826111f1565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b60006020828403121561126057600080fd5b8151610feb81610e2c565b60005b8381101561128657818101518382015260200161126e565b50506000910152565b600081518084526112a781602086016020860161126b565b601f01601f19169290920160200192915050565b6001600160a01b03878116825286811660208301528515156040830152606082018590528316608082015260c060a082018190526000906112fe9083018461128f565b98975050505050505050565b818103818111156102b5576102b561103c565b6000600160ff1b82016113325761133261103c565b5060000390565b60006001820161134b5761134b61103c565b5060010190565b6000806000806080858703121561136857600080fd5b843561137381610e2c565b9350602085013561138381610e2c565b9250611391604086016111f1565b915060608501356113a181610e2c565b939692955090935050565b6000602082840312156113be57600080fd5b8151610feb81610e44565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156113f157600080fd5b815167ffffffffffffffff8082111561140957600080fd5b818401915084601f83011261141d57600080fd5b81518181111561142f5761142f6113c9565b604051601f8201601f19908116603f01168101908382118183101715611457576114576113c9565b8160405282815287602084870101111561147057600080fd5b61148183602083016020880161126b565b979650505050505050565b602081526000610feb602083018461128f56fea2646970667358221220e4a79f5cfaaa5cc716f81cc0af7e022acf98361efc6e7ea8edcee15a1bef2a9064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063a8a590fd1161004e578063a8a590fd146100f0578063ae5ab5e114610103578063dc4c90d314610123578063fa483e721461015b57600080fd5b80633439aade14610075578063393dd1da146100a85780636c207ad0146100dd575b600080fd5b34801561008157600080fd5b50610095610090366004610def565b61017d565b6040519081526020015b60405180910390f35b3480156100b457600080fd5b506100c86100c3366004610e9b565b6102bb565b6040805192835260208301919091520161009f565b6100956100eb366004610f46565b610387565b6100956100fe366004610f46565b61074a565b34801561010f57600080fd5b5061009561011e366004610def565b610aba565b34801561012f57600080fd5b50600054610143906001600160a01b031681565b6040516001600160a01b03909116815260200161009f565b34801561016757600080fd5b5061017b610176366004610f7b565b610b88565b005b6040805161010081019091526000903090636c207ad090806101a26020870187610fce565b6001600160a01b031681526020018560200160208101906101c39190610fce565b6001600160a01b031681526020016101de6040870187610ff2565b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082015260400161022542610e10611052565b81526060808701356020830152600060408301520161024a60a0870160808801610fce565b6001600160a01b03168152506040518263ffffffff1660e01b8152600401610272919061112e565b6020604051808303816000875af1158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190611141565b92915050565b600080886001600160a01b031663128acb088989898989896040518763ffffffff1660e01b81526004016102f49695949392919061115a565b60408051808303816000875af192505050801561032e575060408051601f3d908101601f1916820190925261032b918101906111b7565b60015b610375573d80801561035c576040519150601f19603f3d011682016040523d82523d6000602084013e610361565b606091505b5061036b81610d36565b925092505061037b565b90925090505b97509795505050505050565b600060a08201358161039f6040850160208601610fce565b6001600160a01b03166103b56020860186610fce565b6001600160a01b031610905060005b6103d16040860186610ff2565b90508110156106ab57600080546001600160a01b03166371c54fc96103f96020890189610fce565b61040960408a0160208b01610fce565b61041660408b018b610ff2565b87818110610426576104266111db565b905060200201602081019061043b919061120a565b6040518463ffffffff1660e01b815260040161045993929190611225565b602060405180830381865afa158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a919061124e565b90506001600160a01b0381166104e85760405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b60448201526064015b60405180910390fd5b8060006104f86020890189610fce565b61050860408a0160208b01610fce565b61051560408b018b610ff2565b87818110610525576105256111db565b905060200201602081019061053a919061120a565b600061054c60808d0160608e01610fce565b6001600160a01b0316146105605733610563565b60005b604080516001600160a01b0395861660208201529385169084015263ffffffff909116606083015291909116608082015260a00160408051601f1981840301815291905290506000803063393dd1da856105c360808e0160608f01610fce565b8a8c8f60e00160208101906105d89190610fce565b896040518763ffffffff1660e01b81526004016105fa969594939291906112bb565b60408051808303816000875af1158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c91906111b7565b915091508661064b578061064d565b815b610657908961130a565b97508661066c576106678261131d565b610675565b6106758161131d565b61067f908a611052565b9850876000036106935750505050506106ab565b505050505080806106a390611339565b9150506103c4565b508360c001358310156106f45760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b60448201526064016104df565b60408051821515815260a086013560208201529081018390526060810184905233907f176648f1f11cda284c124490086be42a926ddf0ae887ebe7b1d6b337d89427569060800160405180910390a25050919050565b600060a0820135816107626040850160208601610fce565b6001600160a01b03166107786020860186610fce565b6001600160a01b031610905060005b6107946040860186610ff2565b9050811015610a7157600080546001600160a01b03166371c54fc96107bc6020890189610fce565b6107cc60408a0160208b01610fce565b6107d960408b018b610ff2565b878181106107e9576107e96111db565b90506020020160208101906107fe919061120a565b6040518463ffffffff1660e01b815260040161081c93929190611225565b602060405180830381865afa158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d919061124e565b90506001600160a01b0381166108a65760405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b60448201526064016104df565b8060006108b66020890189610fce565b6108c660408a0160208b01610fce565b6108d360408b018b610ff2565b878181106108e3576108e36111db565b90506020020160208101906108f8919061120a565b600061090a60808d0160608e01610fce565b6001600160a01b03161461091e5733610921565b60005b604080516001600160a01b0395861660208201529385169084015263ffffffff909116606083015291909116608082015260a00160408051601f1981840301815291905290506000803063393dd1da8561098160808e0160608f01610fce565b8a61098b8d61131d565b8f60e001602081019061099e9190610fce565b896040518763ffffffff1660e01b81526004016109c0969594939291906112bb565b60408051808303816000875af11580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0291906111b7565b9150915086610a1957610a148261131d565b610a22565b610a228161131d565b610a2c908961130a565b975086610a395780610a3b565b815b610a45908a611052565b985087600003610a59575050505050610a71565b50505050508080610a6990611339565b915050610787565b508360c001358311156106f45760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b60448201526064016104df565b604080516101008101909152600090309063a8a590fd9080610adf6020870187610fce565b6001600160a01b03168152602001856020016020810190610b009190610fce565b6001600160a01b03168152602001610b1b6040870187610ff2565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509385525050506020820152604001610b6242610e10611052565b8152606080870135602083015260001960408301520161024a60a0870160808801610fce565b6000808080610b9985870187611352565b600080546040516371c54fc960e01b81529599509397509195509350916001600160a01b03909116906371c54fc990610bda90889088908890600401611225565b602060405180830381865afa158015610bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1b919061124e565b90506001600160a01b0381163314610c755760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063616c6c6261636b2063616c6c657200000000000000000060448201526064016104df565b6000808a13610c845788610c86565b895b90506001600160a01b038316610ca7576040518a8152896020820152604081fd5b8015610d2a576040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528716906323b872dd906064016020604051808303816000875af1158015610d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2891906113ac565b505b50505050505050505050565b6000808251604014610dba57604483511015610d875760405162461bcd60e51b815260206004820152601060248201526f2ab732bc3832b1ba32b21032b93937b960811b60448201526064016104df565b60048301925082806020019051810190610da191906113df565b60405162461bcd60e51b81526004016104df919061148c565b82806020019051810190610dce91906111b7565b91509150915091565b600060a08284031215610de957600080fd5b50919050565b600060208284031215610e0157600080fd5b813567ffffffffffffffff811115610e1857600080fd5b610e2484828501610dd7565b949350505050565b6001600160a01b0381168114610e4157600080fd5b50565b8015158114610e4157600080fd5b60008083601f840112610e6457600080fd5b50813567ffffffffffffffff811115610e7c57600080fd5b602083019150836020828501011115610e9457600080fd5b9250929050565b600080600080600080600060c0888a031215610eb657600080fd5b8735610ec181610e2c565b96506020880135610ed181610e2c565b95506040880135610ee181610e44565b9450606088013593506080880135610ef881610e2c565b925060a088013567ffffffffffffffff811115610f1457600080fd5b610f208a828b01610e52565b989b979a50959850939692959293505050565b60006101008284031215610de957600080fd5b600060208284031215610f5857600080fd5b813567ffffffffffffffff811115610f6f57600080fd5b610e2484828501610f33565b60008060008060608587031215610f9157600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610fb657600080fd5b610fc287828801610e52565b95989497509550505050565b600060208284031215610fe057600080fd5b8135610feb81610e2c565b9392505050565b6000808335601e1984360301811261100957600080fd5b83018035915067ffffffffffffffff82111561102457600080fd5b6020019150600581901b3603821315610e9457600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156102b5576102b561103c565b80516001600160a01b039081168352602080830151909116818401526040808301516101009185018290528051918501829052600092610120860192918101918491905b808310156110cf57835163ffffffff1685529381019392810192600192909201916110a9565b5050505060608301516110ed60608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c083015160c085015260e083015161112660e08601826001600160a01b03169052565b509392505050565b602081526000610feb6020830184611065565b60006020828403121561115357600080fd5b5051919050565b6001600160a01b0387811682528615156020830152604082018690528416606082015260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b600080604083850312156111ca57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff8116811461120557600080fd5b919050565b60006020828403121561121c57600080fd5b610feb826111f1565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b60006020828403121561126057600080fd5b8151610feb81610e2c565b60005b8381101561128657818101518382015260200161126e565b50506000910152565b600081518084526112a781602086016020860161126b565b601f01601f19169290920160200192915050565b6001600160a01b03878116825286811660208301528515156040830152606082018590528316608082015260c060a082018190526000906112fe9083018461128f565b98975050505050505050565b818103818111156102b5576102b561103c565b6000600160ff1b82016113325761133261103c565b5060000390565b60006001820161134b5761134b61103c565b5060010190565b6000806000806080858703121561136857600080fd5b843561137381610e2c565b9350602085013561138381610e2c565b9250611391604086016111f1565b915060608501356113a181610e2c565b939692955090935050565b6000602082840312156113be57600080fd5b8151610feb81610e44565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156113f157600080fd5b815167ffffffffffffffff8082111561140957600080fd5b818401915084601f83011261141d57600080fd5b81518181111561142f5761142f6113c9565b604051601f8201601f19908116603f01168101908382118183101715611457576114576113c9565b8160405282815287602084870101111561147057600080fd5b61148183602083016020880161126b565b979650505050505050565b602081526000610feb602083018461128f56fea2646970667358221220e4a79f5cfaaa5cc716f81cc0af7e022acf98361efc6e7ea8edcee15a1bef2a9064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "quoteExactInput((address,address,uint32[],uint256,uint160))": {
        "details": "报价接口"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9423,
        "contract": "contracts/SwapRouter.sol:SwapRouter",
        "label": "poolManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPoolManager)10365"
      }
    ],
    "types": {
      "t_contract(IPoolManager)10365": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      }
    }
  }
}